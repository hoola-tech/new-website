(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{"65jR":function(I,g,C){"use strict";var A=C("TqRt");g.__esModule=!0,g.default=void 0;var c=function(I,g){if("function"==typeof WeakMap)var C=new WeakMap,A=new WeakMap;return function(I,g){if(!g&&I&&I.__esModule)return I;var c,b,G={__proto__:null,default:I};if(null===I||"object"!=typeof I&&"function"!=typeof I)return G;if(c=g?A:C){if(c.has(I))return c.get(I);c.set(I,G)}for(const C in I)"default"!==C&&{}.hasOwnProperty.call(I,C)&&((b=(c=Object.defineProperty)&&Object.getOwnPropertyDescriptor(I,C))&&(b.get||b.set)?c(G,C,b):G[C]=I[C]);return G}(I,g)}(C("q1tI")),b=A(C("VIIK")),G=A(C("slAs")),X=A(C("0uQq")),i=C("PAeb"),l=A(C("uOxL")),Z=A(C("zbsk")),W=A(C("Z8j8")),d=A(C("2IsD")),x=A(C("qhPo")),B=A(C("S104")),m=A(C("y2uD")),u=A(C("1wHz")),F=A(C("/F/w")),a=A(C("2mNG"));const V=(0,i.css)({top:0,left:0,zIndex:0,backgroundRepeat:"no-repeat",backgroundImage:"url("+x.default+")","@media (min-width: 1920px)":{backgroundPosition:"0 270px !important",backgroundSize:"cover"}},(0,X.default)({paddingTop:[40,0],paddingBottom:[40,100],backgroundPosition:["center","bottom"],backgroundSize:["auto","cover"]}),"label:wrapperClass;","/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),Y=(0,i.css)({top:0,left:0,zIndex:0},(0,X.default)({paddingTop:[40,100],paddingBottom:[40]}),"label:sectionClass;","/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),w=(0,i.css)({display:"flex",flexDirection:"column",alignItems:"center",maxWidth:1200,boxSizing:"border-box"},(0,X.default)({width:["100%","100%"],height:["100%","auto"],padding:[0,"0px 16px",0]}),"label:contentContainerClass;","/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),J=(0,b.default)("div",{target:"e1ntiwm80",label:"TextWrapper"})({maxWidth:434,margin:"0 auto",display:"flex",flexDirection:"column",alignItems:"center"},(0,X.default)({}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),t=(0,b.default)("h2",{target:"e1ntiwm81",label:"Title"})({fontSize:48,fontWeight:G.default.fontWeight.bold,color:G.default.color.black,textAlign:"center",paddingTop:0,marginTop:0,marginBottom:12},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),N=(0,b.default)("span",{target:"e1ntiwm82",label:"TitleHighlight"})({backgroundImage:"url("+Z.default+")",backgroundPositionX:"right",backgroundPositionY:"bottom",backgroundRepeat:"no-repeat"},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),s=(0,b.default)("div",{target:"e1ntiwm83",label:"ComparisonWrapper"})({position:"relative",width:"100%",display:"flex",backgroundImage:"url("+d.default+")",backgroundSize:"cover",backgroundPosition:"center",backgroundRepeat:"no-repeat","&::before":{content:"url("+W.default+")",position:"absolute",top:"-5%",left:"5%",width:"100%",height:"100%"}},(0,X.default)({overflow:["hidden","visible"],flexDirection:["column","row"],justifyContent:["flex-start","space-evenly"],alignItems:["center","flex-end"],"&::after":{transform:["rotate(90deg)","none"],top:["0%","20%"],left:["-10%"]}}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),y=(0,b.default)("div",{target:"e1ntiwm84",label:"BoxWrapper"})({display:"flex",flexDirection:"column",justifyContent:"flex-end",alignItems:"center"},(0,X.default)({height:["auto",680],width:["100%","auto"],"&:nth-child(2)":{marginLeft:[30,0,30],marginRight:[30,0,30]},"&:last-child":{marginBottom:[40,0]}}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),h=(0,b.default)("div",{target:"e1ntiwm85",label:"Box"})({position:"relative",boxSizing:"border-box",maxWidth:380,background:G.default.color.white,boxShadow:"2px 3px 15px rgba(100, 100, 100, 0.239216)",borderRadius:20,padding:32,color:G.default.color.black,"& ul":{listStyle:"none"},"& li":{display:"flex",justifyContent:"flex-start",marginBottom:16,fontSize:G.default.fontSize.navMenuItem}},(0,X.default)({width:["90%",320,380],marginBottom:[200,0]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),v=(0,b.default)("h3",{target:"e1ntiwm86",label:"ProductTitle"})({fontSize:30,fontWeight:G.default.fontWeight.bold,color:G.default.color.black,textAlign:"center",paddingTop:0,marginTop:0,marginBottom:20},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),R=(0,b.default)("img",{target:"e1ntiwm87",label:"CheckMarkImg"})({width:24,height:24,marginRight:16},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),n=(0,b.default)("img",{target:"e1ntiwm88",label:"DotImage"})({width:24,height:24,marginRight:16},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),p=(0,b.default)("img",{target:"e1ntiwm89",label:"FlyingManImage"})({position:"relative",zIndex:1,maxWidth:200},(0,X.default)({width:["50%","auto"],marginBottom:[0,-20]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),L=(0,b.default)("img",{target:"e1ntiwm810",label:"PlaneImage"})({position:"relative",zIndex:1,maxWidth:173},(0,X.default)({width:["40%","auto"],marginBottom:[-4,-20]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),H=(0,b.default)("img",{target:"e1ntiwm811",label:"RocketImage"})({position:"relative",zIndex:1,maxWidth:200},(0,X.default)({width:["50%","auto"],marginBottom:[0,-20]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");g.default=I=>c.default.createElement(c.Fragment,null,c.default.createElement("section",Object.assign({},I,{className:Y}),c.default.createElement(l.default,{className:w},c.default.createElement(J,null,c.default.createElement(t,null,"Why choose",c.default.createElement(N,null," Hoola AI"),"?")))),c.default.createElement("section",Object.assign({},I,{className:V}),c.default.createElement(l.default,{className:w},c.default.createElement(s,null,c.default.createElement(y,null,c.default.createElement(p,{src:u.default,alt:"flying man"}),c.default.createElement(h,null,c.default.createElement(v,null,"SaaS CMS"),c.default.createElement("ul",null,c.default.createElement("li",null,c.default.createElement(R,{src:B.default,alt:"check mark"}),"No need to manage infrastructure"),c.default.createElement("li",null,c.default.createElement(n,{src:m.default,alt:"point"}),"Unable to customise the product"),c.default.createElement("li",null,c.default.createElement(n,{src:m.default,alt:"point"}),"You can only build websites"),c.default.createElement("li",null,c.default.createElement(n,{src:m.default,alt:"point"}),"Usually a black-box"),c.default.createElement("li",null,c.default.createElement(n,{src:m.default,alt:"point"}),"You don't own your data")))),c.default.createElement(y,null,c.default.createElement(L,{src:F.default,alt:"plane"}),c.default.createElement(h,null,c.default.createElement(v,null,"OpenSource CMS"),c.default.createElement("ul",null,c.default.createElement("li",null,c.default.createElement(R,{src:B.default,alt:"check mark"}),"You can customise the product"),c.default.createElement("li",null,c.default.createElement(R,{src:B.default,alt:"check mark"}),"Build more than websites"),c.default.createElement("li",null,c.default.createElement(n,{src:m.default,alt:"point"}),"Need to hire people to manage infrastructure"),c.default.createElement("li",null,c.default.createElement(n,{src:m.default,alt:"point"}),"High total cost of ownership"),c.default.createElement("li",null,c.default.createElement(n,{src:m.default,alt:"point"}),"Need to over provision and over pay for infrastructure to handle peak demands"),c.default.createElement("li",null,c.default.createElement(n,{src:m.default,alt:"point"}),"Worry about flash-crowds, networking, orchestration, maintenance, and more")))),c.default.createElement(y,null,c.default.createElement(H,{src:a.default,alt:"rocket"}),c.default.createElement(h,null,c.default.createElement(v,null,"Hoola AI"),c.default.createElement("ul",null,c.default.createElement("li",null,c.default.createElement(R,{src:B.default,alt:"check mark"}),"Serverless level scale, handle any peak demand right out of the box"),c.default.createElement("li",null,c.default.createElement(R,{src:B.default,alt:"check mark"}),"Save 60% on infrastructure cost compared to OpenSource"),c.default.createElement("li",null,c.default.createElement(R,{src:B.default,alt:"check mark"}),"Faster time to market as you don't spend time on architecting and orchestrating infrastructure"),c.default.createElement("li",null,c.default.createElement(R,{src:B.default,alt:"check mark"}),"Build applications, APIs, microservices and websites"),c.default.createElement("li",null,c.default.createElement(R,{src:B.default,alt:"check mark"}),"Pay per request - never overpay for infrastructure again"),c.default.createElement("li",null,c.default.createElement(R,{src:B.default,alt:"check mark"}),"No vendor lock-in"),c.default.createElement("li",null,c.default.createElement(R,{src:B.default,alt:"check mark"}),"Lower TCO when compared to both SaaS and OpenSource"),c.default.createElement("li",null,c.default.createElement(R,{src:B.default,alt:"check mark"}),"Runs on the architecture of the future"))))))))}}]);
//# sourceMappingURL=ec4b803f-03a5e9a2024fe286446d.js.map