(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{"0+AG":function(I,g,C){"use strict";var A=C("TqRt");g.__esModule=!0,g.default=void 0;var b=A(C("q1tI")),c=A(C("VIIK")),G=A(C("slAs")),X=A(C("0uQq")),l=C("PAeb"),i=A(C("uOxL")),d=A(C("zd6A")),Z=A(C("yvDP")),W=A(C("B9b9")),m=A(C("umYr")),x=A(C("jdMA")),B=A(C("n+S5")),u=A(C("7yQ8")),F=A(C("qelH")),a=A(C("g4yG"));const Y=(0,l.css)({top:0,left:0,zIndex:0,backgroundRepeat:"no-repeat",backgroundImage:"url("+m.default+")","@media (min-width: 1920px)":{backgroundPosition:"0 270px !important"},backgroundSize:"cover"},(0,X.default)({paddingTop:[40,100],paddingBottom:[40,100],backgroundPosition:["center","bottom"]}),"label:wrapperClass;","/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),V=(0,l.css)({display:"flex",flexDirection:"column",alignItems:"center",maxWidth:1200,boxSizing:"border-box"},(0,X.default)({width:["100%","100%"],height:["100%","auto"],padding:[0,"0px 16px",0]}),"label:contentContainerClass;","/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),w=(0,c.default)("div",{target:"e1xkwhbg0",label:"TextWrapper"})({maxWidth:634,margin:"0 auto",display:"flex",flexDirection:"column",alignItems:"center"},(0,X.default)({marginBottom:[40,80,60]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),J=(0,c.default)("h2",{target:"e1xkwhbg1",label:"Title"})({fontSize:48,fontWeight:G.default.fontWeight.bold,color:G.default.color.black,textAlign:"center",paddingTop:0,marginTop:0,marginBottom:12},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),h=(0,c.default)("span",{target:"e1xkwhbg2",label:"TitleHighlight"})({backgroundImage:"url("+d.default+")",backgroundPositionX:"right",backgroundPositionY:"bottom",backgroundRepeat:"no-repeat"},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),t=(0,c.default)("div",{target:"e1xkwhbg3",label:"ComparisonWrapper"})({position:"relative",width:"100%",display:"flex",backgroundImage:"url("+W.default+")",backgroundSize:"cover",backgroundPosition:"center",backgroundRepeat:"no-repeat","&::before":{content:"url("+Z.default+")",position:"absolute",top:"-5%",left:"5%",width:"100%",height:"100%"}},(0,X.default)({overflow:["hidden","visible"],flexDirection:["column","row"],justifyContent:["flex-start","space-evenly"],alignItems:["center","flex-end"],"&::after":{transform:["rotate(90deg)","none"],top:["0%","20%"],left:["-10%"]}}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9iZXJuYXJkL1Byb2plY3RzL2hvb2xhL3NpdGUvc3JjL2NvbXBvbmVudHMvYWdlbmN5L3doeS1jaG9vc2Utd2ViaW55L3doeS1jaG9vc2Utd2ViaW55LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlGMEIiLCJmaWxlIjoiL1VzZXJzL2Jlcm5hcmQvUHJvamVjdHMvaG9vbGEvc2l0ZS9zcmMvY29tcG9uZW50cy9hZ2VuY3kvd2h5LWNob29zZS13ZWJpbnkvd2h5LWNob29zZS13ZWJpbnkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJyZWFjdC1lbW90aW9uXCI7XG5pbXBvcnQgdGhlbWUgZnJvbSBcIi4uLy4uL3V0aWxzL3RoZW1lXCI7XG5pbXBvcnQgbXEgZnJvbSBcIi4uLy4uL3V0aWxzL2JyZWFrcG9pbnRzXCI7XG5pbXBvcnQgeyBjc3MgfSBmcm9tIFwiZW1vdGlvblwiO1xuaW1wb3J0IENvbnRlbnRDb250YWluZXIgZnJvbSBcIi4uLy4uL3VpL2NvbnRlbnQtY29udGFpbmVyXCI7XG5cbmltcG9ydCB3ZWJpbnlCZyBmcm9tIFwiLi9hc3NldHMvd2ViaW55LWJnLnN2Z1wiO1xuaW1wb3J0IGFydHdvcmtCZyBmcm9tIFwiLi9hc3NldHMvYXJ0d29yay1iZy5zdmdcIjtcbmltcG9ydCBwdXJwbGVCZyBmcm9tIFwiLi9hc3NldHMvcHVycGxlLWJnLnN2Z1wiO1xuaW1wb3J0IGdyYXlCZyBmcm9tIFwiLi9hc3NldHMvZ3JheS1iZy5zdmdcIjtcbmltcG9ydCBjaGVja01hcmsgZnJvbSBcIi4vYXNzZXRzL2NoZWNrX2NpcmNsZV9vdXRsaW5lLTI0cHguc3ZnXCI7XG5pbXBvcnQgdW5jaGVja01hcmsgZnJvbSBcIi4vYXNzZXRzL2hpZ2hsaWdodF9vZmYtMjRweC5zdmdcIjtcbmltcG9ydCBmbHlpbmdNYW4gZnJvbSBcIi4vYXNzZXRzL2ZseS1tYW4uc3ZnXCI7XG5pbXBvcnQgcGxhbmUgZnJvbSBcIi4vYXNzZXRzL3BsYW5lLnN2Z1wiO1xuaW1wb3J0IHJvY2tldCBmcm9tIFwiLi9hc3NldHMvcm9ja2V0LnN2Z1wiO1xuXG5jb25zdCB3cmFwcGVyQ2xhc3MgPSBjc3MoXG4gICAge1xuICAgICAgICB0b3A6IDAsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIHpJbmRleDogMCxcbiAgICAgICAgYmFja2dyb3VuZFJlcGVhdDogXCJuby1yZXBlYXRcIixcbiAgICAgICAgYmFja2dyb3VuZEltYWdlOiBcInVybChcIiArIGdyYXlCZyArIFwiKVwiLFxuICAgICAgICBcIkBtZWRpYSAobWluLXdpZHRoOiAxOTIwcHgpXCI6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRQb3NpdGlvbjogXCIwIDI3MHB4ICFpbXBvcnRhbnRcIixcbiAgICAgICAgfSxcbiAgICAgICAgYmFja2dyb3VuZFNpemU6IFwiY292ZXJcIixcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgcGFkZGluZ1RvcDogWzQwLCAxMDBdLFxuICAgICAgICBwYWRkaW5nQm90dG9tOiBbNDAsIDEwMF0sXG4gICAgICAgIGJhY2tncm91bmRQb3NpdGlvbjogW1wiY2VudGVyXCIsIFwiYm90dG9tXCJdLFxuICAgIH0pLFxuKTtcblxuY29uc3QgY29udGVudENvbnRhaW5lckNsYXNzID0gY3NzKFxuICAgIHtcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgIG1heFdpZHRoOiAxMjAwLFxuICAgICAgICBib3hTaXppbmc6IFwiYm9yZGVyLWJveFwiLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICB3aWR0aDogW1wiMTAwJVwiLCBcIjEwMCVcIl0sXG4gICAgICAgIGhlaWdodDogW1wiMTAwJVwiLCBcImF1dG9cIl0sXG4gICAgICAgIHBhZGRpbmc6IFswLCBcIjBweCAxNnB4XCIsIDBdLFxuICAgIH0pLFxuKTtcblxuY29uc3QgVGV4dFdyYXBwZXIgPSBzdHlsZWQoXCJkaXZcIikoXG4gICAge1xuICAgICAgICBtYXhXaWR0aDogNjM0LFxuICAgICAgICBtYXJnaW46IFwiMCBhdXRvXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICBtYXJnaW5Cb3R0b206IFs0MCwgODAsIDYwXSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IFRpdGxlID0gc3R5bGVkKFwiaDJcIikoe1xuICAgIGZvbnRTaXplOiA0OCxcbiAgICBmb250V2VpZ2h0OiB0aGVtZS5mb250V2VpZ2h0LmJvbGQsXG4gICAgY29sb3I6IHRoZW1lLmNvbG9yLmJsYWNrLFxuICAgIHRleHRBbGlnbjogXCJjZW50ZXJcIixcbiAgICBwYWRkaW5nVG9wOiAwLFxuICAgIG1hcmdpblRvcDogMCxcbiAgICBtYXJnaW5Cb3R0b206IDEyLFxufSk7XG5cbmNvbnN0IFRpdGxlSGlnaGxpZ2h0ID0gc3R5bGVkKFwic3BhblwiKSh7XG4gICAgYmFja2dyb3VuZEltYWdlOiBcInVybChcIiArIHdlYmlueUJnICsgXCIpXCIsXG4gICAgYmFja2dyb3VuZFBvc2l0aW9uWDogXCJyaWdodFwiLFxuICAgIGJhY2tncm91bmRQb3NpdGlvblk6IFwiYm90dG9tXCIsXG4gICAgYmFja2dyb3VuZFJlcGVhdDogXCJuby1yZXBlYXRcIixcbn0pO1xuXG5jb25zdCBDb21wYXJpc29uV3JhcHBlciA9IHN0eWxlZChcImRpdlwiKShcbiAgICB7XG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGJhY2tncm91bmRJbWFnZTogXCJ1cmwoXCIgKyBwdXJwbGVCZyArIFwiKVwiLFxuICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogXCJjb3ZlclwiLFxuICAgICAgICBiYWNrZ3JvdW5kUG9zaXRpb246IFwiY2VudGVyXCIsXG4gICAgICAgIGJhY2tncm91bmRSZXBlYXQ6IFwibm8tcmVwZWF0XCIsXG4gICAgICAgIFwiJjo6YmVmb3JlXCI6IHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IFwidXJsKFwiICsgYXJ0d29ya0JnICsgXCIpXCIsXG4gICAgICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgICAgICAgdG9wOiBcIi01JVwiLFxuICAgICAgICAgICAgbGVmdDogXCI1JVwiLFxuICAgICAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgb3ZlcmZsb3c6IFtcImhpZGRlblwiLCBcInZpc2libGVcIl0sXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFtcImNvbHVtblwiLCBcInJvd1wiXSxcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6IFtcImZsZXgtc3RhcnRcIiwgXCJzcGFjZS1ldmVubHlcIl0sXG4gICAgICAgIGFsaWduSXRlbXM6IFtcImNlbnRlclwiLCBcImZsZXgtZW5kXCJdLFxuICAgICAgICAvLyBwYWRkaW5nVG9wOiBbMTUwLCAwXSxcbiAgICAgICAgXCImOjphZnRlclwiOiB7XG4gICAgICAgICAgICB0cmFuc2Zvcm06IFtcInJvdGF0ZSg5MGRlZylcIiwgXCJub25lXCJdLFxuICAgICAgICAgICAgdG9wOiBbXCIwJVwiLCBcIjIwJVwiXSxcbiAgICAgICAgICAgIGxlZnQ6IFtcIi0xMCVcIl0sXG4gICAgICAgIH0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBCb3hXcmFwcGVyID0gc3R5bGVkKFwiZGl2XCIpKFxuICAgIHtcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgIGp1c3RpZnlDb250ZW50OiBcImZsZXgtZW5kXCIsXG4gICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIGhlaWdodDogW1wiYXV0b1wiLCA2ODBdLFxuICAgICAgICB3aWR0aDogW1wiMTAwJVwiLCBcImF1dG9cIl0sXG4gICAgICAgIFwiJjpudGgtY2hpbGQoMilcIjoge1xuICAgICAgICAgICAgbWFyZ2luTGVmdDogWzMwLCAwLCAzMF0sXG4gICAgICAgICAgICBtYXJnaW5SaWdodDogWzMwLCAwLCAzMF0sXG4gICAgICAgIH0sXG4gICAgICAgIFwiJjpsYXN0LWNoaWxkXCI6IHtcbiAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogWzQwLCAwXSxcbiAgICAgICAgfSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IEJveCA9IHN0eWxlZChcImRpdlwiKShcbiAgICB7XG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIGJveFNpemluZzogXCJib3JkZXItYm94XCIsXG4gICAgICAgIG1heFdpZHRoOiAzODAsXG4gICAgICAgIGJhY2tncm91bmQ6IHRoZW1lLmNvbG9yLndoaXRlLFxuICAgICAgICBib3hTaGFkb3c6IFwiMnB4IDNweCAxNXB4IHJnYmEoMTAwLCAxMDAsIDEwMCwgMC4yMzkyMTYpXCIsXG4gICAgICAgIGJvcmRlclJhZGl1czogMjAsXG4gICAgICAgIHBhZGRpbmc6IDMyLFxuICAgICAgICBjb2xvcjogdGhlbWUuY29sb3IuYmxhY2ssXG4gICAgICAgIFwiJiB1bFwiOiB7XG4gICAgICAgICAgICBsaXN0U3R5bGU6IFwibm9uZVwiLFxuICAgICAgICB9LFxuICAgICAgICBcIiYgbGlcIjoge1xuICAgICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJmbGV4LXN0YXJ0XCIsXG4gICAgICAgICAgICBtYXJnaW5Cb3R0b206IDE2LFxuICAgICAgICAgICAgZm9udFNpemU6IHRoZW1lLmZvbnRTaXplLm5hdk1lbnVJdGVtLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICB3aWR0aDogW1wiOTAlXCIsIDMyMCwgMzgwXSxcbiAgICAgICAgbWFyZ2luQm90dG9tOiBbMjAwLCAwXSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IFByb2R1Y3RUaXRsZSA9IHN0eWxlZChcImgzXCIpKHtcbiAgICBmb250U2l6ZTogMzAsXG4gICAgZm9udFdlaWdodDogdGhlbWUuZm9udFdlaWdodC5ib2xkLFxuICAgIGNvbG9yOiB0aGVtZS5jb2xvci5ibGFjayxcbiAgICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXG4gICAgcGFkZGluZ1RvcDogMCxcbiAgICBtYXJnaW5Ub3A6IDAsXG4gICAgbWFyZ2luQm90dG9tOiAyMCxcbn0pO1xuXG5jb25zdCBDaGVja01hcmtJbWcgPSBzdHlsZWQoXCJpbWdcIikoe1xuICAgIHdpZHRoOiAyNCxcbiAgICBoZWlnaHQ6IDI0LFxuICAgIG1hcmdpblJpZ2h0OiAxNixcbn0pO1xuXG5jb25zdCBEb3RJbWFnZSA9IHN0eWxlZChcImltZ1wiKSh7XG4gICAgd2lkdGg6IDI0LFxuICAgIGhlaWdodDogMjQsXG4gICAgbWFyZ2luUmlnaHQ6IDE2LFxufSk7XG5cbmNvbnN0IEZseWluZ01hbkltYWdlID0gc3R5bGVkKFwiaW1nXCIpKFxuICAgIHtcbiAgICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgICAgekluZGV4OiAxLFxuICAgICAgICBtYXhXaWR0aDogMjAwLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICB3aWR0aDogW1wiNTAlXCIsIFwiYXV0b1wiXSxcbiAgICAgICAgbWFyZ2luQm90dG9tOiBbMCwgLTIwXSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IFBsYW5lSW1hZ2UgPSBzdHlsZWQoXCJpbWdcIikoXG4gICAge1xuICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgICAgICB6SW5kZXg6IDEsXG4gICAgICAgIG1heFdpZHRoOiAxNzMsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIHdpZHRoOiBbXCI0MCVcIiwgXCJhdXRvXCJdLFxuICAgICAgICBtYXJnaW5Cb3R0b206IFstNCwgLTIwXSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IFJvY2tldEltYWdlID0gc3R5bGVkKFwiaW1nXCIpKFxuICAgIHtcbiAgICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgICAgekluZGV4OiAxLFxuICAgICAgICBtYXhXaWR0aDogMjAwLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICB3aWR0aDogW1wiNTAlXCIsIFwiYXV0b1wiXSxcbiAgICAgICAgbWFyZ2luQm90dG9tOiBbMCwgLTIwXSxcbiAgICB9KSxcbik7XG5cbmNsYXNzIFdoeUNob29zZVdlYmlueSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPHNlY3Rpb24gey4uLnRoaXMucHJvcHN9IGNsYXNzTmFtZT17d3JhcHBlckNsYXNzfT5cbiAgICAgICAgICAgICAgICA8Q29udGVudENvbnRhaW5lciBjbGFzc05hbWU9e2NvbnRlbnRDb250YWluZXJDbGFzc30+XG4gICAgICAgICAgICAgICAgICAgIDxUZXh0V3JhcHBlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUaXRsZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBXaHkgY2hvb3NlPFRpdGxlSGlnaGxpZ2h0PiBIb29sYSBBSTwvVGl0bGVIaWdobGlnaHQ+P1xuICAgICAgICAgICAgICAgICAgICAgICAgPC9UaXRsZT5cbiAgICAgICAgICAgICAgICAgICAgPC9UZXh0V3JhcHBlcj5cbiAgICAgICAgICAgICAgICAgICAgPENvbXBhcmlzb25XcmFwcGVyPlxuICAgICAgICAgICAgICAgICAgICAgICAgPEJveFdyYXBwZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEZseWluZ01hbkltYWdlIHNyYz17Zmx5aW5nTWFufSBhbHQ9XCJmbHlpbmcgbWFuXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Qm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UHJvZHVjdFRpdGxlPlNhYVMgQ01TPC9Qcm9kdWN0VGl0bGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q2hlY2tNYXJrSW1nIHNyYz17Y2hlY2tNYXJrfSBhbHQ9XCJjaGVjayBtYXJrXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBObyBuZWVkIHRvIG1hbmFnZSBpbmZyYXN0cnVjdHVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RG90SW1hZ2Ugc3JjPXt1bmNoZWNrTWFya30gYWx0PVwicG9pbnRcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVuYWJsZSB0byBjdXN0b21pc2UgdGhlIHByb2R1Y3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPERvdEltYWdlIHNyYz17dW5jaGVja01hcmt9IGFsdD1cInBvaW50XCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBZb3UgY2FuIG9ubHkgYnVpbGQgd2Vic2l0ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPERvdEltYWdlIHNyYz17dW5jaGVja01hcmt9IGFsdD1cInBvaW50XCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVc3VhbGx5IGEgYmxhY2stYm94XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxEb3RJbWFnZSBzcmM9e3VuY2hlY2tNYXJrfSBhbHQ9XCJwb2ludFwiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWW91IGRvbid0IG93biB5b3VyIGRhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0JveFdyYXBwZXI+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxCb3hXcmFwcGVyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxQbGFuZUltYWdlIHNyYz17cGxhbmV9IGFsdD1cInBsYW5lXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Qm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UHJvZHVjdFRpdGxlPk9wZW5Tb3VyY2UgQ01TPC9Qcm9kdWN0VGl0bGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q2hlY2tNYXJrSW1nIHNyYz17Y2hlY2tNYXJrfSBhbHQ9XCJjaGVjayBtYXJrXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBZb3UgY2FuIGN1c3RvbWlzZSB0aGUgcHJvZHVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q2hlY2tNYXJrSW1nIHNyYz17Y2hlY2tNYXJrfSBhbHQ9XCJjaGVjayBtYXJrXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCdWlsZCBtb3JlIHRoYW4gd2Vic2l0ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPERvdEltYWdlIHNyYz17dW5jaGVja01hcmt9IGFsdD1cInBvaW50XCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOZWVkIHRvIGhpcmUgcGVvcGxlIHRvIG1hbmFnZSBpbmZyYXN0cnVjdHVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RG90SW1hZ2Ugc3JjPXt1bmNoZWNrTWFya30gYWx0PVwicG9pbnRcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhpZ2ggdG90YWwgY29zdCBvZiBvd25lcnNoaXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPERvdEltYWdlIHNyYz17dW5jaGVja01hcmt9IGFsdD1cInBvaW50XCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOZWVkIHRvIG92ZXIgcHJvdmlzaW9uIGFuZCBvdmVyIHBheSBmb3IgaW5mcmFzdHJ1Y3R1cmUgdG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGUgcGVhayBkZW1hbmRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxEb3RJbWFnZSBzcmM9e3VuY2hlY2tNYXJrfSBhbHQ9XCJwb2ludFwiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV29ycnkgYWJvdXQgZmxhc2gtY3Jvd2RzLCBuZXR3b3JraW5nLCBvcmNoZXN0cmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1haW50ZW5hbmNlLCBhbmQgbW9yZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQm94V3JhcHBlcj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPEJveFdyYXBwZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFJvY2tldEltYWdlIHNyYz17cm9ja2V0fSBhbHQ9XCJyb2NrZXRcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCb3g+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxQcm9kdWN0VGl0bGU+SG9vbGEgQUk8L1Byb2R1Y3RUaXRsZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDaGVja01hcmtJbWcgc3JjPXtjaGVja01hcmt9IGFsdD1cImNoZWNrIG1hcmtcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNlcnZlcmxlc3MgbGV2ZWwgc2NhbGUsIGhhbmRsZSBhbnkgcGVhayBkZW1hbmQgcmlnaHQgb3V0IG9mXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGJveFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q2hlY2tNYXJrSW1nIHNyYz17Y2hlY2tNYXJrfSBhbHQ9XCJjaGVjayBtYXJrXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTYXZlIDYwJSBvbiBpbmZyYXN0cnVjdHVyZSBjb3N0IGNvbXBhcmVkIHRvIE9wZW5Tb3VyY2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPENoZWNrTWFya0ltZyBzcmM9e2NoZWNrTWFya30gYWx0PVwiY2hlY2sgbWFya1wiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRmFzdGVyIHRpbWUgdG8gbWFya2V0IGFzIHlvdSBkb24ndCBzcGVuZCB0aW1lIG9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJjaGl0ZWN0aW5nIGFuZCBvcmNoZXN0cmF0aW5nIGluZnJhc3RydWN0dXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDaGVja01hcmtJbWcgc3JjPXtjaGVja01hcmt9IGFsdD1cImNoZWNrIG1hcmtcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1aWxkIGFwcGxpY2F0aW9ucywgQVBJcywgbWljcm9zZXJ2aWNlcyBhbmQgd2Vic2l0ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPENoZWNrTWFya0ltZyBzcmM9e2NoZWNrTWFya30gYWx0PVwiY2hlY2sgbWFya1wiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGF5IHBlciByZXF1ZXN0IC0gbmV2ZXIgb3ZlcnBheSBmb3IgaW5mcmFzdHJ1Y3R1cmUgYWdhaW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPENoZWNrTWFya0ltZyBzcmM9e2NoZWNrTWFya30gYWx0PVwiY2hlY2sgbWFya1wiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTm8gdmVuZG9yIGxvY2staW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPENoZWNrTWFya0ltZyBzcmM9e2NoZWNrTWFya30gYWx0PVwiY2hlY2sgbWFya1wiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTG93ZXIgVENPIHdoZW4gY29tcGFyZWQgdG8gYm90aCBTYWFTIGFuZCBPcGVuU291cmNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDaGVja01hcmtJbWcgc3JjPXtjaGVja01hcmt9IGFsdD1cImNoZWNrIG1hcmtcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJ1bnMgb24gdGhlIGFyY2hpdGVjdHVyZSBvZiB0aGUgZnV0dXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Cb3hXcmFwcGVyPlxuICAgICAgICAgICAgICAgICAgICA8L0NvbXBhcmlzb25XcmFwcGVyPlxuICAgICAgICAgICAgICAgIDwvQ29udGVudENvbnRhaW5lcj5cbiAgICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFdoeUNob29zZVdlYmlueTtcbiJdfQ== */"),N=(0,c.default)("div",{target:"e1xkwhbg4",label:"BoxWrapper"})({display:"flex",flexDirection:"column",justifyContent:"flex-end",alignItems:"center"},(0,X.default)({height:["auto",680],width:["100%","auto"],"&:nth-child(2)":{marginLeft:[30,0,30],marginRight:[30,0,30]},"&:last-child":{marginBottom:[40,0]}}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),v=(0,c.default)("div",{target:"e1xkwhbg5",label:"Box"})({position:"relative",boxSizing:"border-box",maxWidth:380,background:G.default.color.white,boxShadow:"2px 3px 15px rgba(100, 100, 100, 0.239216)",borderRadius:20,padding:32,color:G.default.color.black,"& ul":{listStyle:"none"},"& li":{display:"flex",justifyContent:"flex-start",marginBottom:16,fontSize:G.default.fontSize.navMenuItem}},(0,X.default)({width:["90%",320,380],marginBottom:[200,0]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),y=(0,c.default)("h3",{target:"e1xkwhbg6",label:"ProductTitle"})({fontSize:30,fontWeight:G.default.fontWeight.bold,color:G.default.color.black,textAlign:"center",paddingTop:0,marginTop:0,marginBottom:20},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),n=(0,c.default)("img",{target:"e1xkwhbg7",label:"CheckMarkImg"})({width:24,height:24,marginRight:16},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),s=(0,c.default)("img",{target:"e1xkwhbg8",label:"DotImage"})({width:24,height:24,marginRight:16},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),R=(0,c.default)("img",{target:"e1xkwhbg9",label:"FlyingManImage"})({position:"relative",zIndex:1,maxWidth:200},(0,X.default)({width:["50%","auto"],marginBottom:[0,-20]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),L=(0,c.default)("img",{target:"e1xkwhbg10",label:"PlaneImage"})({position:"relative",zIndex:1,maxWidth:173},(0,X.default)({width:["40%","auto"],marginBottom:[-4,-20]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9iZXJuYXJkL1Byb2plY3RzL2hvb2xhL3NpdGUvc3JjL2NvbXBvbmVudHMvYWdlbmN5L3doeS1jaG9vc2Utd2ViaW55L3doeS1jaG9vc2Utd2ViaW55LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlNbUIiLCJmaWxlIjoiL1VzZXJzL2Jlcm5hcmQvUHJvamVjdHMvaG9vbGEvc2l0ZS9zcmMvY29tcG9uZW50cy9hZ2VuY3kvd2h5LWNob29zZS13ZWJpbnkvd2h5LWNob29zZS13ZWJpbnkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJyZWFjdC1lbW90aW9uXCI7XG5pbXBvcnQgdGhlbWUgZnJvbSBcIi4uLy4uL3V0aWxzL3RoZW1lXCI7XG5pbXBvcnQgbXEgZnJvbSBcIi4uLy4uL3V0aWxzL2JyZWFrcG9pbnRzXCI7XG5pbXBvcnQgeyBjc3MgfSBmcm9tIFwiZW1vdGlvblwiO1xuaW1wb3J0IENvbnRlbnRDb250YWluZXIgZnJvbSBcIi4uLy4uL3VpL2NvbnRlbnQtY29udGFpbmVyXCI7XG5cbmltcG9ydCB3ZWJpbnlCZyBmcm9tIFwiLi9hc3NldHMvd2ViaW55LWJnLnN2Z1wiO1xuaW1wb3J0IGFydHdvcmtCZyBmcm9tIFwiLi9hc3NldHMvYXJ0d29yay1iZy5zdmdcIjtcbmltcG9ydCBwdXJwbGVCZyBmcm9tIFwiLi9hc3NldHMvcHVycGxlLWJnLnN2Z1wiO1xuaW1wb3J0IGdyYXlCZyBmcm9tIFwiLi9hc3NldHMvZ3JheS1iZy5zdmdcIjtcbmltcG9ydCBjaGVja01hcmsgZnJvbSBcIi4vYXNzZXRzL2NoZWNrX2NpcmNsZV9vdXRsaW5lLTI0cHguc3ZnXCI7XG5pbXBvcnQgdW5jaGVja01hcmsgZnJvbSBcIi4vYXNzZXRzL2hpZ2hsaWdodF9vZmYtMjRweC5zdmdcIjtcbmltcG9ydCBmbHlpbmdNYW4gZnJvbSBcIi4vYXNzZXRzL2ZseS1tYW4uc3ZnXCI7XG5pbXBvcnQgcGxhbmUgZnJvbSBcIi4vYXNzZXRzL3BsYW5lLnN2Z1wiO1xuaW1wb3J0IHJvY2tldCBmcm9tIFwiLi9hc3NldHMvcm9ja2V0LnN2Z1wiO1xuXG5jb25zdCB3cmFwcGVyQ2xhc3MgPSBjc3MoXG4gICAge1xuICAgICAgICB0b3A6IDAsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIHpJbmRleDogMCxcbiAgICAgICAgYmFja2dyb3VuZFJlcGVhdDogXCJuby1yZXBlYXRcIixcbiAgICAgICAgYmFja2dyb3VuZEltYWdlOiBcInVybChcIiArIGdyYXlCZyArIFwiKVwiLFxuICAgICAgICBcIkBtZWRpYSAobWluLXdpZHRoOiAxOTIwcHgpXCI6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRQb3NpdGlvbjogXCIwIDI3MHB4ICFpbXBvcnRhbnRcIixcbiAgICAgICAgfSxcbiAgICAgICAgYmFja2dyb3VuZFNpemU6IFwiY292ZXJcIixcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgcGFkZGluZ1RvcDogWzQwLCAxMDBdLFxuICAgICAgICBwYWRkaW5nQm90dG9tOiBbNDAsIDEwMF0sXG4gICAgICAgIGJhY2tncm91bmRQb3NpdGlvbjogW1wiY2VudGVyXCIsIFwiYm90dG9tXCJdLFxuICAgIH0pLFxuKTtcblxuY29uc3QgY29udGVudENvbnRhaW5lckNsYXNzID0gY3NzKFxuICAgIHtcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgIG1heFdpZHRoOiAxMjAwLFxuICAgICAgICBib3hTaXppbmc6IFwiYm9yZGVyLWJveFwiLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICB3aWR0aDogW1wiMTAwJVwiLCBcIjEwMCVcIl0sXG4gICAgICAgIGhlaWdodDogW1wiMTAwJVwiLCBcImF1dG9cIl0sXG4gICAgICAgIHBhZGRpbmc6IFswLCBcIjBweCAxNnB4XCIsIDBdLFxuICAgIH0pLFxuKTtcblxuY29uc3QgVGV4dFdyYXBwZXIgPSBzdHlsZWQoXCJkaXZcIikoXG4gICAge1xuICAgICAgICBtYXhXaWR0aDogNjM0LFxuICAgICAgICBtYXJnaW46IFwiMCBhdXRvXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICBtYXJnaW5Cb3R0b206IFs0MCwgODAsIDYwXSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IFRpdGxlID0gc3R5bGVkKFwiaDJcIikoe1xuICAgIGZvbnRTaXplOiA0OCxcbiAgICBmb250V2VpZ2h0OiB0aGVtZS5mb250V2VpZ2h0LmJvbGQsXG4gICAgY29sb3I6IHRoZW1lLmNvbG9yLmJsYWNrLFxuICAgIHRleHRBbGlnbjogXCJjZW50ZXJcIixcbiAgICBwYWRkaW5nVG9wOiAwLFxuICAgIG1hcmdpblRvcDogMCxcbiAgICBtYXJnaW5Cb3R0b206IDEyLFxufSk7XG5cbmNvbnN0IFRpdGxlSGlnaGxpZ2h0ID0gc3R5bGVkKFwic3BhblwiKSh7XG4gICAgYmFja2dyb3VuZEltYWdlOiBcInVybChcIiArIHdlYmlueUJnICsgXCIpXCIsXG4gICAgYmFja2dyb3VuZFBvc2l0aW9uWDogXCJyaWdodFwiLFxuICAgIGJhY2tncm91bmRQb3NpdGlvblk6IFwiYm90dG9tXCIsXG4gICAgYmFja2dyb3VuZFJlcGVhdDogXCJuby1yZXBlYXRcIixcbn0pO1xuXG5jb25zdCBDb21wYXJpc29uV3JhcHBlciA9IHN0eWxlZChcImRpdlwiKShcbiAgICB7XG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGJhY2tncm91bmRJbWFnZTogXCJ1cmwoXCIgKyBwdXJwbGVCZyArIFwiKVwiLFxuICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogXCJjb3ZlclwiLFxuICAgICAgICBiYWNrZ3JvdW5kUG9zaXRpb246IFwiY2VudGVyXCIsXG4gICAgICAgIGJhY2tncm91bmRSZXBlYXQ6IFwibm8tcmVwZWF0XCIsXG4gICAgICAgIFwiJjo6YmVmb3JlXCI6IHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IFwidXJsKFwiICsgYXJ0d29ya0JnICsgXCIpXCIsXG4gICAgICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgICAgICAgdG9wOiBcIi01JVwiLFxuICAgICAgICAgICAgbGVmdDogXCI1JVwiLFxuICAgICAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgb3ZlcmZsb3c6IFtcImhpZGRlblwiLCBcInZpc2libGVcIl0sXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFtcImNvbHVtblwiLCBcInJvd1wiXSxcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6IFtcImZsZXgtc3RhcnRcIiwgXCJzcGFjZS1ldmVubHlcIl0sXG4gICAgICAgIGFsaWduSXRlbXM6IFtcImNlbnRlclwiLCBcImZsZXgtZW5kXCJdLFxuICAgICAgICAvLyBwYWRkaW5nVG9wOiBbMTUwLCAwXSxcbiAgICAgICAgXCImOjphZnRlclwiOiB7XG4gICAgICAgICAgICB0cmFuc2Zvcm06IFtcInJvdGF0ZSg5MGRlZylcIiwgXCJub25lXCJdLFxuICAgICAgICAgICAgdG9wOiBbXCIwJVwiLCBcIjIwJVwiXSxcbiAgICAgICAgICAgIGxlZnQ6IFtcIi0xMCVcIl0sXG4gICAgICAgIH0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBCb3hXcmFwcGVyID0gc3R5bGVkKFwiZGl2XCIpKFxuICAgIHtcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgIGp1c3RpZnlDb250ZW50OiBcImZsZXgtZW5kXCIsXG4gICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIGhlaWdodDogW1wiYXV0b1wiLCA2ODBdLFxuICAgICAgICB3aWR0aDogW1wiMTAwJVwiLCBcImF1dG9cIl0sXG4gICAgICAgIFwiJjpudGgtY2hpbGQoMilcIjoge1xuICAgICAgICAgICAgbWFyZ2luTGVmdDogWzMwLCAwLCAzMF0sXG4gICAgICAgICAgICBtYXJnaW5SaWdodDogWzMwLCAwLCAzMF0sXG4gICAgICAgIH0sXG4gICAgICAgIFwiJjpsYXN0LWNoaWxkXCI6IHtcbiAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogWzQwLCAwXSxcbiAgICAgICAgfSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IEJveCA9IHN0eWxlZChcImRpdlwiKShcbiAgICB7XG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIGJveFNpemluZzogXCJib3JkZXItYm94XCIsXG4gICAgICAgIG1heFdpZHRoOiAzODAsXG4gICAgICAgIGJhY2tncm91bmQ6IHRoZW1lLmNvbG9yLndoaXRlLFxuICAgICAgICBib3hTaGFkb3c6IFwiMnB4IDNweCAxNXB4IHJnYmEoMTAwLCAxMDAsIDEwMCwgMC4yMzkyMTYpXCIsXG4gICAgICAgIGJvcmRlclJhZGl1czogMjAsXG4gICAgICAgIHBhZGRpbmc6IDMyLFxuICAgICAgICBjb2xvcjogdGhlbWUuY29sb3IuYmxhY2ssXG4gICAgICAgIFwiJiB1bFwiOiB7XG4gICAgICAgICAgICBsaXN0U3R5bGU6IFwibm9uZVwiLFxuICAgICAgICB9LFxuICAgICAgICBcIiYgbGlcIjoge1xuICAgICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJmbGV4LXN0YXJ0XCIsXG4gICAgICAgICAgICBtYXJnaW5Cb3R0b206IDE2LFxuICAgICAgICAgICAgZm9udFNpemU6IHRoZW1lLmZvbnRTaXplLm5hdk1lbnVJdGVtLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICB3aWR0aDogW1wiOTAlXCIsIDMyMCwgMzgwXSxcbiAgICAgICAgbWFyZ2luQm90dG9tOiBbMjAwLCAwXSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IFByb2R1Y3RUaXRsZSA9IHN0eWxlZChcImgzXCIpKHtcbiAgICBmb250U2l6ZTogMzAsXG4gICAgZm9udFdlaWdodDogdGhlbWUuZm9udFdlaWdodC5ib2xkLFxuICAgIGNvbG9yOiB0aGVtZS5jb2xvci5ibGFjayxcbiAgICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXG4gICAgcGFkZGluZ1RvcDogMCxcbiAgICBtYXJnaW5Ub3A6IDAsXG4gICAgbWFyZ2luQm90dG9tOiAyMCxcbn0pO1xuXG5jb25zdCBDaGVja01hcmtJbWcgPSBzdHlsZWQoXCJpbWdcIikoe1xuICAgIHdpZHRoOiAyNCxcbiAgICBoZWlnaHQ6IDI0LFxuICAgIG1hcmdpblJpZ2h0OiAxNixcbn0pO1xuXG5jb25zdCBEb3RJbWFnZSA9IHN0eWxlZChcImltZ1wiKSh7XG4gICAgd2lkdGg6IDI0LFxuICAgIGhlaWdodDogMjQsXG4gICAgbWFyZ2luUmlnaHQ6IDE2LFxufSk7XG5cbmNvbnN0IEZseWluZ01hbkltYWdlID0gc3R5bGVkKFwiaW1nXCIpKFxuICAgIHtcbiAgICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgICAgekluZGV4OiAxLFxuICAgICAgICBtYXhXaWR0aDogMjAwLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICB3aWR0aDogW1wiNTAlXCIsIFwiYXV0b1wiXSxcbiAgICAgICAgbWFyZ2luQm90dG9tOiBbMCwgLTIwXSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IFBsYW5lSW1hZ2UgPSBzdHlsZWQoXCJpbWdcIikoXG4gICAge1xuICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgICAgICB6SW5kZXg6IDEsXG4gICAgICAgIG1heFdpZHRoOiAxNzMsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIHdpZHRoOiBbXCI0MCVcIiwgXCJhdXRvXCJdLFxuICAgICAgICBtYXJnaW5Cb3R0b206IFstNCwgLTIwXSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IFJvY2tldEltYWdlID0gc3R5bGVkKFwiaW1nXCIpKFxuICAgIHtcbiAgICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgICAgekluZGV4OiAxLFxuICAgICAgICBtYXhXaWR0aDogMjAwLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICB3aWR0aDogW1wiNTAlXCIsIFwiYXV0b1wiXSxcbiAgICAgICAgbWFyZ2luQm90dG9tOiBbMCwgLTIwXSxcbiAgICB9KSxcbik7XG5cbmNsYXNzIFdoeUNob29zZVdlYmlueSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPHNlY3Rpb24gey4uLnRoaXMucHJvcHN9IGNsYXNzTmFtZT17d3JhcHBlckNsYXNzfT5cbiAgICAgICAgICAgICAgICA8Q29udGVudENvbnRhaW5lciBjbGFzc05hbWU9e2NvbnRlbnRDb250YWluZXJDbGFzc30+XG4gICAgICAgICAgICAgICAgICAgIDxUZXh0V3JhcHBlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUaXRsZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBXaHkgY2hvb3NlPFRpdGxlSGlnaGxpZ2h0PiBIb29sYSBBSTwvVGl0bGVIaWdobGlnaHQ+P1xuICAgICAgICAgICAgICAgICAgICAgICAgPC9UaXRsZT5cbiAgICAgICAgICAgICAgICAgICAgPC9UZXh0V3JhcHBlcj5cbiAgICAgICAgICAgICAgICAgICAgPENvbXBhcmlzb25XcmFwcGVyPlxuICAgICAgICAgICAgICAgICAgICAgICAgPEJveFdyYXBwZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEZseWluZ01hbkltYWdlIHNyYz17Zmx5aW5nTWFufSBhbHQ9XCJmbHlpbmcgbWFuXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Qm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UHJvZHVjdFRpdGxlPlNhYVMgQ01TPC9Qcm9kdWN0VGl0bGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q2hlY2tNYXJrSW1nIHNyYz17Y2hlY2tNYXJrfSBhbHQ9XCJjaGVjayBtYXJrXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBObyBuZWVkIHRvIG1hbmFnZSBpbmZyYXN0cnVjdHVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RG90SW1hZ2Ugc3JjPXt1bmNoZWNrTWFya30gYWx0PVwicG9pbnRcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVuYWJsZSB0byBjdXN0b21pc2UgdGhlIHByb2R1Y3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPERvdEltYWdlIHNyYz17dW5jaGVja01hcmt9IGFsdD1cInBvaW50XCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBZb3UgY2FuIG9ubHkgYnVpbGQgd2Vic2l0ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPERvdEltYWdlIHNyYz17dW5jaGVja01hcmt9IGFsdD1cInBvaW50XCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVc3VhbGx5IGEgYmxhY2stYm94XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxEb3RJbWFnZSBzcmM9e3VuY2hlY2tNYXJrfSBhbHQ9XCJwb2ludFwiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWW91IGRvbid0IG93biB5b3VyIGRhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0JveFdyYXBwZXI+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxCb3hXcmFwcGVyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxQbGFuZUltYWdlIHNyYz17cGxhbmV9IGFsdD1cInBsYW5lXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Qm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UHJvZHVjdFRpdGxlPk9wZW5Tb3VyY2UgQ01TPC9Qcm9kdWN0VGl0bGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q2hlY2tNYXJrSW1nIHNyYz17Y2hlY2tNYXJrfSBhbHQ9XCJjaGVjayBtYXJrXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBZb3UgY2FuIGN1c3RvbWlzZSB0aGUgcHJvZHVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q2hlY2tNYXJrSW1nIHNyYz17Y2hlY2tNYXJrfSBhbHQ9XCJjaGVjayBtYXJrXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCdWlsZCBtb3JlIHRoYW4gd2Vic2l0ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPERvdEltYWdlIHNyYz17dW5jaGVja01hcmt9IGFsdD1cInBvaW50XCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOZWVkIHRvIGhpcmUgcGVvcGxlIHRvIG1hbmFnZSBpbmZyYXN0cnVjdHVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RG90SW1hZ2Ugc3JjPXt1bmNoZWNrTWFya30gYWx0PVwicG9pbnRcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhpZ2ggdG90YWwgY29zdCBvZiBvd25lcnNoaXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPERvdEltYWdlIHNyYz17dW5jaGVja01hcmt9IGFsdD1cInBvaW50XCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOZWVkIHRvIG92ZXIgcHJvdmlzaW9uIGFuZCBvdmVyIHBheSBmb3IgaW5mcmFzdHJ1Y3R1cmUgdG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGUgcGVhayBkZW1hbmRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxEb3RJbWFnZSBzcmM9e3VuY2hlY2tNYXJrfSBhbHQ9XCJwb2ludFwiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV29ycnkgYWJvdXQgZmxhc2gtY3Jvd2RzLCBuZXR3b3JraW5nLCBvcmNoZXN0cmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1haW50ZW5hbmNlLCBhbmQgbW9yZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQm94V3JhcHBlcj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPEJveFdyYXBwZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFJvY2tldEltYWdlIHNyYz17cm9ja2V0fSBhbHQ9XCJyb2NrZXRcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCb3g+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxQcm9kdWN0VGl0bGU+SG9vbGEgQUk8L1Byb2R1Y3RUaXRsZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDaGVja01hcmtJbWcgc3JjPXtjaGVja01hcmt9IGFsdD1cImNoZWNrIG1hcmtcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNlcnZlcmxlc3MgbGV2ZWwgc2NhbGUsIGhhbmRsZSBhbnkgcGVhayBkZW1hbmQgcmlnaHQgb3V0IG9mXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGJveFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q2hlY2tNYXJrSW1nIHNyYz17Y2hlY2tNYXJrfSBhbHQ9XCJjaGVjayBtYXJrXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTYXZlIDYwJSBvbiBpbmZyYXN0cnVjdHVyZSBjb3N0IGNvbXBhcmVkIHRvIE9wZW5Tb3VyY2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPENoZWNrTWFya0ltZyBzcmM9e2NoZWNrTWFya30gYWx0PVwiY2hlY2sgbWFya1wiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRmFzdGVyIHRpbWUgdG8gbWFya2V0IGFzIHlvdSBkb24ndCBzcGVuZCB0aW1lIG9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJjaGl0ZWN0aW5nIGFuZCBvcmNoZXN0cmF0aW5nIGluZnJhc3RydWN0dXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDaGVja01hcmtJbWcgc3JjPXtjaGVja01hcmt9IGFsdD1cImNoZWNrIG1hcmtcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1aWxkIGFwcGxpY2F0aW9ucywgQVBJcywgbWljcm9zZXJ2aWNlcyBhbmQgd2Vic2l0ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPENoZWNrTWFya0ltZyBzcmM9e2NoZWNrTWFya30gYWx0PVwiY2hlY2sgbWFya1wiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGF5IHBlciByZXF1ZXN0IC0gbmV2ZXIgb3ZlcnBheSBmb3IgaW5mcmFzdHJ1Y3R1cmUgYWdhaW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPENoZWNrTWFya0ltZyBzcmM9e2NoZWNrTWFya30gYWx0PVwiY2hlY2sgbWFya1wiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTm8gdmVuZG9yIGxvY2staW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPENoZWNrTWFya0ltZyBzcmM9e2NoZWNrTWFya30gYWx0PVwiY2hlY2sgbWFya1wiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTG93ZXIgVENPIHdoZW4gY29tcGFyZWQgdG8gYm90aCBTYWFTIGFuZCBPcGVuU291cmNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDaGVja01hcmtJbWcgc3JjPXtjaGVja01hcmt9IGFsdD1cImNoZWNrIG1hcmtcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJ1bnMgb24gdGhlIGFyY2hpdGVjdHVyZSBvZiB0aGUgZnV0dXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Cb3hXcmFwcGVyPlxuICAgICAgICAgICAgICAgICAgICA8L0NvbXBhcmlzb25XcmFwcGVyPlxuICAgICAgICAgICAgICAgIDwvQ29udGVudENvbnRhaW5lcj5cbiAgICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFdoeUNob29zZVdlYmlueTtcbiJdfQ== */"),o=(0,c.default)("img",{target:"e1xkwhbg11",label:"RocketImage"})({position:"relative",zIndex:1,maxWidth:200},(0,X.default)({width:["50%","auto"],marginBottom:[0,-20]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");class p extends b.default.Component{render(){return b.default.createElement("section",Object.assign({},this.props,{className:Y}),b.default.createElement(i.default,{className:V},b.default.createElement(w,null,b.default.createElement(J,null,"Why choose",b.default.createElement(h,null," Hoola AI"),"?")),b.default.createElement(t,null,b.default.createElement(N,null,b.default.createElement(R,{src:u.default,alt:"flying man"}),b.default.createElement(v,null,b.default.createElement(y,null,"SaaS CMS"),b.default.createElement("ul",null,b.default.createElement("li",null,b.default.createElement(n,{src:x.default,alt:"check mark"}),"No need to manage infrastructure"),b.default.createElement("li",null,b.default.createElement(s,{src:B.default,alt:"point"}),"Unable to customise the product"),b.default.createElement("li",null,b.default.createElement(s,{src:B.default,alt:"point"}),"You can only build websites"),b.default.createElement("li",null,b.default.createElement(s,{src:B.default,alt:"point"}),"Usually a black-box"),b.default.createElement("li",null,b.default.createElement(s,{src:B.default,alt:"point"}),"You don't own your data")))),b.default.createElement(N,null,b.default.createElement(L,{src:F.default,alt:"plane"}),b.default.createElement(v,null,b.default.createElement(y,null,"OpenSource CMS"),b.default.createElement("ul",null,b.default.createElement("li",null,b.default.createElement(n,{src:x.default,alt:"check mark"}),"You can customise the product"),b.default.createElement("li",null,b.default.createElement(n,{src:x.default,alt:"check mark"}),"Build more than websites"),b.default.createElement("li",null,b.default.createElement(s,{src:B.default,alt:"point"}),"Need to hire people to manage infrastructure"),b.default.createElement("li",null,b.default.createElement(s,{src:B.default,alt:"point"}),"High total cost of ownership"),b.default.createElement("li",null,b.default.createElement(s,{src:B.default,alt:"point"}),"Need to over provision and over pay for infrastructure to handle peak demands"),b.default.createElement("li",null,b.default.createElement(s,{src:B.default,alt:"point"}),"Worry about flash-crowds, networking, orchestration, maintenance, and more")))),b.default.createElement(N,null,b.default.createElement(o,{src:a.default,alt:"rocket"}),b.default.createElement(v,null,b.default.createElement(y,null,"Hoola AI"),b.default.createElement("ul",null,b.default.createElement("li",null,b.default.createElement(n,{src:x.default,alt:"check mark"}),"Serverless level scale, handle any peak demand right out of the box"),b.default.createElement("li",null,b.default.createElement(n,{src:x.default,alt:"check mark"}),"Save 60% on infrastructure cost compared to OpenSource"),b.default.createElement("li",null,b.default.createElement(n,{src:x.default,alt:"check mark"}),"Faster time to market as you don't spend time on architecting and orchestrating infrastructure"),b.default.createElement("li",null,b.default.createElement(n,{src:x.default,alt:"check mark"}),"Build applications, APIs, microservices and websites"),b.default.createElement("li",null,b.default.createElement(n,{src:x.default,alt:"check mark"}),"Pay per request - never overpay for infrastructure again"),b.default.createElement("li",null,b.default.createElement(n,{src:x.default,alt:"check mark"}),"No vendor lock-in"),b.default.createElement("li",null,b.default.createElement(n,{src:x.default,alt:"check mark"}),"Lower TCO when compared to both SaaS and OpenSource"),b.default.createElement("li",null,b.default.createElement(n,{src:x.default,alt:"check mark"}),"Runs on the architecture of the future")))))))}}g.default=p}}]);
//# sourceMappingURL=9cac4838-72927e78956a62fe6cf0.js.map