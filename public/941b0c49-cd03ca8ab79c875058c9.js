(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{QdP5:function(I,C,g){"use strict";var c=g("TqRt");C.__esModule=!0,C.ToolTipText=C.ToolTip=C.Title=C.SubTitle=C.RequestLink=C.OrangeText=C.LinesImageMobile=C.LinesImageDesktop=C.ImageArrow=C.HeroSection=C.HeroContainer=C.CodeFieldText=C.CodeFieldBorder=C.CodeField=C.ButtonPrimary=C.Bold=C.AdvantagesContainerMobile=C.AdvantagesContainer=C.AdvantageTileTitle=C.AdvantageTileStyle=C.AdvantageTileImage=void 0;var X=c(g("VIIK")),i=c(g("0uQq")),A=c(g("TcUF")),b=c(g("RSl4"));C.HeroSection=(0,X.default)("section",{target:"eqjnlx10",label:"HeroSection"})({backgroundColor:"#fff",backgroundRepeat:"no-repeat",overflow:"hidden",backgroundImage:"url("+b.default+")"},(0,i.default)({backgroundSize:["1440px 100%","cover","cover"],backgroundPosition:["bottom -67px right 50%;","bottom","bottom"],paddingTop:["40px","90px","100px"],paddingBottom:["40px","90px","100"]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),C.ButtonPrimary=(0,X.default)(A.default,{target:"eqjnlx11",label:"ButtonPrimary"})({width:"100%","@media (max-width: 405px)":{transform:"scale(0.9)"}},(0,i.default)({maxWidth:["391px","211px","211px"],marginTop:["51px","39px","43px"]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),C.HeroContainer=(0,X.default)("div",{target:"eqjnlx12",label:"HeroContainer"})({display:"flex",flexDirection:"column",alignItems:"center",margin:"0 auto"},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9iZXJuYXJkL1Byb2plY3RzL2hvb2xhL3NpdGUvc3JjL2NvbXBvbmVudHMvbmV3LWhvbWVwYWdlL2hlcm8tc2VjdGlvbi9oZXJvLnN0eWxlZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpQzZCIiwiZmlsZSI6Ii9Vc2Vycy9iZXJuYXJkL1Byb2plY3RzL2hvb2xhL3NpdGUvc3JjL2NvbXBvbmVudHMvbmV3LWhvbWVwYWdlL2hlcm8tc2VjdGlvbi9oZXJvLnN0eWxlZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHlsZWQgZnJvbSBcInJlYWN0LWVtb3Rpb25cIjtcbmltcG9ydCBtcSBmcm9tIFwiLi4vLi4vdXRpbHMvYnJlYWtwb2ludHNcIjtcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uLy4uL3VpL2J1dHRvblwiO1xuXG5pbXBvcnQgYmFja2dyb3VuZEltZyBmcm9tIFwiLi4vLi4vLi4vYXNzZXRzL25ldy1ob21lcGFnZS9oZXJvL2hvbWUtaGVyby1iZy5zdmdcIjtcblxuZXhwb3J0IGNvbnN0IEhlcm9TZWN0aW9uID0gc3R5bGVkKFwic2VjdGlvblwiKShcbiAgICB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogXCIjZmZmXCIsXG4gICAgICAgIGJhY2tncm91bmRSZXBlYXQ6IFwibm8tcmVwZWF0XCIsXG4gICAgICAgIG92ZXJmbG93OiBcImhpZGRlblwiLFxuICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IFwidXJsKFwiICsgYmFja2dyb3VuZEltZyArIFwiKVwiLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogW1wiMTQ0MHB4IDEwMCVcIiwgXCJjb3ZlclwiLCBcImNvdmVyXCJdLFxuICAgICAgICBiYWNrZ3JvdW5kUG9zaXRpb246IFtcImJvdHRvbSAtNjdweCByaWdodCA1MCU7XCIsIFwiYm90dG9tXCIsIFwiYm90dG9tXCJdLFxuICAgICAgICBwYWRkaW5nVG9wOiBbXCI0MHB4XCIsIFwiOTBweFwiLCBcIjEwMHB4XCJdLFxuICAgICAgICBwYWRkaW5nQm90dG9tOiBbXCI0MHB4XCIsIFwiOTBweFwiLCBcIjEwMFwiXSxcbiAgICB9KSxcbik7XG5leHBvcnQgY29uc3QgQnV0dG9uUHJpbWFyeSA9IHN0eWxlZChCdXR0b24pKFxuICAgIHtcbiAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICBcIkBtZWRpYSAobWF4LXdpZHRoOiA0MDVweClcIjoge1xuICAgICAgICAgICAgdHJhbnNmb3JtOiBcInNjYWxlKDAuOSlcIixcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgbWF4V2lkdGg6IFtcIjM5MXB4XCIsIFwiMjExcHhcIiwgXCIyMTFweFwiXSxcbiAgICAgICAgbWFyZ2luVG9wOiBbXCI1MXB4XCIsIFwiMzlweFwiLCBcIjQzcHhcIl0sXG4gICAgfSksXG4pO1xuXG5leHBvcnQgY29uc3QgSGVyb0NvbnRhaW5lciA9IHN0eWxlZChcImRpdlwiKSh7XG4gICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgIG1hcmdpbjogXCIwIGF1dG9cIixcbn0pO1xuZXhwb3J0IGNvbnN0IFJlcXVlc3RMaW5rID0gc3R5bGVkKFwiYVwiKSh7XG4gICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICBtYXJnaW5Ub3A6IFwiMTFweFwiLFxuICAgIGJvcmRlcjogXCJub25lXCIsXG4gICAgZm9udEZhbWlseTogXCJTb3VyY2UgU2FucyBQcm9cIixcbiAgICBmb250V2VpZ2h0OiBcImJvbGRcIixcbiAgICBmb250U2l6ZTogXCIxOHB4XCIsXG4gICAgbGV0dGVyU3BhY2luZzogXCIuMDAxZW1cIixcbiAgICBjb2xvcjogXCIjMDAwXCIsXG4gICAgdHJhbnNpdGlvbjogXCIxMDBtcyBhbGxcIixcbiAgICBcIiY6aG92ZXJcIjoge1xuICAgICAgICB0ZXh0RGVjb3JhdGlvbjogXCJ1bmRlcmxpbmVcIixcbiAgICAgICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZVkoLTFweClcIixcbiAgICB9LFxufSk7XG5cbmV4cG9ydCBjb25zdCBJbWFnZUFycm93ID0gc3R5bGVkKFwiaW1nXCIpKHtcbiAgICBtYXJnaW5MZWZ0OiBcIjZweFwiLFxuICAgIG1hcmdpblRvcDogXCIycHhcIixcbn0pO1xuXG5leHBvcnQgY29uc3QgVGl0bGUgPSBzdHlsZWQoXCJoMlwiKShcbiAgICB7XG4gICAgICAgIG1heFdpZHRoOiA4MDAsXG4gICAgICAgIGZvbnRXZWlnaHQ6IDcwMCxcbiAgICAgICAgY29sb3I6IFwiIzAwMFwiLFxuICAgICAgICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIGxpbmVIZWlnaHQ6IFtcIjQ1cHhcIiwgXCI1NXB4XCIsIFwiNjVweFwiXSxcbiAgICAgICAgcGFkZGluZzogW1wiMHB4IDE2cHhcIiwgXCIwcHggMHB4XCIsIFwiMHB4IDBweFwiXSxcbiAgICAgICAgZm9udFNpemU6IFtcIjM2cHhcIiwgXCI0NnB4XCIsIFwiNTZweFwiXSxcbiAgICAgICAgbWFyZ2luVG9wOiBbXCI0MHB4XCIsIFwiNDBweFwiLCBcIjQ1cHhcIl0sXG4gICAgfSksXG4pO1xuXG5leHBvcnQgY29uc3QgU3ViVGl0bGUgPSBzdHlsZWQoXCJoM1wiKShcbiAgICB7XG4gICAgICAgIGZvbnRXZWlnaHQ6IDQwMCxcbiAgICAgICAgbGV0dGVyU3BhY2luZzogXCIuMDAyZW1cIixcbiAgICAgICAgdGV4dEFsaWduOiBcImNlbnRlclwiLFxuICAgICAgICBjb2xvcjogXCIjMDAwXCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIHBhZGRpbmc6IFtcIjBweCAyMHB4XCIsIFwiMHB4IDIwcHhcIiwgXCIwcHggMHB4XCJdLFxuICAgICAgICBmb250U2l6ZTogW1wiMThweFwiLCBcIjIwcHhcIiwgXCIyNHB4XCJdLFxuICAgICAgICBtYXJnaW5Cb3R0b206IFtcIjI0cHhcIiwgXCIzMHB4XCIsIFwiMzlweFwiXSxcbiAgICAgICAgbWFyZ2luVG9wOiBbXCIzcHhcIiwgXCI5cHhcIiwgXCIwcHhcIl0sXG4gICAgICAgIG1heFdpZHRoOiBbXCI4MDBweFwiLCBcIjk1MHB4XCIsIFwiOTUwcHhcIl0sXG4gICAgICAgIGxpbmVIZWlnaHQ6IFtcIjI4cHhcIiwgXCIzMHB4XCIsIFwiMzRweFwiXSxcbiAgICB9KSxcbik7XG5leHBvcnQgY29uc3QgQm9sZCA9IHN0eWxlZChcInN0cm9uZ1wiKSh7XG4gICAgZm9udFdlaWdodDogXCJib2xkXCIsXG4gICAgYmFja2dyb3VuZDogXCIjZmVlMGNjXCIsXG59KTtcblxuZXhwb3J0IGNvbnN0IENvZGVGaWVsZCA9IHN0eWxlZChcImRpdlwiKShcbiAgICB7XG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJzcGFjZS1iZXR3ZWVuXCIsXG4gICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogXCIjMTUwQjI3IFwiLFxuICAgICAgICBjb2xvcjogXCIjZmZmXCIsXG4gICAgICAgIGJvcmRlclJhZGl1czogXCIxMHB4XCIsXG4gICAgICAgIGJ1dHRvbjoge1xuICAgICAgICAgICAgYmFja2dyb3VuZDogXCJ0cmFuc3BhcmVudFwiLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICB3aWR0aDogW1wiMzYwcHhcIiwgXCI1MTVweFwiLCBcIjUxNXB4XCJdLFxuICAgICAgICBwYWRkaW5nOiBbXCIxNHB4IDEwcHggMTZweCAxMXB4XCIsIFwiMTNweCAxNXB4IDEycHggMjRweFwiLCBcIjEzcHggMTVweCAxMnB4IDI0cHhcIl0sXG4gICAgfSksXG4pO1xuXG5leHBvcnQgY29uc3QgVG9vbFRpcFRleHQgPSBzdHlsZWQuZGl2KFxuICAgIHtcbiAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZVkoLTUwJSlcIixcbiAgICAgICAgbWFyZ2luTGVmdDogXCItMjBweFwiLFxuICAgICAgICB3aGl0ZVNwYWNlOiBcIm5vcm1hbFwiLFxuICAgICAgICBib3JkZXJSYWRpdXM6IFwiNXB4XCIsXG4gICAgICAgIGJhY2tncm91bmQ6IFwiIzI5MmQzZVwiLFxuICAgICAgICBjb2xvcjogXCIjZmZmXCIsXG4gICAgICAgIHRleHRBbGlnbjogXCJjZW50ZXJcIixcbiAgICAgICAgdG9wOiBcIjBweFwiLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICBmb250U2l6ZTogW1wiMTBweFwiLCBcIjE0cHhcIiwgXCIxNHB4XCJdLFxuICAgICAgICByaWdodDogW1wiLThweFwiLCBcIi01cHhcIiwgXCItNXB4XCJdLFxuICAgICAgICBwYWRkaW5nOiBbXCI0cHggOHB4XCIsIFwiNXB4IDEwcHhcIiwgXCI1cHggMTBweFwiXSxcbiAgICB9KSxcbik7XG5leHBvcnQgY29uc3QgVG9vbFRpcCA9IHN0eWxlZC5kaXYoe1xuICAgIHpJbmRleDogXCIyXCIsXG4gICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICBjdXJzb3I6IFwicG9pbnRlclwiLFxuICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgXCImPiBpbWdcIjoge1xuICAgICAgICB6SW5kZXg6IFwiLTJcIixcbiAgICB9LFxuICAgIFwiJi5zdGlreS10b29sdGlwXCI6IHtcbiAgICAgICAgW1Rvb2xUaXBUZXh0XToge1xuICAgICAgICAgICAgZGlzcGxheTogXCJibG9ja1wiLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgXCImOmhvdmVyXCI6IHtcbiAgICAgICAgW1Rvb2xUaXBUZXh0XToge1xuICAgICAgICAgICAgZGlzcGxheTogXCJibG9ja1wiLFxuICAgICAgICB9LFxuICAgIH0sXG59KTtcblxuZXhwb3J0IGNvbnN0IENvZGVGaWVsZFRleHQgPSBzdHlsZWQoXCJzcGFuXCIpKFxuICAgIHtcbiAgICAgICAgY29sb3I6IFwiI2ZmZlwiLFxuICAgICAgICBsZXR0ZXJTcGFjaW5nOiBcIi4xMWVtXCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIGZvbnRTaXplOiBbXCIxNHB4XCIsIFwiMThweFwiLCBcIjE4cHhcIl0sXG4gICAgfSksXG4pO1xuZXhwb3J0IGNvbnN0IENvZGVGaWVsZEJvcmRlciA9IHN0eWxlZChcImRpdlwiKShcbiAgICB7XG4gICAgICAgIGJvcmRlclJhZGl1czogXCIxOXB4XCIsXG4gICAgICAgIGJhY2tncm91bmQ6IFwiI2ZmZWVlOVwiLFxuICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgdGV4dEFsaWduOiBcImNlbnRlclwiLFxuICAgICAgICBcIkBtZWRpYSAobWF4LXdpZHRoOiAzOTVweClcIjoge1xuICAgICAgICAgICAgem9vbTogXCIwLjlcIixcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgYm9yZGVyOiBbXCI2cHggc29saWQgI2ZmZWVlOVwiLCBcIjEwcHggc29saWQgI2ZmZWVlOVwiLCBcIjEwcHggc29saWQgI2ZmZWVlOVwiXSxcbiAgICB9KSxcbik7XG5cbmV4cG9ydCBjb25zdCBPcmFuZ2VUZXh0ID0gc3R5bGVkKFwic3BhblwiKSh7XG4gICAgY29sb3I6IFwiI2ZhNWEyOFwiLFxufSk7XG5leHBvcnQgY29uc3QgTGluZXNJbWFnZURlc2t0b3AgPSBzdHlsZWQoXCJpbWdcIikoXG4gICAgbXEoe1xuICAgICAgICBkaXNwbGF5OiBbXCJub25lXCIsIFwiYmxvY2tcIiwgXCJibG9ja1wiXSxcbiAgICAgICAgd2lkdGg6IFtcIjY0MXB4XCIsIFwiNjQxcHhcIiwgXCI3OTJweFwiXSxcbiAgICAgICAgbWFyZ2luQm90dG9tOiBbXCIxOHB4XCIsIFwiMjBweFwiLCBcIjVweFwiXSxcbiAgICB9KSxcbik7XG5cbmV4cG9ydCBjb25zdCBMaW5lc0ltYWdlTW9iaWxlID0gc3R5bGVkKFwiaW1nXCIpKFxuICAgIHtcbiAgICAgICAgaGVpZ2h0OiBcIjM2OXB4XCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIGRpc3BsYXk6IFtcImJsb2NrXCIsIFwibm9uZVwiLCBcIm5vbmVcIl0sXG4gICAgfSksXG4pO1xuXG5leHBvcnQgY29uc3QgQWR2YW50YWdlc0NvbnRhaW5lciA9IHN0eWxlZChcImRpdlwiKShcbiAgICB7XG4gICAgICAgIG1hcmdpbjogXCIwcHggMTBweFwiLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICBkaXNwbGF5OiBbXCJncmlkXCIsIFwiZmxleFwiLCBcImZsZXhcIl0sXG4gICAgICAgIGdhcDogW1wiMTVweFwiLCBcIjEwcHhcIiwgXCIxNXB4XCJdLFxuICAgICAgICBwYWRkaW5nVG9wOiBbXCIzNXB4XCIsIFwiMHB4XCIsIFwiMHB4XCJdLFxuICAgIH0pLFxuKTtcbmV4cG9ydCBjb25zdCBBZHZhbnRhZ2VzQ29udGFpbmVyTW9iaWxlID0gc3R5bGVkKFwiZGl2XCIpKHtcbiAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICBcIkBtZWRpYSAobWF4LXdpZHRoOiAzOTVweClcIjoge1xuICAgICAgICB6b29tOiBcIjAuOVwiLFxuICAgIH0sXG59KTtcblxuZXhwb3J0IGNvbnN0IEFkdmFudGFnZVRpbGVTdHlsZSA9IHN0eWxlZChcImRpdlwiKShcbiAgICB7XG4gICAgICAgIGJveFNoYWRvdzogXCIwcHggMHB4IDE1cHggcmdiYSgxMDAsIDEwMCwgMTAwLCAwLjIzOTIxNilcIixcbiAgICAgICAgYmFja2dyb3VuZDogXCIjZmZmXCIsXG4gICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgIGJvcmRlclJhZGl1czogXCI2cHhcIixcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgZGlzcGxheTogW1wiZmxleFwiLCBcImdyaWRcIiwgXCJncmlkXCJdLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogW1wibGVmdFwiLCBcImNlbnRlclwiLCBcImNlbnRlclwiXSxcbiAgICAgICAgaGVpZ2h0OiBbXCI2MHB4XCIsIFwiMTMycHhcIiwgXCIxMzJweFwiXSxcbiAgICAgICAgd2lkdGg6IFtcIjI4M3B4XCIsIFwiMTUwcHhcIiwgXCIxODBweFwiXSxcbiAgICB9KSxcbik7XG5leHBvcnQgY29uc3QgQWR2YW50YWdlVGlsZVRpdGxlID0gc3R5bGVkKFwiaDRcIikoXG4gICAgeyB0ZXh0QWxpZ246IFwiY2VudGVyXCIsIGNvbG9yOiBcIiMwMDBcIiwgbWFyZ2luOiBcIjBweFwiIH0sXG4gICAgbXEoe1xuICAgICAgICBwYWRkaW5nOiBbXCIwcHggMHB4XCIsIFwiMHB4IDMwcHhcIiwgXCIwcHggMzBweFwiXSxcbiAgICAgICAgbGluZUhlaWdodDogW1wiMjBweFwiLCBcIjIwcHhcIiwgXCIyNnB4XCJdLFxuICAgICAgICBmb250U2l6ZTogW1wiMThweFwiLCBcIjE2cHhcIiwgXCIyMHB4XCJdLFxuICAgICAgICBmb250V2VpZ2h0OiBbXCI0MDBcIiwgXCI3MDBcIiwgXCI3MDBcIl0sXG4gICAgICAgIG1hcmdpblRvcDogW1wiMHB4XCIsIFwiNXB4XCIsIFwiMHB4XCJdLFxuICAgICAgICBtYXJnaW5Cb3R0b206IFtcIjBweFwiLCBcIjIwcHhcIiwgXCIxMHB4XCJdLFxuICAgIH0pLFxuKTtcbmV4cG9ydCBjb25zdCBBZHZhbnRhZ2VUaWxlSW1hZ2UgPSBzdHlsZWQoXCJpbWdcIikoXG4gICAgbXEoe1xuICAgICAgICBtYXJnaW46IFtcIjBweCAxNXB4IDBweCAxMHB4XCIsIFwiMTlweCBhdXRvIDBweCBhdXRvXCIsIFwiMTJweCBhdXRvIDBweCBhdXRvXCJdLFxuICAgIH0pLFxuKTtcbiJdfQ== */"),C.RequestLink=(0,X.default)("a",{target:"eqjnlx13",label:"RequestLink"})({display:"flex",alignItems:"center",marginTop:"11px",border:"none",fontFamily:"Source Sans Pro",fontWeight:"bold",fontSize:"18px",letterSpacing:".001em",color:"#000",transition:"100ms all","&:hover":{textDecoration:"underline",transform:"translateY(-1px)"}},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),C.ImageArrow=(0,X.default)("img",{target:"eqjnlx14",label:"ImageArrow"})({marginLeft:"6px",marginTop:"2px"},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),C.Title=(0,X.default)("h2",{target:"eqjnlx15",label:"Title"})({maxWidth:800,fontWeight:700,color:"#000",textAlign:"center"},(0,i.default)({lineHeight:["45px","55px","65px"],padding:["0px 16px","0px 0px","0px 0px"],fontSize:["36px","46px","56px"],marginTop:["40px","40px","45px"]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),C.SubTitle=(0,X.default)("h3",{target:"eqjnlx16",label:"SubTitle"})({fontWeight:400,letterSpacing:".002em",textAlign:"center",color:"#000"},(0,i.default)({padding:["0px 20px","0px 20px","0px 0px"],fontSize:["18px","20px","24px"],marginBottom:["24px","30px","39px"],marginTop:["3px","9px","0px"],maxWidth:["800px","950px","950px"],lineHeight:["28px","30px","34px"]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),C.Bold=(0,X.default)("strong",{target:"eqjnlx17",label:"Bold"})({fontWeight:"bold",background:"#fee0cc"},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),C.CodeField=(0,X.default)("div",{target:"eqjnlx18",label:"CodeField"})({display:"flex",justifyContent:"space-between",alignItems:"center",backgroundColor:"#150B27 ",color:"#fff",borderRadius:"10px",button:{background:"transparent"}},(0,i.default)({width:["360px","515px","515px"],padding:["14px 10px 16px 11px","13px 15px 12px 24px","13px 15px 12px 24px"]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");const w=C.ToolTipText=(0,X.default)("div",{target:"eqjnlx19",label:"ToolTipText"})({position:"absolute",transform:"translateY(-50%)",marginLeft:"-20px",whiteSpace:"normal",borderRadius:"5px",background:"#292d3e",color:"#fff",textAlign:"center",top:"0px"},(0,i.default)({fontSize:["10px","14px","14px"],right:["-8px","-5px","-5px"],padding:["4px 8px","5px 10px","5px 10px"]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");C.ToolTip=(0,X.default)("div",{target:"eqjnlx110",label:"ToolTip"})({zIndex:"2",position:"relative",cursor:"pointer",display:"flex",alignItems:"center","&> img":{zIndex:"-2"},"&.stiky-tooltip":{[w]:{display:"block"}},"&:hover":{[w]:{display:"block"}}},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),C.CodeFieldText=(0,X.default)("span",{target:"eqjnlx111",label:"CodeFieldText"})({color:"#fff",letterSpacing:".11em"},(0,i.default)({fontSize:["14px","18px","18px"]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),C.CodeFieldBorder=(0,X.default)("div",{target:"eqjnlx112",label:"CodeFieldBorder"})({borderRadius:"19px",background:"#ffeee9",display:"flex",textAlign:"center","@media (max-width: 395px)":{zoom:"0.9"}},(0,i.default)({border:["6px solid #ffeee9","10px solid #ffeee9","10px solid #ffeee9"]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),C.OrangeText=(0,X.default)("span",{target:"eqjnlx113",label:"OrangeText"})({color:"#fa5a28"},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),C.LinesImageDesktop=(0,X.default)("img",{target:"eqjnlx114",label:"LinesImageDesktop"})((0,i.default)({display:["none","block","block"],width:["641px","641px","792px"],marginBottom:["18px","20px","5px"]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),C.LinesImageMobile=(0,X.default)("img",{target:"eqjnlx115",label:"LinesImageMobile"})({height:"369px"},(0,i.default)({display:["block","none","none"]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),C.AdvantagesContainer=(0,X.default)("div",{target:"eqjnlx116",label:"AdvantagesContainer"})({margin:"0px 10px"},(0,i.default)({display:["grid","flex","flex"],gap:["15px","10px","15px"],paddingTop:["35px","0px","0px"]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),C.AdvantagesContainerMobile=(0,X.default)("div",{target:"eqjnlx117",label:"AdvantagesContainerMobile"})({display:"flex","@media (max-width: 395px)":{zoom:"0.9"}},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),C.AdvantageTileStyle=(0,X.default)("div",{target:"eqjnlx118",label:"AdvantageTileStyle"})({boxShadow:"0px 0px 15px rgba(100, 100, 100, 0.239216)",background:"#fff",alignItems:"center",borderRadius:"6px"},(0,i.default)({display:["flex","grid","grid"],justifyContent:["left","center","center"],height:["60px","132px","132px"],width:["283px","150px","180px"]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),C.AdvantageTileTitle=(0,X.default)("h4",{target:"eqjnlx119",label:"AdvantageTileTitle"})({textAlign:"center",color:"#000",margin:"0px"},(0,i.default)({padding:["0px 0px","0px 30px","0px 30px"],lineHeight:["20px","20px","26px"],fontSize:["18px","16px","20px"],fontWeight:["400","700","700"],marginTop:["0px","5px","0px"],marginBottom:["0px","20px","10px"]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),C.AdvantageTileImage=(0,X.default)("img",{target:"eqjnlx120",label:"AdvantageTileImage"})((0,i.default)({margin:["0px 15px 0px 10px","19px auto 0px auto","12px auto 0px auto"]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")}}]);
//# sourceMappingURL=941b0c49-cd03ca8ab79c875058c9.js.map