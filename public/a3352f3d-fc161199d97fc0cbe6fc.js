(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{Owx4:function(I,g,C){"use strict";var A=C("TqRt");g.__esModule=!0,g.default=void 0;var b=A(C("q1tI")),c=A(C("VIIK")),G=A(C("slAs")),l=A(C("0uQq")),X=C("PAeb"),Z=A(C("TcUF")),d=A(C("uOxL")),i=A(C("/dHs")),W=A(C("pk7+")),m=A(C("whD6")),V=A(C("2FwV")),B=A(C("CvLx")),u=A(C("Mjz+")),F=A(C("ZlDD")),x=A(C("o9u0"));const R=(0,X.css)({position:"relative"},(0,l.default)({paddingTop:[40,0],paddingBottom:[40,0]}),"label:wrapperClass;","/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),Y=(0,X.css)({position:"relative",display:"flex",flexDirection:"column",alignItems:"center",maxWidth:1200,"&::before":{position:"absolute",height:800,top:0,zIndex:0}},(0,l.default)({width:["100%","100%"],height:["100%"],paddingTop:[40,100],paddingBottom:[40,90],"&::before":{display:["none","block"],left:[0,"-10%","-10%"]}}),"label:contentContainerClass;","/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),a=(0,X.css)({backgroundImage:"url("+W.default+")",backgroundPosition:"top",backgroundRepeat:"no-repeat",backgroundSize:"cover"},"label:vpcClass;","/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),w=(0,X.css)({backgroundImage:"url("+i.default+")",backgroundPosition:"top",backgroundRepeat:"no-repeat",backgroundSize:"cover"},"label:customClass;","/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),h=(0,X.css)({maxWidth:320},"label:ctaButton;","/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),J=(0,c.default)("div",{target:"er6gwvl0",label:"Feature"})({width:"100%",display:"flex",alignItems:"center","&:last-child":{paddingBottom:0}},(0,l.default)({flexDirection:["column","row"],paddingBottom:[100,130],"&.reverse":{flexDirection:["column","row-reverse"]}}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),y=(0,c.default)("img",{target:"er6gwvl1",label:"FeatureImage"})({position:"relative",margin:"0 auto"},(0,l.default)({width:["auto","50%"],maxWidth:["80%",473],paddingBottom:[24,0]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),N=(0,c.default)("div",{target:"er6gwvl2",label:"FeatureInfo"})({position:"relative"},(0,l.default)({width:["auto","50%"],maxWidth:[600,"none"],padding:["0px 16px","0px 24px"]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),v=(0,c.default)("h2",{target:"er6gwvl3",label:"FeatureTitle"})({fontSize:38,fontWeight:G.default.fontWeight.bold,color:G.default.color.black,marginTop:0,"& span":{color:G.default.color.purple}},(0,l.default)({marginBottom:[24,40],textAlign:["center","left"],"&.medium-width":{maxWidth:["100%",420]},"&.large-width":{maxWidth:["100%",490]},"&.full-width":{maxWidth:["100%","92%"]}}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),H=(0,c.default)("p",{target:"er6gwvl4",label:"FeatureDescription"})({fontSize:G.default.fontSize.subText,fontWeight:G.default.fontWeight.regular,lineHeight:"30px",color:G.default.color.black,marginBottom:15},(0,l.default)({textAlign:["center","left"]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),t=(0,c.default)("div",{target:"er6gwvl5",label:"Wrapper"})({display:"flex",flexDirection:"column"},(0,l.default)({width:["100%",1100],alignItems:["center"],marginBottom:[60]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),n=(0,c.default)("h1",{target:"er6gwvl6",label:"Title"})({maxWidth:768,fontSize:G.default.fontSize["5xl"],fontWeight:G.default.fontWeight.bold,color:G.default.color.black,textAlign:"center",lineHeight:"48px",margin:"60px 0px 0px"},(0,l.default)({marginLeft:[0,"auto"],marginRight:[0,"auto"],fontSize:[40,G.default.fontSize["5xl"]]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),p=(0,c.default)("span",{target:"er6gwvl7",label:"TitleHighlight"})({backgroundImage:"url("+F.default+")",backgroundPositionX:"right",backgroundPositionY:"bottom",backgroundRepeat:"no-repeat"},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");g.default=()=>b.default.createElement("section",{className:R},b.default.createElement(d.default,null,b.default.createElement(t,null,b.default.createElement(n,null,"Hoola AI security ",b.default.createElement(p,null,"perimeter")))),b.default.createElement(d.default,{className:Y},b.default.createElement(J,null,b.default.createElement(N,null,b.default.createElement(v,{className:"medium-width"},b.default.createElement("span",null,"Your cloud,")," your database, your data"),b.default.createElement(H,null,"Hoola AI is hosted inside your own AWS cloud. You own all the networking, security and databases. Hoola AI doesn't break your data regulation compliances or make it hard for your legal team and your dev team to integrate the solution."),b.default.createElement(H,null,"All the data stays within your cloud giving you a peace of mind which only comes when you have the full control.")),b.default.createElement(y,{src:m.default,alt:"Your cloud, your database, your data"}))),b.default.createElement("div",{className:a},b.default.createElement(d.default,{className:Y},b.default.createElement(J,{className:"reverse"},b.default.createElement(N,null,b.default.createElement(v,{className:"medium-width"},b.default.createElement("span",null,"Runs inside")," a VPC"),b.default.createElement(H,null,"You have the full control over how open or closed you want your Hoola AI instance to be. Hoola AI can be deployed both inside a VPC, as well as outside."),b.default.createElement(H,null,"Define custom security policies and networking rules, allow only access from certain IPs, or the public internet.")),b.default.createElement(y,{src:V.default,alt:"Run inside a VPC"})))),b.default.createElement(d.default,{className:Y},b.default.createElement(J,null,b.default.createElement(N,null,b.default.createElement(v,{className:"full-width"},b.default.createElement("span",null,"Code")," security"),b.default.createElement(H,null,"Hoola AI, being a public open-source project, our code is our product. But it's also our pride accomplishment. To tighten the security, our code base is constantly scanned by CodeQL - the world's most powerful code analysis engine for any security vulnerabilities."),b.default.createElement(H,null,"We also use Dependabot to scan for any security vulnerabilities in our dependencies and 3rd party libraries.")),b.default.createElement(y,{src:B.default,alt:"webiny is a dynamic CMS not a static site generator"}))),b.default.createElement("div",{className:w},b.default.createElement(d.default,{className:Y},b.default.createElement(J,{className:"reverse"},b.default.createElement(N,null,b.default.createElement(v,{className:"large-width"},b.default.createElement("span",null,"Customise")," the deployment workflow"),b.default.createElement(H,null,"Hoola AI deployment mechanism is completely customisable. By default Hoola AI uses Pulumi, however, you can change this and integrate solutions like CloudFormation, Serverless Framework, TerraForm, or any other process."),b.default.createElement(H,null,"We intentionally separated our deployment process as many enterprises want to have full control over how infrastructure get created within their cloud platform.")),b.default.createElement(y,{src:u.default,alt:"no need to do scaling and infrastructure management"})))),b.default.createElement(d.default,{className:Y},b.default.createElement(J,null,b.default.createElement(N,null,b.default.createElement(v,{className:"large-width"},b.default.createElement("span",null,"We have")," your back"),b.default.createElement(H,null,"Our team of professionals is here for you. We will work with you to ensure your team uses serverless and Hoola AI best practices."),b.default.createElement(H,null,"We will help you get the right architecture in place and train your developers ensuring your project is a success.")),b.default.createElement(y,{src:x.default,alt:"no need to do scaling and infrastructure management"})),b.default.createElement(Z.default,{link:"https://site.hoola.ai/forms/product-demo",target:"_blank",type:"secondary",className:h},"Talk to Us")))}}]);
//# sourceMappingURL=a3352f3d-fc161199d97fc0cbe6fc.js.map