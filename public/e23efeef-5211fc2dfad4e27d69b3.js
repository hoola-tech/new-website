(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{"U/Q4":function(I,g,C){"use strict";var A=C("TqRt");g.__esModule=!0,g.default=void 0;var b=function(I,g){if("function"==typeof WeakMap)var C=new WeakMap,A=new WeakMap;return function(I,g){if(!g&&I&&I.__esModule)return I;var b,c,l={__proto__:null,default:I};if(null===I||"object"!=typeof I&&"function"!=typeof I)return l;if(b=g?A:C){if(b.has(I))return b.get(I);b.set(I,l)}for(const C in I)"default"!==C&&{}.hasOwnProperty.call(I,C)&&((c=(b=Object.defineProperty)&&Object.getOwnPropertyDescriptor(I,C))&&(c.get||c.set)?b(l,C,c):l[C]=I[C]);return l}(I,g)}(C("q1tI")),c=A(C("VIIK")),l=A(C("slAs")),G=A(C("0uQq")),X=A(C("9aQT")),d=A(C("Dl18")),Z=A(C("gVFu")),W=A(C("uOxL")),V=A(C("TcUF")),i=A(C("84hP")),u=A(C("wW+W")),B=A(C("Zo+Q")),x=A(C("pmiV")),Y=A(C("F9T+")),m=A(C("RL3Q")),h=A(C("F4s+")),a=A(C("89x7")),F=A(C("78tT")),J=A(C("a6Fj")),R=A(C("ub8f")),v=C("r/61"),N=C("CzB1");const n=()=>{const{0:I,1:g}=(0,b.useState)([]),{0:C,1:A}=(0,b.useState)(!0),{0:c,1:l}=(0,b.useState)(!1);return(0,b.useEffect)(()=>{fetch("https://api.github.com/repos/webiny/webiny-js/contributors").then(I=>I.json()).then(I=>{A(!1),g(I)}).catch(I=>{console.error(I),l(!0)})},[]),c?b.default.createElement("p",null,"Something went wrong!"):C?b.default.createElement("p",null,"Loading contributors..."):I.filter(y).slice(0,15).map(I=>b.default.createElement(N.ContributorCard,{key:I.id,onClick:()=>{window.open(I.html_url,"_blank","noopener noreferrer")}},b.default.createElement("img",{src:I.avatar_url,alt:I.login,className:"card__img"}),b.default.createElement("h5",{className:"card__name"},I.login)))},y=I=>!v.TEAM_MEMBERS.some(g=>g.github&&g.github.toLowerCase()===I.html_url.toLowerCase()),t=(0,c.default)(N.Title,{target:"el62nwh0",label:"WelcomeTitle"})({color:l.default.color.black},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),H=(0,c.default)(N.TitleHighlight,{target:"el62nwh1",label:"WelcomeTitleHighlight"})({backgroundImage:"url("+B.default+")"},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),p=(0,c.default)(N.Text,{target:"el62nwh2",label:"WelcomeText"})({color:l.default.color.black,marginTop:20},(0,G.default)({maxWidth:["100%",888]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),w=(0,c.default)(N.Title,{target:"el62nwh3",label:"StoryTitle"})({color:l.default.color.black},(0,G.default)({margin:["0px auto 50px","50px auto"]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),s=(0,c.default)(N.TitleHighlight,{target:"el62nwh4",label:"StoryTitleHighlight"})({backgroundImage:"url("+x.default+")"},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),L=(0,c.default)(N.Text,{target:"el62nwh5",label:"StoryText"})({color:l.default.color.black,textAlign:"left"},(0,G.default)({maxWidth:["100%",1110]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),S=(0,c.default)(N.Title,{target:"el62nwh6",label:"TeamTitle"})({color:l.default.color.black},(0,G.default)({margin:["50px auto","60px auto 50px"]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),z=(0,c.default)(N.TitleHighlight,{target:"el62nwh7",label:"TeamTitleHighlight"})({backgroundImage:"url("+Y.default+")"},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),U=(0,c.default)(N.Text,{target:"el62nwh8",label:"ContributorsText"})({color:l.default.color.black,fontWeight:l.default.fontWeight.bold,"& span":{color:l.default.color.primaryDark}},(0,G.default)({margin:["0px auto 50px","0px auto 60px"]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),e=(0,c.default)(N.TitleHighlight,{target:"el62nwh9",label:"TraitsTitleHighlight"})({backgroundImage:"url("+a.default+")"},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),D=(0,c.default)(N.Text,{target:"el62nwh10",label:"TraitsText"})({color:l.default.color.black},(0,G.default)({margin:["50px auto 0px","70px auto 0px"],maxWidth:["100%",888]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),P=(0,c.default)(N.Title,{target:"el62nwh11",label:"InvestorTitle"})({color:l.default.color.black},(0,G.default)({margin:["0px auto 0px","0px auto"]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),Q=(0,c.default)(N.Text,{target:"el62nwh12",label:"InvestorText"})({color:l.default.color.black},(0,G.default)({margin:["0px auto 0px","0px auto 24px"],maxWidth:["100%",888]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),j=(0,c.default)("div",{target:"el62nwh13",label:"InvestorLogos"})({display:"flex",justifyContent:"space-around",width:"100%",alignItems:"center",img:{width:"100%",height:"auto"}},(0,G.default)({flexDirection:["column","row"],img:{marginTop:[25,0]}}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),o=[{link:"/",text:"Home"},{text:"About Us"}];g.default=()=>b.default.createElement(b.Fragment,null,b.default.createElement(N.SectionWithBackground,null,b.default.createElement(i.default,{breadcrumbs:o}),b.default.createElement(W.default,{className:N.heroContainerClass},b.default.createElement(N.WebinyHallMarkImage,{src:u.default,alt:""}),b.default.createElement(N.HeroSectionWrapper,null,b.default.createElement(N.Title,null,"Creating Tools and Solutions for the Serverless Era")))),b.default.createElement(N.Section,null,b.default.createElement(W.default,{className:N.welcomeContainerClass},b.default.createElement(t,null,"Hello and ",b.default.createElement(H,null,"welcome")),b.default.createElement(p,null,"At Hoola AI we have a mission to empower every developer to create serverless applications and websites. We do that by providing tools, processes and ready-made apps, and as a result, developers can create serverless applications with ease."))),b.default.createElement(N.SectionWithDots,null,b.default.createElement(N.FoundersVideoTitle,null,"Message from the founders (1min)"),b.default.createElement(N.ImageWrapper,null,b.default.createElement("div",{className:N.videoPreviewClass},b.default.createElement("img",{src:X.default,alt:""})),b.default.createElement(d.default,{img:Z.default,id:"iYyLS9r3uiQ"}))),b.default.createElement(N.Section,null,b.default.createElement(W.default,{className:N.welcomeContainerClass},b.default.createElement(w,null,"Our ",b.default.createElement(s,null,"story")),b.default.createElement(L,null,"Many moons ago, Hoola AI was just another digital agency. We were building websites, fighting the technology and fixing bugs. Many bugs."),b.default.createElement(L,null,'Eventually, we saw that the way we build and manage web applications is changing. We saw that this “serverless trend" is actually not a trend, and is here to stay. Even more than that, we now believe that in a few years time, serverless will be the way most of the web is created.'),b.default.createElement(L,null,"With this belief, we decided to close down our service business and focus on a mission to build an open-source framework for building serverless applications. One that will become a foundation for all future serverless applications. One that developers will see as a core part of their serverless stack."),b.default.createElement(L,null,"Throughout the whole process we had one big North Star in our mind to guide us - a community. A community of developers that we could support with Hoola AI and that would join us on our mission, and help us achieve our goals. As a result, we have released Hoola AI under the MIT open-source licence so everyone can use it completely free of charge."))),b.default.createElement(N.TeamSection,null,b.default.createElement(W.default,{className:N.welcomeContainerClass},b.default.createElement(N.TeamPath,{src:m.default,alt:""}),b.default.createElement(S,null,b.default.createElement(z,null,"Team")),b.default.createElement(N.TeamWrapper,null,v.TEAM_MEMBERS.map(I=>b.default.createElement(N.ProfileCard,{key:I.id},b.default.createElement("img",{src:I.imgSrc,alt:I.name,className:"profile__img"}),b.default.createElement("h5",{className:"profile__name"},I.name),b.default.createElement("p",{className:"profile__title"},I.jobTitle),b.default.createElement("ul",{className:"profile__links"},v.LINKS.map(g=>"string"==typeof I[g.name]&&I[g.name].length>0?b.default.createElement("li",{key:g.id,className:"profile__link"},b.default.createElement("a",{href:I[g.name],target:"_blank",rel:"noopener noreferrer"},b.default.createElement("img",{src:g.icon,alt:""}))):null))))))),b.default.createElement(N.SectionWithGrayRectangle,null,b.default.createElement(W.default,{className:N.contributorsContainerClass},b.default.createElement(U,null,"Assisted by our ",b.default.createElement("span",null,"Hoola AI community")," and ",b.default.createElement("span",null,"contributors")),b.default.createElement(N.ContributorsWrapper,null,b.default.createElement(n,null)),b.default.createElement(N.ButtonWrapper,null,b.default.createElement(V.default,{type:"primary",link:"https://github.com/webiny/webiny-js"},"And many more ",b.default.createElement("img",{src:h.default,alt:"",className:"icon"}))))),b.default.createElement(N.Section,null,b.default.createElement(W.default,{className:N.welcomeContainerClass},b.default.createElement(S,null,"Traits we ",b.default.createElement(e,null,"value")),b.default.createElement(N.TraitsWrapper,null,v.TRAITS.map(I=>b.default.createElement(N.TraitCard,{key:I.id,className:I.spanTwoRows?"spanTwoRows":""},b.default.createElement("img",{src:I.icon,alt:"",className:"card__img"}),b.default.createElement("p",{className:"card__title"},I.text)))),b.default.createElement(D,null,"Our team is ever expanding, so if you have identified yourself in our values, we would love to talk."),b.default.createElement(N.ButtonWrapper,null,b.default.createElement(V.default,{type:"dark",link:"https://careers.hoola.ai/"},"view open positions ",b.default.createElement("img",{src:h.default,alt:"",className:"icon"}))))),b.default.createElement(N.SectionWithDots,null,b.default.createElement(W.default,{className:N.investorContainerClass},b.default.createElement(N.ImageWrapper,null,b.default.createElement("div",{className:N.videoPreviewClass},b.default.createElement("img",{src:R.default,alt:""})),b.default.createElement(N.More,null,b.default.createElement(P,null,"Our Investors"),b.default.createElement(Q,null,"We are proud to be backed by visionary investors"),b.default.createElement(j,null,b.default.createElement("img",{src:F.default,alt:"Episode 1",className:"img"}),b.default.createElement("img",{src:J.default,alt:"Y Combinator",className:"img"})))))),b.default.createElement(N.SectionWithWaves,null,b.default.createElement(W.default,{className:N.mediaKitContainerClass},b.default.createElement(N.MediaCardWrapper,null,v.MEDIA_KIT.map(I=>b.default.createElement(N.MediaKitCard,{key:I.id,onClick:g=>{g.preventDefault(),window.open(I.actionLink,"_blank","noopener noreferrer")}},b.default.createElement("img",{src:I.imgSrc,alt:I.imgAlt,className:"img"}),b.default.createElement("a",{className:"link",href:I.actionLink},"function"==typeof I.actionLabel&&I.actionLabel())))))))}}]);
//# sourceMappingURL=e23efeef-5211fc2dfad4e27d69b3.js.map