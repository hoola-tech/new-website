(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{"1dn1":function(I,g,C){"use strict";var A=C("TqRt");g.__esModule=!0,g.default=void 0;var c=A(C("QILm")),b=A(C("q1tI")),G=A(C("VIIK")),X=A(C("OS56")),i=A(C("slAs")),l=A(C("0uQq")),Z=C("PAeb"),W=A(C("TcUF")),x=A(C("uOxL")),d=A(C("fdwG")),B=A(C("gZTf")),F=A(C("yPJg")),u=A(C("2W8Z")),w=A(C("Kazn")),m=A(C("pTw8")),R=A(C("0YHp"));C("lsUG");var V=A(C("U/hs")),a=A(C("QPZb")),N=A(C("4Vsx")),y=A(C("0yzl"));const J=["handleDemoClick","demoLink"],Y=(0,Z.css)({},(0,l.default)({paddingTop:[80,140],paddingBottom:[40,60]}),"label:wrapperClass;","/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9iZXJuYXJkL1Byb2plY3RzL2hvb2xhL3NpdGUvc3JjL2NvbXBvbmVudHMvYWdlbmN5L3JlYWR5LW1hZGUtYXBwcy9yZWFkeS1tYWRlLWFwcHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBdUJxQiIsImZpbGUiOiIvVXNlcnMvYmVybmFyZC9Qcm9qZWN0cy9ob29sYS9zaXRlL3NyYy9jb21wb25lbnRzL2FnZW5jeS9yZWFkeS1tYWRlLWFwcHMvcmVhZHktbWFkZS1hcHBzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwicmVhY3QtZW1vdGlvblwiO1xuaW1wb3J0IFNsaWRlciBmcm9tIFwicmVhY3Qtc2xpY2tcIjtcbmltcG9ydCB0aGVtZSBmcm9tIFwiLi4vLi4vdXRpbHMvdGhlbWVcIjtcbmltcG9ydCBtcSBmcm9tIFwiLi4vLi4vdXRpbHMvYnJlYWtwb2ludHNcIjtcbmltcG9ydCB7IGNzcyB9IGZyb20gXCJlbW90aW9uXCI7XG5pbXBvcnQgQnV0dG9uIGZyb20gXCIuLi8uLi91aS9idXR0b25cIjtcbmltcG9ydCBDb250ZW50Q29udGFpbmVyIGZyb20gXCIuLi8uLi91aS9jb250ZW50LWNvbnRhaW5lclwiO1xuXG5pbXBvcnQgcHVycGxlQXJyb3dSaWdodCBmcm9tIFwiLi9hc3NldHMvcHVycGxlLWFycm93LXJpZ2h0LnN2Z1wiO1xuaW1wb3J0IHJlYWR5TWFkZUFwcHNCZyBmcm9tIFwiLi9hc3NldHMvcmVhZHktbWFkZS1hcHBzLWJnLnN2Z1wiO1xuaW1wb3J0IHJlYWR5TWFkZUFwcHNUaXRsZUJnIGZyb20gXCIuL2Fzc2V0cy9yZWFkeS1tYWRlLWFwcHMtdGl0bGUtYmcuc3ZnXCI7XG5pbXBvcnQgZGVtb0ljb24gZnJvbSBcIi4vYXNzZXRzL2RlbW8taWNvbi5zdmdcIjtcbmltcG9ydCBtYWNrQm9va0FpckZyYW1lIGZyb20gXCIuL2Fzc2V0cy9tYWNib29rLWFpci5zdmdcIjtcbmltcG9ydCByaWdodEFycm93SWNvbiBmcm9tIFwiLi9hc3NldHMvcmlnaHQtYXJyb3cuc3ZnXCI7XG5pbXBvcnQgbGVmdEFycm93SWNvbiBmcm9tIFwiLi9hc3NldHMvbGVmdC1hcnJvdy5zdmdcIjtcblxuaW1wb3J0IFwiLi9hc3NldHMvc2xpZGVyLmNzc1wiO1xuaW1wb3J0IGZpbGVNYW5hZ2VyIGZyb20gXCIuL2Fzc2V0cy9maWxlLW1hbmFnZXItdmlkZW8uZ2lmXCI7XG5pbXBvcnQgZm9ybUJ1aWxkZXIgZnJvbSBcIi4vYXNzZXRzL2Zvcm0tYnVpbGRlci12aWRlby5naWZcIjtcbmltcG9ydCBoZWFkbGVzc0NtcyBmcm9tIFwiLi9hc3NldHMvaGVhZGxlc3MtY21zLmdpZlwiO1xuaW1wb3J0IHBhZ2VCdWlsZGVyIGZyb20gXCIuL2Fzc2V0cy9wYWdlLWJ1aWxkZXItdmlkZW8uZ2lmXCI7XG5cbmNvbnN0IHdyYXBwZXJDbGFzcyA9IGNzcyhcbiAgICB7fSxcbiAgICBtcSh7XG4gICAgICAgIHBhZGRpbmdUb3A6IFs4MCwgMTQwXSxcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogWzQwLCA2MF0sXG4gICAgfSksXG4pO1xuXG5jb25zdCB3cmFwcGVyV2l0aEJhY2tncm91bmRJbWFnZUNsYXNzID0gY3NzKFxuICAgIHtcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICB6SW5kZXg6IDAsXG4gICAgICAgIGJhY2tncm91bmRJbWFnZTogXCJ1cmwoXCIgKyByZWFkeU1hZGVBcHBzQmcgKyBcIilcIixcbiAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiBcInRvcFwiLFxuICAgICAgICBiYWNrZ3JvdW5kUmVwZWF0OiBcIm5vLXJlcGVhdFwiLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogW1wiYXV0b1wiLCBcImNvdmVyXCJdLFxuICAgICAgICBwYWRkaW5nVG9wOiBbNDAsIDBdLFxuICAgICAgICBwYWRkaW5nQm90dG9tOiBbNDAsIDBdLFxuICAgIH0pLFxuKTtcblxuY29uc3QgY29udGVudENvbnRhaW5lckNsYXNzID0gY3NzKFxuICAgIHtcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgIG1heFdpZHRoOiAxMjAwLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICB3aWR0aDogW1wiMTAwJVwiLCBcIjEwMCVcIl0sXG4gICAgICAgIGhlaWdodDogW1wiMTAwJVwiXSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IFRleHRXcmFwcGVyID0gc3R5bGVkKFwiZGl2XCIpKHtcbiAgICBtYXhXaWR0aDogNzY4LFxuICAgIG1hcmdpbjogXCIwIGF1dG9cIixcbiAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG59KTtcblxuY29uc3QgVGl0bGUgPSBzdHlsZWQoXCJoMlwiKSh7XG4gICAgZm9udFNpemU6IHRoZW1lLmZvbnRTaXplLmgyLFxuICAgIGZvbnRXZWlnaHQ6IHRoZW1lLmZvbnRXZWlnaHQuYm9sZCxcbiAgICBjb2xvcjogdGhlbWUuY29sb3IuYmxhY2ssXG4gICAgdGV4dEFsaWduOiBcImNlbnRlclwiLFxuICAgIHBhZGRpbmdUb3A6IDAsXG4gICAgbWFyZ2luVG9wOiAwLFxuICAgIG1hcmdpbkJvdHRvbTogMjgsXG59KTtcblxuY29uc3QgSGlnaGxpZ2h0ZWRCZyA9IHN0eWxlZChcInNwYW5cIikoe1xuICAgIGJhY2tncm91bmRJbWFnZTogXCJ1cmwoXCIgKyByZWFkeU1hZGVBcHBzVGl0bGVCZyArIFwiKVwiLFxuICAgIGJhY2tncm91bmRQb3NpdGlvblg6IFwicmlnaHRcIixcbiAgICBiYWNrZ3JvdW5kUG9zaXRpb25ZOiBcImJvdHRvbVwiLFxuICAgIGJhY2tncm91bmRSZXBlYXQ6IFwibm8tcmVwZWF0XCIsXG59KTtcblxuY29uc3QgYXBwQ3RhQnV0dG9uQ2xhc3MgPSBjc3MoXG4gICAge1xuICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgICAgICBtYXJnaW5MZWZ0OiBcIi0yMHB4ICFpbXBvcnRhbnRcIixcbiAgICAgICAgdGV4dFRyYW5zZm9ybTogXCJ1cHBlcmNhc2VcIixcbiAgICAgICAgZm9udFdlaWdodDogdGhlbWUuZm9udFdlaWdodC5ib2xkLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwidHJhbnNwYXJlbnQgIWltcG9ydGFudFwiLFxuICAgICAgICBjb2xvcjogXCIjN0IzOUQ5ICFpbXBvcnRhbnRcIixcbiAgICAgICAgdGV4dERlY29yYXRpb246IFwidW5kZXJsaW5lICFpbXBvcnRhbnRcIixcbiAgICAgICAgdGV4dERlY29yYXRpb25Db2xvcjogXCIjN0IzOUQ5ICFpbXBvcnRhbnRcIixcbiAgICAgICAgXCImOmhvdmVyXCI6IHtcbiAgICAgICAgICAgIGJveFNoYWRvdzogXCJub25lICFpbXBvcnRhbnRcIixcbiAgICAgICAgICAgIFwiJiBpbWdcIjoge1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogXCJ0cmFuc2xhdGVYKDVweClcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIHdpZHRoOiBbXCIxNTBweCAhaW1wb3J0YW50XCJdLFxuICAgIH0pLFxuKTtcblxuY29uc3QgQXJyb3dSaWdodCA9IHN0eWxlZChcImltZ1wiKSh7XG4gICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICBtYXJnaW5MZWZ0OiA1LFxufSk7XG5cbmNvbnN0IGN0YUJ1dHRvbiA9IGNzcyhcbiAgICB7XG4gICAgICAgIHRleHRUcmFuc2Zvcm06IFwidXBwZXJjYXNlXCIsXG4gICAgICAgIHBhZGRpbmc6IFwiMTBweCAxMnB4ICFpbXBvcnRhbnRcIixcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgd2lkdGg6IFtcIjIzMHB4ICFpbXBvcnRhbnRcIl0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBEZW1vSWNvbiA9IHN0eWxlZChcImltZ1wiKShcbiAgICB7XG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIG1hcmdpblJpZ2h0OiA1LFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICBkaXNwbGF5OiBbXCJibG9ja1wiXSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IEFwcHNDb250YWluZXIgPSBzdHlsZWQoXCJkaXZcIikoXG4gICAge1xuICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgbWF4V2lkdGg6IDEyMDAsXG4gICAgICAgIG1hcmdpbjogXCIwIGF1dG9cIixcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgd2lkdGg6IFtcIjEwMCVcIiwgXCIxMDAlXCJdLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiBbXCJjb2x1bW5cIiwgXCJyb3dcIl0sXG4gICAgICAgIHBhZGRpbmdUb3A6IFs0MCwgMTQwXSxcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogWzQwLCAyNTBdLFxuICAgICAgICBwYWRkaW5nTGVmdDogWzAsIDI0XSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IHNsaWRlckNvbnRlbnRDbGFzcyA9IGNzcyhcbiAgICB7XG4gICAgICAgIGRpc3BsYXk6IFwiZmxleCAhaW1wb3J0YW50XCIsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIGFsaWduSXRlbXM6IFtcImNlbnRlclwiLCBcImZsZXgtc3RhcnRcIl0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBMZWZ0U2lkZSA9IHN0eWxlZChcImRpdlwiKShcbiAgICB7XG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIHdpZHRoOiBbXCIxMDAlXCIsIFwiMzAlXCJdLFxuICAgICAgICBtYXJnaW46IFtcIjAgYXV0byAxNXB4IGF1dG9cIiwgMF0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBSaWdodFNpZGUgPSBzdHlsZWQoXCJkaXZcIikoXG4gICAge1xuICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICB3aWR0aDogW1wiMTAwJVwiLCBcIjcwJVwiXSxcbiAgICAgICAgbWFyZ2luVG9wOiBbMCwgLTEyMF0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBBcHBUaXRsZSA9IHN0eWxlZChcImgyXCIpKFxuICAgIHtcbiAgICAgICAgZm9udFNpemU6IDQ4LFxuICAgICAgICBmb250V2VpZ2h0OiB0aGVtZS5mb250V2VpZ2h0LmJvbGQsXG4gICAgICAgIGNvbG9yOiB0aGVtZS5jb2xvci5ibGFjayxcbiAgICAgICAgcGFkZGluZ1RvcDogMCxcbiAgICAgICAgbWFyZ2luVG9wOiAwLFxuICAgICAgICBtYXJnaW5Cb3R0b206IDIwLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICB0ZXh0QWxpZ246IFtcImNlbnRlclwiLCBcImxlZnRcIl0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBBcHBEZXNjcmlwdGlvbiA9IHN0eWxlZChcImgyXCIpKFxuICAgIHtcbiAgICAgICAgZm9udFNpemU6IHRoZW1lLmZvbnRTaXplLnN1YlRleHQsXG4gICAgICAgIGZvbnRXZWlnaHQ6IHRoZW1lLmZvbnRXZWlnaHQubGlnaHQsXG4gICAgICAgIGNvbG9yOiB0aGVtZS5jb2xvci5ibGFjayxcbiAgICAgICAgcGFkZGluZ1RvcDogMCxcbiAgICAgICAgbWFyZ2luOiBcIjBweCAwcHggMjRweFwiLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICBtYXhXaWR0aDogWzMwMl0sXG4gICAgICAgIHRleHRBbGlnbjogW1wiY2VudGVyXCIsIFwibGVmdFwiXSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IERldmljZUZyYW1lID0gc3R5bGVkKFwiaW1nXCIpKFxuICAgIHtcbiAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBsZWZ0OiAwLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICB3aWR0aDogW1wiMTAwJVwiXSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IGxlZnRBcnJvd0NsYXNzID0gY3NzKFxuICAgIHtcbiAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgdG9wOiBcIjQwJVwiLFxuICAgICAgICBwYWRkaW5nOiBcIjBweCAhaW1wb3J0YW50XCIsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJ0cmFuc3BhcmVudCAhaW1wb3J0YW50XCIsXG4gICAgICAgIHpJbmRleDogNSxcbiAgICAgICAgXCImOmhvdmVyXCI6IHtcbiAgICAgICAgICAgIGJveFNoYWRvdzogXCJub25lICFpbXBvcnRhbnRcIixcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgZGlzcGxheTogW1wibm9uZSAhaW1wb3J0YW50XCIsIFwiYmxvY2sgIWltcG9ydGFudFwiXSxcbiAgICAgICAgd2lkdGg6IFtcIjMwcHggIWltcG9ydGFudFwiLCBcIjUwcHggIWltcG9ydGFudFwiXSxcbiAgICAgICAgbGVmdDogWzE1LCBcIi04JVwiLCBcIi0xNSVcIl0sXG4gICAgICAgIFwiQG1lZGlhIChtaW4td2lkdGg6IDEzNjZweClcIjoge1xuICAgICAgICAgICAgbGVmdDogXCItMTUlXCIsXG4gICAgICAgIH0sXG4gICAgfSksXG4pO1xuXG5jb25zdCByaWdodEFycm93Q2xhc3MgPSBjc3MoXG4gICAge1xuICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgICB0b3A6IFwiNDAlXCIsXG4gICAgICAgIHBhZGRpbmc6IFwiMHB4ICFpbXBvcnRhbnRcIixcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcInRyYW5zcGFyZW50ICFpbXBvcnRhbnRcIixcbiAgICAgICAgekluZGV4OiA1LFxuICAgICAgICBcIiY6aG92ZXJcIjoge1xuICAgICAgICAgICAgYm94U2hhZG93OiBcIm5vbmUgIWltcG9ydGFudFwiLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICBkaXNwbGF5OiBbXCJub25lICFpbXBvcnRhbnRcIiwgXCJibG9jayAhaW1wb3J0YW50XCJdLFxuICAgICAgICB3aWR0aDogW1wiMzBweCAhaW1wb3J0YW50XCIsIFwiNTBweCAhaW1wb3J0YW50XCJdLFxuICAgICAgICByaWdodDogWzE1LCBcIi04JVwiLCBcIi0xNSVcIl0sXG4gICAgICAgIFwiQG1lZGlhIChtaW4td2lkdGg6IDEzNjZweClcIjoge1xuICAgICAgICAgICAgcmlnaHQ6IFwiLTE1JVwiLFxuICAgICAgICB9LFxuICAgIH0pLFxuKTtcblxuY29uc3QgTGVmdEFycm93SW1hZ2UgPSBzdHlsZWQoXCJpbWdcIikoe1xuICAgIHdpZHRoOiBcIjEwMCVcIixcbn0pO1xuXG5jb25zdCBSaWdodEFycm93SW1hZ2UgPSBzdHlsZWQoXCJpbWdcIikoe1xuICAgIHdpZHRoOiBcIjEwMCVcIixcbn0pO1xuXG5jb25zdCB3ZWJpbnlBcHBzTGlzdCA9IGNzcyhcbiAgICB7XG4gICAgICAgIG1heFdpZHRoOiBcIjEwMHZ3XCIsXG4gICAgICAgIG92ZXJmbG93WDogXCJoaWRkZW5cIixcbiAgICAgICAgXCIuc2xpY2stbGlzdFwiOiB7XG4gICAgICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgbXEoe30pLFxuKTtcblxuY29uc3Qgd2ViaW55QXBwc0ltYWdlID0gY3NzKFxuICAgIHtcbiAgICAgICAgbWF4V2lkdGg6IFwiNTgwcHhcIixcbiAgICAgICAgb3ZlcmZsb3c6IFwidmlzaWJsZVwiLFxuICAgICAgICBwYWRkaW5nQm90dG9tOiAyMCxcbiAgICAgICAgbWFyZ2luOiBcIjAgYXV0b1wiLFxuICAgICAgICBcIi5zbGljay1saXN0XCI6IHtcbiAgICAgICAgICAgIGhlaWdodDogMzI0LFxuICAgICAgICAgICAgbWF4V2lkdGg6IFwiNTgwcHhcIixcbiAgICAgICAgfSxcbiAgICAgICAgXCIuc2xpY2stc2xpZGVcIjoge1xuICAgICAgICAgICAgb3V0bGluZTogMCxcbiAgICAgICAgICAgIGJveFNpemluZzogXCJib3JkZXItYm94XCIsXG4gICAgICAgICAgICBkaXY6IHtcbiAgICAgICAgICAgICAgICBvdXRsaW5lOiAwLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGltZzoge1xuICAgICAgICAgICAgICAgIG91dGxpbmU6IDAsXG4gICAgICAgICAgICAgICAgYm94U2hhZG93OiBcIjAgNXB4IDEwcHggMCByZ2JhKDAsMCwwLDAuMTUpXCIsXG4gICAgICAgICAgICAgICAgLy9oZWlnaHQ6IFwiMzUwcHggIWltcG9ydGFudFwiLFxuICAgICAgICAgICAgICAgIG1hcmdpbjogXCIwIGF1dG9cIixcbiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IDUsXG4gICAgICAgICAgICAgICAgYm94U2l6aW5nOiBcImJvcmRlci1ib3hcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIFwiLnNsaWNrLWRvdHNcIjoge1xuICAgICAgICAgICAgekluZGV4OiAxMCxcbiAgICAgICAgICAgIFwibGkgYnV0dG9uOmJlZm9yZVwiOiB7XG4gICAgICAgICAgICAgICAgZm9udFNpemU6IDMwLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgaGVpZ2h0OiBbXCJhdXRvXCIsIDMyNF0sXG4gICAgICAgIFwiLnNsaWNrLWxpc3RcIjoge1xuICAgICAgICAgICAgaGVpZ2h0OiBbXCJhdXRvXCIsIDMyNF0sXG4gICAgICAgICAgICBtYXhXaWR0aDogXCI1ODBweFwiLFxuICAgICAgICB9LFxuICAgICAgICBcIi5zbGljay1zbGlkZVwiOiB7XG4gICAgICAgICAgICB3aWR0aDogW1wiMTAwJVwiLCBcIjEwMCVcIl0sXG4gICAgICAgICAgICBwYWRkaW5nOiAxMCxcbiAgICAgICAgICAgIG1hcmdpbjogMCxcbiAgICAgICAgICAgIGltZzoge1xuICAgICAgICAgICAgICAgIHdpZHRoOiBbXCI4MCVcIiwgXCI5MCVcIl0sXG4gICAgICAgICAgICAgICAgbWluSGVpZ2h0OiBbXCJhdXRvXCIsIFwiYXV0b1wiXSxcbiAgICAgICAgICAgICAgICBtaW5XaWR0aDogW1wiYXV0b1wiLCBcImF1dG9cIl0sXG4gICAgICAgICAgICAgICAgbWFyZ2luTGVmdDogW1wiMTglXCIsIFwiMTAlXCJdLFxuICAgICAgICAgICAgICAgIG1hcmdpblRvcDogW1wiMFwiLCBcIjMlXCJdLFxuICAgICAgICAgICAgICAgIFwiQG1lZGlhIChtaW4td2lkdGg6IDc2OHB4KVwiOiB7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luTGVmdDogXCI1JVwiLFxuICAgICAgICAgICAgICAgICAgICBtYXJnaW5Ub3A6IFwiMyVcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFwiQG1lZGlhIChtaW4td2lkdGg6IDEwMjRweClcIjoge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogXCI5MCVcIixcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luTGVmdDogXCIxMCVcIixcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luVG9wOiBcIjMlXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcIkBtZWRpYSAobWluLXdpZHRoOiAxMzM2cHgpXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDU2MCxcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luTGVmdDogMCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgXCIuc2xpY2stZG90c1wiOiB7XG4gICAgICAgICAgICBwb3NpdGlvbjogW1wiYWJzb2x1dGVcIiwgXCJyZWxhdGl2ZVwiXSxcbiAgICAgICAgICAgIGJvdHRvbTogW1wiLTEwJVwiLCBcIi0yNSVcIl0sXG4gICAgICAgIH0sXG4gICAgfSksXG4pO1xuXG5jbGFzcyBSZWFkeU1hZGVBcHBzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBjb250ZW50TmF2OiBudWxsLFxuICAgICAgICAgICAgaW1hZ2VOYXY6IG51bGwsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgY29udGVudE5hdjogdGhpcy5zbGlkZXIxLFxuICAgICAgICAgICAgaW1hZ2VOYXY6IHRoaXMuc2xpZGVyMixcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7IGhhbmRsZURlbW9DbGljaywgZGVtb0xpbmssIC4uLnJlc3RQcm9wcyB9ID0gdGhpcy5wcm9wcztcblxuICAgICAgICBjb25zdCBidXR0b25Qcm9wcyA9IHt9O1xuICAgICAgICBpZiAoZGVtb0xpbmspIHtcbiAgICAgICAgICAgIGJ1dHRvblByb3BzLmxpbmsgPSBkZW1vTGluaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFuZGxlRGVtb0NsaWNrKSB7XG4gICAgICAgICAgICBidXR0b25Qcm9wcy5vbkNsaWNrID0gaGFuZGxlRGVtb0NsaWNrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgICAgICA8c2VjdGlvbiB7Li4ucmVzdFByb3BzfSBjbGFzc05hbWU9e3dyYXBwZXJDbGFzc30+XG4gICAgICAgICAgICAgICAgICAgIDxDb250ZW50Q29udGFpbmVyIGNsYXNzTmFtZT17Y29udGVudENvbnRhaW5lckNsYXNzfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0V3JhcHBlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGl0bGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhvb2xhIEFJIGNvbWVzIHdpdGggPEhpZ2hsaWdodGVkQmc+IHNldmVyYWwgRlJFRSA8L0hpZ2hsaWdodGVkQmc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWR5LW1hZGUgYXBwcyB5b3UgY2FuIHVzZSB0b2RheTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1RpdGxlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHshdGhpcy5wcm9wcy5jdGEgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGNsYXNzTmFtZT17Y3RhQnV0dG9ufSB0eXBlPVwic2Vjb25kYXJ5XCIgey4uLmJ1dHRvblByb3BzfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxEZW1vSWNvbiBzcmM9e2RlbW9JY29ufSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2NoZWR1bGUgYSAxOjEgRGVtb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9UZXh0V3JhcHBlcj5cbiAgICAgICAgICAgICAgICAgICAgPC9Db250ZW50Q29udGFpbmVyPlxuICAgICAgICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgICAgICAgICA8c2VjdGlvbiB7Li4ucmVzdFByb3BzfSBjbGFzc05hbWU9e3dyYXBwZXJXaXRoQmFja2dyb3VuZEltYWdlQ2xhc3N9PlxuICAgICAgICAgICAgICAgICAgICA8QXBwc0NvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMZWZ0U2lkZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2xpZGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzTmF2Rm9yPXt0aGlzLnN0YXRlLmNvbnRlbnROYXZ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZj17c2xpZGVyID0+ICh0aGlzLnNsaWRlcjIgPSBzbGlkZXIpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c9ezF9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRlck1vZGU9e2ZhbHNlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXJQYWRkaW5nPXsyNX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpcGVUb1NsaWRlPXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb2N1c09uU2VsZWN0PXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3dlYmlueUFwcHNMaXN0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zaXZlPXtbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludDogMTAyNCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXJQYWRkaW5nOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXJNb2RlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDYwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXJQYWRkaW5nOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXJNb2RlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDQ4MCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXJQYWRkaW5nOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXJNb2RlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3NsaWRlckNvbnRlbnRDbGFzc30+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QXBwVGl0bGU+SGVhZGxlc3MgQ01TPC9BcHBUaXRsZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxBcHBEZXNjcmlwdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHcmFwaFFMIGJhc2VkIGhlYWRsZXNzIENNUyB3aXRoIHBvd2VyZnVsIGNvbnRlbnQgbW9kZWxpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlcy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQXBwRGVzY3JpcHRpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXthcHBDdGFCdXR0b25DbGFzc31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rPVwiL3NlcnZlcmxlc3MtYXBwL2hlYWRsZXNzLWNtc1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImRlZmF1bHRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTGVhcm4gbW9yZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxBcnJvd1JpZ2h0IHNyYz17cHVycGxlQXJyb3dSaWdodH0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3NsaWRlckNvbnRlbnRDbGFzc30+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QXBwVGl0bGU+UGFnZSBCdWlsZGVyPC9BcHBUaXRsZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxBcHBEZXNjcmlwdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCdWlsZCBzdHVubmluZyBsYW5kaW5nIHBhZ2VzIHdpdGggYW4gZWFzeSB0byB1c2UgZHJhZyZkcm9wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0FwcERlc2NyaXB0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YXBwQ3RhQnV0dG9uQ2xhc3N9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluaz1cIi9zZXJ2ZXJsZXNzLWFwcC9wYWdlLWJ1aWxkZXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJkZWZhdWx0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExlYXJuIG1vcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QXJyb3dSaWdodCBzcmM9e3B1cnBsZUFycm93UmlnaHR9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzbGlkZXJDb250ZW50Q2xhc3N9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEFwcFRpdGxlPkZvcm0gQnVpbGRlcjwvQXBwVGl0bGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QXBwRGVzY3JpcHRpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3JlYXRlIGZvcm1zIHVzaW5nIGEgZHJhZyZkcm9wIGludGVyZmFjZSBhbmQgdHJhY2sgaG93IHRoZXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJ0LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9BcHBEZXNjcmlwdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2FwcEN0YUJ1dHRvbkNsYXNzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbms9XCIvc2VydmVybGVzcy1hcHAvZm9ybS1idWlsZGVyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiZGVmYXVsdFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMZWFybiBtb3JlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEFycm93UmlnaHQgc3JjPXtwdXJwbGVBcnJvd1JpZ2h0fSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c2xpZGVyQ29udGVudENsYXNzfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxBcHBUaXRsZT5GaWxlIE1hbmFnZXI8L0FwcFRpdGxlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEFwcERlc2NyaXB0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwbG9hZCwgY2F0ZWdvcml6ZSwgc2VhcmNoIGFuZCBlZGl0IHlvdXIgZmlsZXMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0FwcERlc2NyaXB0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YXBwQ3RhQnV0dG9uQ2xhc3N9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluaz1cIi9zZXJ2ZXJsZXNzLWFwcC9maWxlLW1hbmFnZXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJkZWZhdWx0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExlYXJuIG1vcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QXJyb3dSaWdodCBzcmM9e3B1cnBsZUFycm93UmlnaHR9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9TbGlkZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0xlZnRTaWRlPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFJpZ2h0U2lkZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RGV2aWNlRnJhbWUgc3JjPXttYWNrQm9va0FpckZyYW1lfSBhbHQ9XCJtYWNib29rXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2xpZGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzTmF2Rm9yPXt0aGlzLnN0YXRlLmltYWdlTmF2fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY9e3NsaWRlciA9PiAodGhpcy5zbGlkZXIxID0gc2xpZGVyKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG90cz17dHJ1ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXt3ZWJpbnlBcHBzSW1hZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdz17MX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVyTW9kZT17dHJ1ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVyUGFkZGluZz17MjV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhZGU9e3RydWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZBcnJvdz17PFByZXZBcnJvdyAvPn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dEFycm93PXs8TmV4dEFycm93IC8+fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtoZWFkbGVzc0Ntc30gYWx0PVwiSG9vbGEgQUkgU2VydmVybGVzcyBIZWFkbGVzcyBDTVNcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtwYWdlQnVpbGRlcn0gYWx0PVwiSG9vbGEgQUkgU2VydmVybGVzcyBQYWdlIEJ1aWxkZXJcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtmb3JtQnVpbGRlcn0gYWx0PVwiSG9vbGEgQUkgU2VydmVybGVzcyBGb3JtIEJ1aWxkZXJcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtmaWxlTWFuYWdlcn0gYWx0PVwiSG9vbGEgQUkgU2VydmVybGVzcyBGaWxlIE1hbmFnZXJcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1NsaWRlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvUmlnaHRTaWRlPlxuICAgICAgICAgICAgICAgICAgICA8L0FwcHNDb250YWluZXI+XG4gICAgICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlYWR5TWFkZUFwcHM7XG5cbmZ1bmN0aW9uIFByZXZBcnJvdyhwcm9wcykge1xuICAgIGNvbnN0IHsgc3R5bGUsIG9uQ2xpY2sgfSA9IHByb3BzO1xuICAgIHJldHVybiAoXG4gICAgICAgIDxCdXR0b24gdHlwZT1cImRlZmF1bHRcIiBjbGFzc05hbWU9e2xlZnRBcnJvd0NsYXNzfSBzdHlsZT17c3R5bGV9IG9uQ2xpY2s9e29uQ2xpY2t9PlxuICAgICAgICAgICAgPExlZnRBcnJvd0ltYWdlIHNyYz17bGVmdEFycm93SWNvbn0gYWx0PVwiYXJyb3cgdG8gbGVmdFwiIC8+XG4gICAgICAgIDwvQnV0dG9uPlxuICAgICk7XG59XG5cbmZ1bmN0aW9uIE5leHRBcnJvdyhwcm9wcykge1xuICAgIGNvbnN0IHsgc3R5bGUsIG9uQ2xpY2sgfSA9IHByb3BzO1xuICAgIHJldHVybiAoXG4gICAgICAgIDxCdXR0b24gdHlwZT1cImRlZmF1bHRcIiBjbGFzc05hbWU9e3JpZ2h0QXJyb3dDbGFzc30gc3R5bGU9e3N0eWxlfSBvbkNsaWNrPXtvbkNsaWNrfT5cbiAgICAgICAgICAgIDxSaWdodEFycm93SW1hZ2Ugc3JjPXtyaWdodEFycm93SWNvbn0gYWx0PVwiYXJyb3cgdG8gcmlnaHRcIiAvPlxuICAgICAgICA8L0J1dHRvbj5cbiAgICApO1xufVxuIl19 */"),H=(0,Z.css)({top:0,left:0,zIndex:0,backgroundImage:"url("+B.default+")",backgroundPosition:"top",backgroundRepeat:"no-repeat"},(0,l.default)({backgroundSize:["auto","cover"],paddingTop:[40,0],paddingBottom:[40,0]}),"label:wrapperWithBackgroundImageClass;","/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9iZXJuYXJkL1Byb2plY3RzL2hvb2xhL3NpdGUvc3JjL2NvbXBvbmVudHMvYWdlbmN5L3JlYWR5LW1hZGUtYXBwcy9yZWFkeS1tYWRlLWFwcHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBK0J3QyIsImZpbGUiOiIvVXNlcnMvYmVybmFyZC9Qcm9qZWN0cy9ob29sYS9zaXRlL3NyYy9jb21wb25lbnRzL2FnZW5jeS9yZWFkeS1tYWRlLWFwcHMvcmVhZHktbWFkZS1hcHBzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwicmVhY3QtZW1vdGlvblwiO1xuaW1wb3J0IFNsaWRlciBmcm9tIFwicmVhY3Qtc2xpY2tcIjtcbmltcG9ydCB0aGVtZSBmcm9tIFwiLi4vLi4vdXRpbHMvdGhlbWVcIjtcbmltcG9ydCBtcSBmcm9tIFwiLi4vLi4vdXRpbHMvYnJlYWtwb2ludHNcIjtcbmltcG9ydCB7IGNzcyB9IGZyb20gXCJlbW90aW9uXCI7XG5pbXBvcnQgQnV0dG9uIGZyb20gXCIuLi8uLi91aS9idXR0b25cIjtcbmltcG9ydCBDb250ZW50Q29udGFpbmVyIGZyb20gXCIuLi8uLi91aS9jb250ZW50LWNvbnRhaW5lclwiO1xuXG5pbXBvcnQgcHVycGxlQXJyb3dSaWdodCBmcm9tIFwiLi9hc3NldHMvcHVycGxlLWFycm93LXJpZ2h0LnN2Z1wiO1xuaW1wb3J0IHJlYWR5TWFkZUFwcHNCZyBmcm9tIFwiLi9hc3NldHMvcmVhZHktbWFkZS1hcHBzLWJnLnN2Z1wiO1xuaW1wb3J0IHJlYWR5TWFkZUFwcHNUaXRsZUJnIGZyb20gXCIuL2Fzc2V0cy9yZWFkeS1tYWRlLWFwcHMtdGl0bGUtYmcuc3ZnXCI7XG5pbXBvcnQgZGVtb0ljb24gZnJvbSBcIi4vYXNzZXRzL2RlbW8taWNvbi5zdmdcIjtcbmltcG9ydCBtYWNrQm9va0FpckZyYW1lIGZyb20gXCIuL2Fzc2V0cy9tYWNib29rLWFpci5zdmdcIjtcbmltcG9ydCByaWdodEFycm93SWNvbiBmcm9tIFwiLi9hc3NldHMvcmlnaHQtYXJyb3cuc3ZnXCI7XG5pbXBvcnQgbGVmdEFycm93SWNvbiBmcm9tIFwiLi9hc3NldHMvbGVmdC1hcnJvdy5zdmdcIjtcblxuaW1wb3J0IFwiLi9hc3NldHMvc2xpZGVyLmNzc1wiO1xuaW1wb3J0IGZpbGVNYW5hZ2VyIGZyb20gXCIuL2Fzc2V0cy9maWxlLW1hbmFnZXItdmlkZW8uZ2lmXCI7XG5pbXBvcnQgZm9ybUJ1aWxkZXIgZnJvbSBcIi4vYXNzZXRzL2Zvcm0tYnVpbGRlci12aWRlby5naWZcIjtcbmltcG9ydCBoZWFkbGVzc0NtcyBmcm9tIFwiLi9hc3NldHMvaGVhZGxlc3MtY21zLmdpZlwiO1xuaW1wb3J0IHBhZ2VCdWlsZGVyIGZyb20gXCIuL2Fzc2V0cy9wYWdlLWJ1aWxkZXItdmlkZW8uZ2lmXCI7XG5cbmNvbnN0IHdyYXBwZXJDbGFzcyA9IGNzcyhcbiAgICB7fSxcbiAgICBtcSh7XG4gICAgICAgIHBhZGRpbmdUb3A6IFs4MCwgMTQwXSxcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogWzQwLCA2MF0sXG4gICAgfSksXG4pO1xuXG5jb25zdCB3cmFwcGVyV2l0aEJhY2tncm91bmRJbWFnZUNsYXNzID0gY3NzKFxuICAgIHtcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICB6SW5kZXg6IDAsXG4gICAgICAgIGJhY2tncm91bmRJbWFnZTogXCJ1cmwoXCIgKyByZWFkeU1hZGVBcHBzQmcgKyBcIilcIixcbiAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiBcInRvcFwiLFxuICAgICAgICBiYWNrZ3JvdW5kUmVwZWF0OiBcIm5vLXJlcGVhdFwiLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogW1wiYXV0b1wiLCBcImNvdmVyXCJdLFxuICAgICAgICBwYWRkaW5nVG9wOiBbNDAsIDBdLFxuICAgICAgICBwYWRkaW5nQm90dG9tOiBbNDAsIDBdLFxuICAgIH0pLFxuKTtcblxuY29uc3QgY29udGVudENvbnRhaW5lckNsYXNzID0gY3NzKFxuICAgIHtcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgIG1heFdpZHRoOiAxMjAwLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICB3aWR0aDogW1wiMTAwJVwiLCBcIjEwMCVcIl0sXG4gICAgICAgIGhlaWdodDogW1wiMTAwJVwiXSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IFRleHRXcmFwcGVyID0gc3R5bGVkKFwiZGl2XCIpKHtcbiAgICBtYXhXaWR0aDogNzY4LFxuICAgIG1hcmdpbjogXCIwIGF1dG9cIixcbiAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG59KTtcblxuY29uc3QgVGl0bGUgPSBzdHlsZWQoXCJoMlwiKSh7XG4gICAgZm9udFNpemU6IHRoZW1lLmZvbnRTaXplLmgyLFxuICAgIGZvbnRXZWlnaHQ6IHRoZW1lLmZvbnRXZWlnaHQuYm9sZCxcbiAgICBjb2xvcjogdGhlbWUuY29sb3IuYmxhY2ssXG4gICAgdGV4dEFsaWduOiBcImNlbnRlclwiLFxuICAgIHBhZGRpbmdUb3A6IDAsXG4gICAgbWFyZ2luVG9wOiAwLFxuICAgIG1hcmdpbkJvdHRvbTogMjgsXG59KTtcblxuY29uc3QgSGlnaGxpZ2h0ZWRCZyA9IHN0eWxlZChcInNwYW5cIikoe1xuICAgIGJhY2tncm91bmRJbWFnZTogXCJ1cmwoXCIgKyByZWFkeU1hZGVBcHBzVGl0bGVCZyArIFwiKVwiLFxuICAgIGJhY2tncm91bmRQb3NpdGlvblg6IFwicmlnaHRcIixcbiAgICBiYWNrZ3JvdW5kUG9zaXRpb25ZOiBcImJvdHRvbVwiLFxuICAgIGJhY2tncm91bmRSZXBlYXQ6IFwibm8tcmVwZWF0XCIsXG59KTtcblxuY29uc3QgYXBwQ3RhQnV0dG9uQ2xhc3MgPSBjc3MoXG4gICAge1xuICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgICAgICBtYXJnaW5MZWZ0OiBcIi0yMHB4ICFpbXBvcnRhbnRcIixcbiAgICAgICAgdGV4dFRyYW5zZm9ybTogXCJ1cHBlcmNhc2VcIixcbiAgICAgICAgZm9udFdlaWdodDogdGhlbWUuZm9udFdlaWdodC5ib2xkLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwidHJhbnNwYXJlbnQgIWltcG9ydGFudFwiLFxuICAgICAgICBjb2xvcjogXCIjN0IzOUQ5ICFpbXBvcnRhbnRcIixcbiAgICAgICAgdGV4dERlY29yYXRpb246IFwidW5kZXJsaW5lICFpbXBvcnRhbnRcIixcbiAgICAgICAgdGV4dERlY29yYXRpb25Db2xvcjogXCIjN0IzOUQ5ICFpbXBvcnRhbnRcIixcbiAgICAgICAgXCImOmhvdmVyXCI6IHtcbiAgICAgICAgICAgIGJveFNoYWRvdzogXCJub25lICFpbXBvcnRhbnRcIixcbiAgICAgICAgICAgIFwiJiBpbWdcIjoge1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogXCJ0cmFuc2xhdGVYKDVweClcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIHdpZHRoOiBbXCIxNTBweCAhaW1wb3J0YW50XCJdLFxuICAgIH0pLFxuKTtcblxuY29uc3QgQXJyb3dSaWdodCA9IHN0eWxlZChcImltZ1wiKSh7XG4gICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICBtYXJnaW5MZWZ0OiA1LFxufSk7XG5cbmNvbnN0IGN0YUJ1dHRvbiA9IGNzcyhcbiAgICB7XG4gICAgICAgIHRleHRUcmFuc2Zvcm06IFwidXBwZXJjYXNlXCIsXG4gICAgICAgIHBhZGRpbmc6IFwiMTBweCAxMnB4ICFpbXBvcnRhbnRcIixcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgd2lkdGg6IFtcIjIzMHB4ICFpbXBvcnRhbnRcIl0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBEZW1vSWNvbiA9IHN0eWxlZChcImltZ1wiKShcbiAgICB7XG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIG1hcmdpblJpZ2h0OiA1LFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICBkaXNwbGF5OiBbXCJibG9ja1wiXSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IEFwcHNDb250YWluZXIgPSBzdHlsZWQoXCJkaXZcIikoXG4gICAge1xuICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgbWF4V2lkdGg6IDEyMDAsXG4gICAgICAgIG1hcmdpbjogXCIwIGF1dG9cIixcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgd2lkdGg6IFtcIjEwMCVcIiwgXCIxMDAlXCJdLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiBbXCJjb2x1bW5cIiwgXCJyb3dcIl0sXG4gICAgICAgIHBhZGRpbmdUb3A6IFs0MCwgMTQwXSxcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogWzQwLCAyNTBdLFxuICAgICAgICBwYWRkaW5nTGVmdDogWzAsIDI0XSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IHNsaWRlckNvbnRlbnRDbGFzcyA9IGNzcyhcbiAgICB7XG4gICAgICAgIGRpc3BsYXk6IFwiZmxleCAhaW1wb3J0YW50XCIsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIGFsaWduSXRlbXM6IFtcImNlbnRlclwiLCBcImZsZXgtc3RhcnRcIl0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBMZWZ0U2lkZSA9IHN0eWxlZChcImRpdlwiKShcbiAgICB7XG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIHdpZHRoOiBbXCIxMDAlXCIsIFwiMzAlXCJdLFxuICAgICAgICBtYXJnaW46IFtcIjAgYXV0byAxNXB4IGF1dG9cIiwgMF0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBSaWdodFNpZGUgPSBzdHlsZWQoXCJkaXZcIikoXG4gICAge1xuICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICB3aWR0aDogW1wiMTAwJVwiLCBcIjcwJVwiXSxcbiAgICAgICAgbWFyZ2luVG9wOiBbMCwgLTEyMF0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBBcHBUaXRsZSA9IHN0eWxlZChcImgyXCIpKFxuICAgIHtcbiAgICAgICAgZm9udFNpemU6IDQ4LFxuICAgICAgICBmb250V2VpZ2h0OiB0aGVtZS5mb250V2VpZ2h0LmJvbGQsXG4gICAgICAgIGNvbG9yOiB0aGVtZS5jb2xvci5ibGFjayxcbiAgICAgICAgcGFkZGluZ1RvcDogMCxcbiAgICAgICAgbWFyZ2luVG9wOiAwLFxuICAgICAgICBtYXJnaW5Cb3R0b206IDIwLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICB0ZXh0QWxpZ246IFtcImNlbnRlclwiLCBcImxlZnRcIl0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBBcHBEZXNjcmlwdGlvbiA9IHN0eWxlZChcImgyXCIpKFxuICAgIHtcbiAgICAgICAgZm9udFNpemU6IHRoZW1lLmZvbnRTaXplLnN1YlRleHQsXG4gICAgICAgIGZvbnRXZWlnaHQ6IHRoZW1lLmZvbnRXZWlnaHQubGlnaHQsXG4gICAgICAgIGNvbG9yOiB0aGVtZS5jb2xvci5ibGFjayxcbiAgICAgICAgcGFkZGluZ1RvcDogMCxcbiAgICAgICAgbWFyZ2luOiBcIjBweCAwcHggMjRweFwiLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICBtYXhXaWR0aDogWzMwMl0sXG4gICAgICAgIHRleHRBbGlnbjogW1wiY2VudGVyXCIsIFwibGVmdFwiXSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IERldmljZUZyYW1lID0gc3R5bGVkKFwiaW1nXCIpKFxuICAgIHtcbiAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBsZWZ0OiAwLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICB3aWR0aDogW1wiMTAwJVwiXSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IGxlZnRBcnJvd0NsYXNzID0gY3NzKFxuICAgIHtcbiAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgdG9wOiBcIjQwJVwiLFxuICAgICAgICBwYWRkaW5nOiBcIjBweCAhaW1wb3J0YW50XCIsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJ0cmFuc3BhcmVudCAhaW1wb3J0YW50XCIsXG4gICAgICAgIHpJbmRleDogNSxcbiAgICAgICAgXCImOmhvdmVyXCI6IHtcbiAgICAgICAgICAgIGJveFNoYWRvdzogXCJub25lICFpbXBvcnRhbnRcIixcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgZGlzcGxheTogW1wibm9uZSAhaW1wb3J0YW50XCIsIFwiYmxvY2sgIWltcG9ydGFudFwiXSxcbiAgICAgICAgd2lkdGg6IFtcIjMwcHggIWltcG9ydGFudFwiLCBcIjUwcHggIWltcG9ydGFudFwiXSxcbiAgICAgICAgbGVmdDogWzE1LCBcIi04JVwiLCBcIi0xNSVcIl0sXG4gICAgICAgIFwiQG1lZGlhIChtaW4td2lkdGg6IDEzNjZweClcIjoge1xuICAgICAgICAgICAgbGVmdDogXCItMTUlXCIsXG4gICAgICAgIH0sXG4gICAgfSksXG4pO1xuXG5jb25zdCByaWdodEFycm93Q2xhc3MgPSBjc3MoXG4gICAge1xuICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgICB0b3A6IFwiNDAlXCIsXG4gICAgICAgIHBhZGRpbmc6IFwiMHB4ICFpbXBvcnRhbnRcIixcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcInRyYW5zcGFyZW50ICFpbXBvcnRhbnRcIixcbiAgICAgICAgekluZGV4OiA1LFxuICAgICAgICBcIiY6aG92ZXJcIjoge1xuICAgICAgICAgICAgYm94U2hhZG93OiBcIm5vbmUgIWltcG9ydGFudFwiLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICBkaXNwbGF5OiBbXCJub25lICFpbXBvcnRhbnRcIiwgXCJibG9jayAhaW1wb3J0YW50XCJdLFxuICAgICAgICB3aWR0aDogW1wiMzBweCAhaW1wb3J0YW50XCIsIFwiNTBweCAhaW1wb3J0YW50XCJdLFxuICAgICAgICByaWdodDogWzE1LCBcIi04JVwiLCBcIi0xNSVcIl0sXG4gICAgICAgIFwiQG1lZGlhIChtaW4td2lkdGg6IDEzNjZweClcIjoge1xuICAgICAgICAgICAgcmlnaHQ6IFwiLTE1JVwiLFxuICAgICAgICB9LFxuICAgIH0pLFxuKTtcblxuY29uc3QgTGVmdEFycm93SW1hZ2UgPSBzdHlsZWQoXCJpbWdcIikoe1xuICAgIHdpZHRoOiBcIjEwMCVcIixcbn0pO1xuXG5jb25zdCBSaWdodEFycm93SW1hZ2UgPSBzdHlsZWQoXCJpbWdcIikoe1xuICAgIHdpZHRoOiBcIjEwMCVcIixcbn0pO1xuXG5jb25zdCB3ZWJpbnlBcHBzTGlzdCA9IGNzcyhcbiAgICB7XG4gICAgICAgIG1heFdpZHRoOiBcIjEwMHZ3XCIsXG4gICAgICAgIG92ZXJmbG93WDogXCJoaWRkZW5cIixcbiAgICAgICAgXCIuc2xpY2stbGlzdFwiOiB7XG4gICAgICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgbXEoe30pLFxuKTtcblxuY29uc3Qgd2ViaW55QXBwc0ltYWdlID0gY3NzKFxuICAgIHtcbiAgICAgICAgbWF4V2lkdGg6IFwiNTgwcHhcIixcbiAgICAgICAgb3ZlcmZsb3c6IFwidmlzaWJsZVwiLFxuICAgICAgICBwYWRkaW5nQm90dG9tOiAyMCxcbiAgICAgICAgbWFyZ2luOiBcIjAgYXV0b1wiLFxuICAgICAgICBcIi5zbGljay1saXN0XCI6IHtcbiAgICAgICAgICAgIGhlaWdodDogMzI0LFxuICAgICAgICAgICAgbWF4V2lkdGg6IFwiNTgwcHhcIixcbiAgICAgICAgfSxcbiAgICAgICAgXCIuc2xpY2stc2xpZGVcIjoge1xuICAgICAgICAgICAgb3V0bGluZTogMCxcbiAgICAgICAgICAgIGJveFNpemluZzogXCJib3JkZXItYm94XCIsXG4gICAgICAgICAgICBkaXY6IHtcbiAgICAgICAgICAgICAgICBvdXRsaW5lOiAwLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGltZzoge1xuICAgICAgICAgICAgICAgIG91dGxpbmU6IDAsXG4gICAgICAgICAgICAgICAgYm94U2hhZG93OiBcIjAgNXB4IDEwcHggMCByZ2JhKDAsMCwwLDAuMTUpXCIsXG4gICAgICAgICAgICAgICAgLy9oZWlnaHQ6IFwiMzUwcHggIWltcG9ydGFudFwiLFxuICAgICAgICAgICAgICAgIG1hcmdpbjogXCIwIGF1dG9cIixcbiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IDUsXG4gICAgICAgICAgICAgICAgYm94U2l6aW5nOiBcImJvcmRlci1ib3hcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIFwiLnNsaWNrLWRvdHNcIjoge1xuICAgICAgICAgICAgekluZGV4OiAxMCxcbiAgICAgICAgICAgIFwibGkgYnV0dG9uOmJlZm9yZVwiOiB7XG4gICAgICAgICAgICAgICAgZm9udFNpemU6IDMwLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgaGVpZ2h0OiBbXCJhdXRvXCIsIDMyNF0sXG4gICAgICAgIFwiLnNsaWNrLWxpc3RcIjoge1xuICAgICAgICAgICAgaGVpZ2h0OiBbXCJhdXRvXCIsIDMyNF0sXG4gICAgICAgICAgICBtYXhXaWR0aDogXCI1ODBweFwiLFxuICAgICAgICB9LFxuICAgICAgICBcIi5zbGljay1zbGlkZVwiOiB7XG4gICAgICAgICAgICB3aWR0aDogW1wiMTAwJVwiLCBcIjEwMCVcIl0sXG4gICAgICAgICAgICBwYWRkaW5nOiAxMCxcbiAgICAgICAgICAgIG1hcmdpbjogMCxcbiAgICAgICAgICAgIGltZzoge1xuICAgICAgICAgICAgICAgIHdpZHRoOiBbXCI4MCVcIiwgXCI5MCVcIl0sXG4gICAgICAgICAgICAgICAgbWluSGVpZ2h0OiBbXCJhdXRvXCIsIFwiYXV0b1wiXSxcbiAgICAgICAgICAgICAgICBtaW5XaWR0aDogW1wiYXV0b1wiLCBcImF1dG9cIl0sXG4gICAgICAgICAgICAgICAgbWFyZ2luTGVmdDogW1wiMTglXCIsIFwiMTAlXCJdLFxuICAgICAgICAgICAgICAgIG1hcmdpblRvcDogW1wiMFwiLCBcIjMlXCJdLFxuICAgICAgICAgICAgICAgIFwiQG1lZGlhIChtaW4td2lkdGg6IDc2OHB4KVwiOiB7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luTGVmdDogXCI1JVwiLFxuICAgICAgICAgICAgICAgICAgICBtYXJnaW5Ub3A6IFwiMyVcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFwiQG1lZGlhIChtaW4td2lkdGg6IDEwMjRweClcIjoge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogXCI5MCVcIixcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luTGVmdDogXCIxMCVcIixcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luVG9wOiBcIjMlXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcIkBtZWRpYSAobWluLXdpZHRoOiAxMzM2cHgpXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDU2MCxcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luTGVmdDogMCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgXCIuc2xpY2stZG90c1wiOiB7XG4gICAgICAgICAgICBwb3NpdGlvbjogW1wiYWJzb2x1dGVcIiwgXCJyZWxhdGl2ZVwiXSxcbiAgICAgICAgICAgIGJvdHRvbTogW1wiLTEwJVwiLCBcIi0yNSVcIl0sXG4gICAgICAgIH0sXG4gICAgfSksXG4pO1xuXG5jbGFzcyBSZWFkeU1hZGVBcHBzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBjb250ZW50TmF2OiBudWxsLFxuICAgICAgICAgICAgaW1hZ2VOYXY6IG51bGwsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgY29udGVudE5hdjogdGhpcy5zbGlkZXIxLFxuICAgICAgICAgICAgaW1hZ2VOYXY6IHRoaXMuc2xpZGVyMixcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7IGhhbmRsZURlbW9DbGljaywgZGVtb0xpbmssIC4uLnJlc3RQcm9wcyB9ID0gdGhpcy5wcm9wcztcblxuICAgICAgICBjb25zdCBidXR0b25Qcm9wcyA9IHt9O1xuICAgICAgICBpZiAoZGVtb0xpbmspIHtcbiAgICAgICAgICAgIGJ1dHRvblByb3BzLmxpbmsgPSBkZW1vTGluaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFuZGxlRGVtb0NsaWNrKSB7XG4gICAgICAgICAgICBidXR0b25Qcm9wcy5vbkNsaWNrID0gaGFuZGxlRGVtb0NsaWNrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgICAgICA8c2VjdGlvbiB7Li4ucmVzdFByb3BzfSBjbGFzc05hbWU9e3dyYXBwZXJDbGFzc30+XG4gICAgICAgICAgICAgICAgICAgIDxDb250ZW50Q29udGFpbmVyIGNsYXNzTmFtZT17Y29udGVudENvbnRhaW5lckNsYXNzfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0V3JhcHBlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGl0bGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhvb2xhIEFJIGNvbWVzIHdpdGggPEhpZ2hsaWdodGVkQmc+IHNldmVyYWwgRlJFRSA8L0hpZ2hsaWdodGVkQmc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWR5LW1hZGUgYXBwcyB5b3UgY2FuIHVzZSB0b2RheTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1RpdGxlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHshdGhpcy5wcm9wcy5jdGEgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGNsYXNzTmFtZT17Y3RhQnV0dG9ufSB0eXBlPVwic2Vjb25kYXJ5XCIgey4uLmJ1dHRvblByb3BzfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxEZW1vSWNvbiBzcmM9e2RlbW9JY29ufSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2NoZWR1bGUgYSAxOjEgRGVtb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9UZXh0V3JhcHBlcj5cbiAgICAgICAgICAgICAgICAgICAgPC9Db250ZW50Q29udGFpbmVyPlxuICAgICAgICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgICAgICAgICA8c2VjdGlvbiB7Li4ucmVzdFByb3BzfSBjbGFzc05hbWU9e3dyYXBwZXJXaXRoQmFja2dyb3VuZEltYWdlQ2xhc3N9PlxuICAgICAgICAgICAgICAgICAgICA8QXBwc0NvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMZWZ0U2lkZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2xpZGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzTmF2Rm9yPXt0aGlzLnN0YXRlLmNvbnRlbnROYXZ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZj17c2xpZGVyID0+ICh0aGlzLnNsaWRlcjIgPSBzbGlkZXIpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c9ezF9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRlck1vZGU9e2ZhbHNlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXJQYWRkaW5nPXsyNX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpcGVUb1NsaWRlPXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb2N1c09uU2VsZWN0PXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3dlYmlueUFwcHNMaXN0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zaXZlPXtbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludDogMTAyNCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXJQYWRkaW5nOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXJNb2RlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDYwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXJQYWRkaW5nOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXJNb2RlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDQ4MCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXJQYWRkaW5nOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXJNb2RlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3NsaWRlckNvbnRlbnRDbGFzc30+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QXBwVGl0bGU+SGVhZGxlc3MgQ01TPC9BcHBUaXRsZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxBcHBEZXNjcmlwdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHcmFwaFFMIGJhc2VkIGhlYWRsZXNzIENNUyB3aXRoIHBvd2VyZnVsIGNvbnRlbnQgbW9kZWxpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlcy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQXBwRGVzY3JpcHRpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXthcHBDdGFCdXR0b25DbGFzc31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rPVwiL3NlcnZlcmxlc3MtYXBwL2hlYWRsZXNzLWNtc1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImRlZmF1bHRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTGVhcm4gbW9yZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxBcnJvd1JpZ2h0IHNyYz17cHVycGxlQXJyb3dSaWdodH0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3NsaWRlckNvbnRlbnRDbGFzc30+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QXBwVGl0bGU+UGFnZSBCdWlsZGVyPC9BcHBUaXRsZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxBcHBEZXNjcmlwdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCdWlsZCBzdHVubmluZyBsYW5kaW5nIHBhZ2VzIHdpdGggYW4gZWFzeSB0byB1c2UgZHJhZyZkcm9wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0FwcERlc2NyaXB0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YXBwQ3RhQnV0dG9uQ2xhc3N9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluaz1cIi9zZXJ2ZXJsZXNzLWFwcC9wYWdlLWJ1aWxkZXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJkZWZhdWx0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExlYXJuIG1vcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QXJyb3dSaWdodCBzcmM9e3B1cnBsZUFycm93UmlnaHR9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzbGlkZXJDb250ZW50Q2xhc3N9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEFwcFRpdGxlPkZvcm0gQnVpbGRlcjwvQXBwVGl0bGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QXBwRGVzY3JpcHRpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3JlYXRlIGZvcm1zIHVzaW5nIGEgZHJhZyZkcm9wIGludGVyZmFjZSBhbmQgdHJhY2sgaG93IHRoZXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJ0LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9BcHBEZXNjcmlwdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2FwcEN0YUJ1dHRvbkNsYXNzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbms9XCIvc2VydmVybGVzcy1hcHAvZm9ybS1idWlsZGVyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiZGVmYXVsdFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMZWFybiBtb3JlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEFycm93UmlnaHQgc3JjPXtwdXJwbGVBcnJvd1JpZ2h0fSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c2xpZGVyQ29udGVudENsYXNzfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxBcHBUaXRsZT5GaWxlIE1hbmFnZXI8L0FwcFRpdGxlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEFwcERlc2NyaXB0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwbG9hZCwgY2F0ZWdvcml6ZSwgc2VhcmNoIGFuZCBlZGl0IHlvdXIgZmlsZXMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0FwcERlc2NyaXB0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YXBwQ3RhQnV0dG9uQ2xhc3N9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluaz1cIi9zZXJ2ZXJsZXNzLWFwcC9maWxlLW1hbmFnZXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJkZWZhdWx0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExlYXJuIG1vcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QXJyb3dSaWdodCBzcmM9e3B1cnBsZUFycm93UmlnaHR9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9TbGlkZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0xlZnRTaWRlPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFJpZ2h0U2lkZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RGV2aWNlRnJhbWUgc3JjPXttYWNrQm9va0FpckZyYW1lfSBhbHQ9XCJtYWNib29rXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2xpZGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzTmF2Rm9yPXt0aGlzLnN0YXRlLmltYWdlTmF2fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY9e3NsaWRlciA9PiAodGhpcy5zbGlkZXIxID0gc2xpZGVyKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG90cz17dHJ1ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXt3ZWJpbnlBcHBzSW1hZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdz17MX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVyTW9kZT17dHJ1ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVyUGFkZGluZz17MjV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhZGU9e3RydWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZBcnJvdz17PFByZXZBcnJvdyAvPn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dEFycm93PXs8TmV4dEFycm93IC8+fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtoZWFkbGVzc0Ntc30gYWx0PVwiSG9vbGEgQUkgU2VydmVybGVzcyBIZWFkbGVzcyBDTVNcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtwYWdlQnVpbGRlcn0gYWx0PVwiSG9vbGEgQUkgU2VydmVybGVzcyBQYWdlIEJ1aWxkZXJcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtmb3JtQnVpbGRlcn0gYWx0PVwiSG9vbGEgQUkgU2VydmVybGVzcyBGb3JtIEJ1aWxkZXJcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtmaWxlTWFuYWdlcn0gYWx0PVwiSG9vbGEgQUkgU2VydmVybGVzcyBGaWxlIE1hbmFnZXJcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1NsaWRlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvUmlnaHRTaWRlPlxuICAgICAgICAgICAgICAgICAgICA8L0FwcHNDb250YWluZXI+XG4gICAgICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlYWR5TWFkZUFwcHM7XG5cbmZ1bmN0aW9uIFByZXZBcnJvdyhwcm9wcykge1xuICAgIGNvbnN0IHsgc3R5bGUsIG9uQ2xpY2sgfSA9IHByb3BzO1xuICAgIHJldHVybiAoXG4gICAgICAgIDxCdXR0b24gdHlwZT1cImRlZmF1bHRcIiBjbGFzc05hbWU9e2xlZnRBcnJvd0NsYXNzfSBzdHlsZT17c3R5bGV9IG9uQ2xpY2s9e29uQ2xpY2t9PlxuICAgICAgICAgICAgPExlZnRBcnJvd0ltYWdlIHNyYz17bGVmdEFycm93SWNvbn0gYWx0PVwiYXJyb3cgdG8gbGVmdFwiIC8+XG4gICAgICAgIDwvQnV0dG9uPlxuICAgICk7XG59XG5cbmZ1bmN0aW9uIE5leHRBcnJvdyhwcm9wcykge1xuICAgIGNvbnN0IHsgc3R5bGUsIG9uQ2xpY2sgfSA9IHByb3BzO1xuICAgIHJldHVybiAoXG4gICAgICAgIDxCdXR0b24gdHlwZT1cImRlZmF1bHRcIiBjbGFzc05hbWU9e3JpZ2h0QXJyb3dDbGFzc30gc3R5bGU9e3N0eWxlfSBvbkNsaWNrPXtvbkNsaWNrfT5cbiAgICAgICAgICAgIDxSaWdodEFycm93SW1hZ2Ugc3JjPXtyaWdodEFycm93SWNvbn0gYWx0PVwiYXJyb3cgdG8gcmlnaHRcIiAvPlxuICAgICAgICA8L0J1dHRvbj5cbiAgICApO1xufVxuIl19 */"),h=(0,Z.css)({display:"flex",flexDirection:"column",alignItems:"center",maxWidth:1200},(0,l.default)({width:["100%","100%"],height:["100%"]}),"label:contentContainerClass;","/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),n=(0,G.default)("div",{target:"e1xjmg8m0",label:"TextWrapper"})({maxWidth:768,margin:"0 auto",display:"flex",flexDirection:"column",alignItems:"center"},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),s=(0,G.default)("h2",{target:"e1xjmg8m1",label:"Title"})({fontSize:i.default.fontSize.h2,fontWeight:i.default.fontWeight.bold,color:i.default.color.black,textAlign:"center",paddingTop:0,marginTop:0,marginBottom:28},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),t=(0,G.default)("span",{target:"e1xjmg8m2",label:"HighlightedBg"})({backgroundImage:"url("+F.default+")",backgroundPositionX:"right",backgroundPositionY:"bottom",backgroundRepeat:"no-repeat"},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9iZXJuYXJkL1Byb2plY3RzL2hvb2xhL3NpdGUvc3JjL2NvbXBvbmVudHMvYWdlbmN5L3JlYWR5LW1hZGUtYXBwcy9yZWFkeS1tYWRlLWFwcHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBOEVzQiIsImZpbGUiOiIvVXNlcnMvYmVybmFyZC9Qcm9qZWN0cy9ob29sYS9zaXRlL3NyYy9jb21wb25lbnRzL2FnZW5jeS9yZWFkeS1tYWRlLWFwcHMvcmVhZHktbWFkZS1hcHBzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwicmVhY3QtZW1vdGlvblwiO1xuaW1wb3J0IFNsaWRlciBmcm9tIFwicmVhY3Qtc2xpY2tcIjtcbmltcG9ydCB0aGVtZSBmcm9tIFwiLi4vLi4vdXRpbHMvdGhlbWVcIjtcbmltcG9ydCBtcSBmcm9tIFwiLi4vLi4vdXRpbHMvYnJlYWtwb2ludHNcIjtcbmltcG9ydCB7IGNzcyB9IGZyb20gXCJlbW90aW9uXCI7XG5pbXBvcnQgQnV0dG9uIGZyb20gXCIuLi8uLi91aS9idXR0b25cIjtcbmltcG9ydCBDb250ZW50Q29udGFpbmVyIGZyb20gXCIuLi8uLi91aS9jb250ZW50LWNvbnRhaW5lclwiO1xuXG5pbXBvcnQgcHVycGxlQXJyb3dSaWdodCBmcm9tIFwiLi9hc3NldHMvcHVycGxlLWFycm93LXJpZ2h0LnN2Z1wiO1xuaW1wb3J0IHJlYWR5TWFkZUFwcHNCZyBmcm9tIFwiLi9hc3NldHMvcmVhZHktbWFkZS1hcHBzLWJnLnN2Z1wiO1xuaW1wb3J0IHJlYWR5TWFkZUFwcHNUaXRsZUJnIGZyb20gXCIuL2Fzc2V0cy9yZWFkeS1tYWRlLWFwcHMtdGl0bGUtYmcuc3ZnXCI7XG5pbXBvcnQgZGVtb0ljb24gZnJvbSBcIi4vYXNzZXRzL2RlbW8taWNvbi5zdmdcIjtcbmltcG9ydCBtYWNrQm9va0FpckZyYW1lIGZyb20gXCIuL2Fzc2V0cy9tYWNib29rLWFpci5zdmdcIjtcbmltcG9ydCByaWdodEFycm93SWNvbiBmcm9tIFwiLi9hc3NldHMvcmlnaHQtYXJyb3cuc3ZnXCI7XG5pbXBvcnQgbGVmdEFycm93SWNvbiBmcm9tIFwiLi9hc3NldHMvbGVmdC1hcnJvdy5zdmdcIjtcblxuaW1wb3J0IFwiLi9hc3NldHMvc2xpZGVyLmNzc1wiO1xuaW1wb3J0IGZpbGVNYW5hZ2VyIGZyb20gXCIuL2Fzc2V0cy9maWxlLW1hbmFnZXItdmlkZW8uZ2lmXCI7XG5pbXBvcnQgZm9ybUJ1aWxkZXIgZnJvbSBcIi4vYXNzZXRzL2Zvcm0tYnVpbGRlci12aWRlby5naWZcIjtcbmltcG9ydCBoZWFkbGVzc0NtcyBmcm9tIFwiLi9hc3NldHMvaGVhZGxlc3MtY21zLmdpZlwiO1xuaW1wb3J0IHBhZ2VCdWlsZGVyIGZyb20gXCIuL2Fzc2V0cy9wYWdlLWJ1aWxkZXItdmlkZW8uZ2lmXCI7XG5cbmNvbnN0IHdyYXBwZXJDbGFzcyA9IGNzcyhcbiAgICB7fSxcbiAgICBtcSh7XG4gICAgICAgIHBhZGRpbmdUb3A6IFs4MCwgMTQwXSxcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogWzQwLCA2MF0sXG4gICAgfSksXG4pO1xuXG5jb25zdCB3cmFwcGVyV2l0aEJhY2tncm91bmRJbWFnZUNsYXNzID0gY3NzKFxuICAgIHtcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICB6SW5kZXg6IDAsXG4gICAgICAgIGJhY2tncm91bmRJbWFnZTogXCJ1cmwoXCIgKyByZWFkeU1hZGVBcHBzQmcgKyBcIilcIixcbiAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiBcInRvcFwiLFxuICAgICAgICBiYWNrZ3JvdW5kUmVwZWF0OiBcIm5vLXJlcGVhdFwiLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogW1wiYXV0b1wiLCBcImNvdmVyXCJdLFxuICAgICAgICBwYWRkaW5nVG9wOiBbNDAsIDBdLFxuICAgICAgICBwYWRkaW5nQm90dG9tOiBbNDAsIDBdLFxuICAgIH0pLFxuKTtcblxuY29uc3QgY29udGVudENvbnRhaW5lckNsYXNzID0gY3NzKFxuICAgIHtcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgIG1heFdpZHRoOiAxMjAwLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICB3aWR0aDogW1wiMTAwJVwiLCBcIjEwMCVcIl0sXG4gICAgICAgIGhlaWdodDogW1wiMTAwJVwiXSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IFRleHRXcmFwcGVyID0gc3R5bGVkKFwiZGl2XCIpKHtcbiAgICBtYXhXaWR0aDogNzY4LFxuICAgIG1hcmdpbjogXCIwIGF1dG9cIixcbiAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG59KTtcblxuY29uc3QgVGl0bGUgPSBzdHlsZWQoXCJoMlwiKSh7XG4gICAgZm9udFNpemU6IHRoZW1lLmZvbnRTaXplLmgyLFxuICAgIGZvbnRXZWlnaHQ6IHRoZW1lLmZvbnRXZWlnaHQuYm9sZCxcbiAgICBjb2xvcjogdGhlbWUuY29sb3IuYmxhY2ssXG4gICAgdGV4dEFsaWduOiBcImNlbnRlclwiLFxuICAgIHBhZGRpbmdUb3A6IDAsXG4gICAgbWFyZ2luVG9wOiAwLFxuICAgIG1hcmdpbkJvdHRvbTogMjgsXG59KTtcblxuY29uc3QgSGlnaGxpZ2h0ZWRCZyA9IHN0eWxlZChcInNwYW5cIikoe1xuICAgIGJhY2tncm91bmRJbWFnZTogXCJ1cmwoXCIgKyByZWFkeU1hZGVBcHBzVGl0bGVCZyArIFwiKVwiLFxuICAgIGJhY2tncm91bmRQb3NpdGlvblg6IFwicmlnaHRcIixcbiAgICBiYWNrZ3JvdW5kUG9zaXRpb25ZOiBcImJvdHRvbVwiLFxuICAgIGJhY2tncm91bmRSZXBlYXQ6IFwibm8tcmVwZWF0XCIsXG59KTtcblxuY29uc3QgYXBwQ3RhQnV0dG9uQ2xhc3MgPSBjc3MoXG4gICAge1xuICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgICAgICBtYXJnaW5MZWZ0OiBcIi0yMHB4ICFpbXBvcnRhbnRcIixcbiAgICAgICAgdGV4dFRyYW5zZm9ybTogXCJ1cHBlcmNhc2VcIixcbiAgICAgICAgZm9udFdlaWdodDogdGhlbWUuZm9udFdlaWdodC5ib2xkLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwidHJhbnNwYXJlbnQgIWltcG9ydGFudFwiLFxuICAgICAgICBjb2xvcjogXCIjN0IzOUQ5ICFpbXBvcnRhbnRcIixcbiAgICAgICAgdGV4dERlY29yYXRpb246IFwidW5kZXJsaW5lICFpbXBvcnRhbnRcIixcbiAgICAgICAgdGV4dERlY29yYXRpb25Db2xvcjogXCIjN0IzOUQ5ICFpbXBvcnRhbnRcIixcbiAgICAgICAgXCImOmhvdmVyXCI6IHtcbiAgICAgICAgICAgIGJveFNoYWRvdzogXCJub25lICFpbXBvcnRhbnRcIixcbiAgICAgICAgICAgIFwiJiBpbWdcIjoge1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogXCJ0cmFuc2xhdGVYKDVweClcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIHdpZHRoOiBbXCIxNTBweCAhaW1wb3J0YW50XCJdLFxuICAgIH0pLFxuKTtcblxuY29uc3QgQXJyb3dSaWdodCA9IHN0eWxlZChcImltZ1wiKSh7XG4gICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICBtYXJnaW5MZWZ0OiA1LFxufSk7XG5cbmNvbnN0IGN0YUJ1dHRvbiA9IGNzcyhcbiAgICB7XG4gICAgICAgIHRleHRUcmFuc2Zvcm06IFwidXBwZXJjYXNlXCIsXG4gICAgICAgIHBhZGRpbmc6IFwiMTBweCAxMnB4ICFpbXBvcnRhbnRcIixcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgd2lkdGg6IFtcIjIzMHB4ICFpbXBvcnRhbnRcIl0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBEZW1vSWNvbiA9IHN0eWxlZChcImltZ1wiKShcbiAgICB7XG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIG1hcmdpblJpZ2h0OiA1LFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICBkaXNwbGF5OiBbXCJibG9ja1wiXSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IEFwcHNDb250YWluZXIgPSBzdHlsZWQoXCJkaXZcIikoXG4gICAge1xuICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgbWF4V2lkdGg6IDEyMDAsXG4gICAgICAgIG1hcmdpbjogXCIwIGF1dG9cIixcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgd2lkdGg6IFtcIjEwMCVcIiwgXCIxMDAlXCJdLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiBbXCJjb2x1bW5cIiwgXCJyb3dcIl0sXG4gICAgICAgIHBhZGRpbmdUb3A6IFs0MCwgMTQwXSxcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogWzQwLCAyNTBdLFxuICAgICAgICBwYWRkaW5nTGVmdDogWzAsIDI0XSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IHNsaWRlckNvbnRlbnRDbGFzcyA9IGNzcyhcbiAgICB7XG4gICAgICAgIGRpc3BsYXk6IFwiZmxleCAhaW1wb3J0YW50XCIsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIGFsaWduSXRlbXM6IFtcImNlbnRlclwiLCBcImZsZXgtc3RhcnRcIl0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBMZWZ0U2lkZSA9IHN0eWxlZChcImRpdlwiKShcbiAgICB7XG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIHdpZHRoOiBbXCIxMDAlXCIsIFwiMzAlXCJdLFxuICAgICAgICBtYXJnaW46IFtcIjAgYXV0byAxNXB4IGF1dG9cIiwgMF0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBSaWdodFNpZGUgPSBzdHlsZWQoXCJkaXZcIikoXG4gICAge1xuICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICB3aWR0aDogW1wiMTAwJVwiLCBcIjcwJVwiXSxcbiAgICAgICAgbWFyZ2luVG9wOiBbMCwgLTEyMF0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBBcHBUaXRsZSA9IHN0eWxlZChcImgyXCIpKFxuICAgIHtcbiAgICAgICAgZm9udFNpemU6IDQ4LFxuICAgICAgICBmb250V2VpZ2h0OiB0aGVtZS5mb250V2VpZ2h0LmJvbGQsXG4gICAgICAgIGNvbG9yOiB0aGVtZS5jb2xvci5ibGFjayxcbiAgICAgICAgcGFkZGluZ1RvcDogMCxcbiAgICAgICAgbWFyZ2luVG9wOiAwLFxuICAgICAgICBtYXJnaW5Cb3R0b206IDIwLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICB0ZXh0QWxpZ246IFtcImNlbnRlclwiLCBcImxlZnRcIl0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBBcHBEZXNjcmlwdGlvbiA9IHN0eWxlZChcImgyXCIpKFxuICAgIHtcbiAgICAgICAgZm9udFNpemU6IHRoZW1lLmZvbnRTaXplLnN1YlRleHQsXG4gICAgICAgIGZvbnRXZWlnaHQ6IHRoZW1lLmZvbnRXZWlnaHQubGlnaHQsXG4gICAgICAgIGNvbG9yOiB0aGVtZS5jb2xvci5ibGFjayxcbiAgICAgICAgcGFkZGluZ1RvcDogMCxcbiAgICAgICAgbWFyZ2luOiBcIjBweCAwcHggMjRweFwiLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICBtYXhXaWR0aDogWzMwMl0sXG4gICAgICAgIHRleHRBbGlnbjogW1wiY2VudGVyXCIsIFwibGVmdFwiXSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IERldmljZUZyYW1lID0gc3R5bGVkKFwiaW1nXCIpKFxuICAgIHtcbiAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBsZWZ0OiAwLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICB3aWR0aDogW1wiMTAwJVwiXSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IGxlZnRBcnJvd0NsYXNzID0gY3NzKFxuICAgIHtcbiAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgdG9wOiBcIjQwJVwiLFxuICAgICAgICBwYWRkaW5nOiBcIjBweCAhaW1wb3J0YW50XCIsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJ0cmFuc3BhcmVudCAhaW1wb3J0YW50XCIsXG4gICAgICAgIHpJbmRleDogNSxcbiAgICAgICAgXCImOmhvdmVyXCI6IHtcbiAgICAgICAgICAgIGJveFNoYWRvdzogXCJub25lICFpbXBvcnRhbnRcIixcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgZGlzcGxheTogW1wibm9uZSAhaW1wb3J0YW50XCIsIFwiYmxvY2sgIWltcG9ydGFudFwiXSxcbiAgICAgICAgd2lkdGg6IFtcIjMwcHggIWltcG9ydGFudFwiLCBcIjUwcHggIWltcG9ydGFudFwiXSxcbiAgICAgICAgbGVmdDogWzE1LCBcIi04JVwiLCBcIi0xNSVcIl0sXG4gICAgICAgIFwiQG1lZGlhIChtaW4td2lkdGg6IDEzNjZweClcIjoge1xuICAgICAgICAgICAgbGVmdDogXCItMTUlXCIsXG4gICAgICAgIH0sXG4gICAgfSksXG4pO1xuXG5jb25zdCByaWdodEFycm93Q2xhc3MgPSBjc3MoXG4gICAge1xuICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgICB0b3A6IFwiNDAlXCIsXG4gICAgICAgIHBhZGRpbmc6IFwiMHB4ICFpbXBvcnRhbnRcIixcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcInRyYW5zcGFyZW50ICFpbXBvcnRhbnRcIixcbiAgICAgICAgekluZGV4OiA1LFxuICAgICAgICBcIiY6aG92ZXJcIjoge1xuICAgICAgICAgICAgYm94U2hhZG93OiBcIm5vbmUgIWltcG9ydGFudFwiLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICBkaXNwbGF5OiBbXCJub25lICFpbXBvcnRhbnRcIiwgXCJibG9jayAhaW1wb3J0YW50XCJdLFxuICAgICAgICB3aWR0aDogW1wiMzBweCAhaW1wb3J0YW50XCIsIFwiNTBweCAhaW1wb3J0YW50XCJdLFxuICAgICAgICByaWdodDogWzE1LCBcIi04JVwiLCBcIi0xNSVcIl0sXG4gICAgICAgIFwiQG1lZGlhIChtaW4td2lkdGg6IDEzNjZweClcIjoge1xuICAgICAgICAgICAgcmlnaHQ6IFwiLTE1JVwiLFxuICAgICAgICB9LFxuICAgIH0pLFxuKTtcblxuY29uc3QgTGVmdEFycm93SW1hZ2UgPSBzdHlsZWQoXCJpbWdcIikoe1xuICAgIHdpZHRoOiBcIjEwMCVcIixcbn0pO1xuXG5jb25zdCBSaWdodEFycm93SW1hZ2UgPSBzdHlsZWQoXCJpbWdcIikoe1xuICAgIHdpZHRoOiBcIjEwMCVcIixcbn0pO1xuXG5jb25zdCB3ZWJpbnlBcHBzTGlzdCA9IGNzcyhcbiAgICB7XG4gICAgICAgIG1heFdpZHRoOiBcIjEwMHZ3XCIsXG4gICAgICAgIG92ZXJmbG93WDogXCJoaWRkZW5cIixcbiAgICAgICAgXCIuc2xpY2stbGlzdFwiOiB7XG4gICAgICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgbXEoe30pLFxuKTtcblxuY29uc3Qgd2ViaW55QXBwc0ltYWdlID0gY3NzKFxuICAgIHtcbiAgICAgICAgbWF4V2lkdGg6IFwiNTgwcHhcIixcbiAgICAgICAgb3ZlcmZsb3c6IFwidmlzaWJsZVwiLFxuICAgICAgICBwYWRkaW5nQm90dG9tOiAyMCxcbiAgICAgICAgbWFyZ2luOiBcIjAgYXV0b1wiLFxuICAgICAgICBcIi5zbGljay1saXN0XCI6IHtcbiAgICAgICAgICAgIGhlaWdodDogMzI0LFxuICAgICAgICAgICAgbWF4V2lkdGg6IFwiNTgwcHhcIixcbiAgICAgICAgfSxcbiAgICAgICAgXCIuc2xpY2stc2xpZGVcIjoge1xuICAgICAgICAgICAgb3V0bGluZTogMCxcbiAgICAgICAgICAgIGJveFNpemluZzogXCJib3JkZXItYm94XCIsXG4gICAgICAgICAgICBkaXY6IHtcbiAgICAgICAgICAgICAgICBvdXRsaW5lOiAwLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGltZzoge1xuICAgICAgICAgICAgICAgIG91dGxpbmU6IDAsXG4gICAgICAgICAgICAgICAgYm94U2hhZG93OiBcIjAgNXB4IDEwcHggMCByZ2JhKDAsMCwwLDAuMTUpXCIsXG4gICAgICAgICAgICAgICAgLy9oZWlnaHQ6IFwiMzUwcHggIWltcG9ydGFudFwiLFxuICAgICAgICAgICAgICAgIG1hcmdpbjogXCIwIGF1dG9cIixcbiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IDUsXG4gICAgICAgICAgICAgICAgYm94U2l6aW5nOiBcImJvcmRlci1ib3hcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIFwiLnNsaWNrLWRvdHNcIjoge1xuICAgICAgICAgICAgekluZGV4OiAxMCxcbiAgICAgICAgICAgIFwibGkgYnV0dG9uOmJlZm9yZVwiOiB7XG4gICAgICAgICAgICAgICAgZm9udFNpemU6IDMwLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgaGVpZ2h0OiBbXCJhdXRvXCIsIDMyNF0sXG4gICAgICAgIFwiLnNsaWNrLWxpc3RcIjoge1xuICAgICAgICAgICAgaGVpZ2h0OiBbXCJhdXRvXCIsIDMyNF0sXG4gICAgICAgICAgICBtYXhXaWR0aDogXCI1ODBweFwiLFxuICAgICAgICB9LFxuICAgICAgICBcIi5zbGljay1zbGlkZVwiOiB7XG4gICAgICAgICAgICB3aWR0aDogW1wiMTAwJVwiLCBcIjEwMCVcIl0sXG4gICAgICAgICAgICBwYWRkaW5nOiAxMCxcbiAgICAgICAgICAgIG1hcmdpbjogMCxcbiAgICAgICAgICAgIGltZzoge1xuICAgICAgICAgICAgICAgIHdpZHRoOiBbXCI4MCVcIiwgXCI5MCVcIl0sXG4gICAgICAgICAgICAgICAgbWluSGVpZ2h0OiBbXCJhdXRvXCIsIFwiYXV0b1wiXSxcbiAgICAgICAgICAgICAgICBtaW5XaWR0aDogW1wiYXV0b1wiLCBcImF1dG9cIl0sXG4gICAgICAgICAgICAgICAgbWFyZ2luTGVmdDogW1wiMTglXCIsIFwiMTAlXCJdLFxuICAgICAgICAgICAgICAgIG1hcmdpblRvcDogW1wiMFwiLCBcIjMlXCJdLFxuICAgICAgICAgICAgICAgIFwiQG1lZGlhIChtaW4td2lkdGg6IDc2OHB4KVwiOiB7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luTGVmdDogXCI1JVwiLFxuICAgICAgICAgICAgICAgICAgICBtYXJnaW5Ub3A6IFwiMyVcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFwiQG1lZGlhIChtaW4td2lkdGg6IDEwMjRweClcIjoge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogXCI5MCVcIixcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luTGVmdDogXCIxMCVcIixcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luVG9wOiBcIjMlXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcIkBtZWRpYSAobWluLXdpZHRoOiAxMzM2cHgpXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDU2MCxcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luTGVmdDogMCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgXCIuc2xpY2stZG90c1wiOiB7XG4gICAgICAgICAgICBwb3NpdGlvbjogW1wiYWJzb2x1dGVcIiwgXCJyZWxhdGl2ZVwiXSxcbiAgICAgICAgICAgIGJvdHRvbTogW1wiLTEwJVwiLCBcIi0yNSVcIl0sXG4gICAgICAgIH0sXG4gICAgfSksXG4pO1xuXG5jbGFzcyBSZWFkeU1hZGVBcHBzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBjb250ZW50TmF2OiBudWxsLFxuICAgICAgICAgICAgaW1hZ2VOYXY6IG51bGwsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgY29udGVudE5hdjogdGhpcy5zbGlkZXIxLFxuICAgICAgICAgICAgaW1hZ2VOYXY6IHRoaXMuc2xpZGVyMixcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7IGhhbmRsZURlbW9DbGljaywgZGVtb0xpbmssIC4uLnJlc3RQcm9wcyB9ID0gdGhpcy5wcm9wcztcblxuICAgICAgICBjb25zdCBidXR0b25Qcm9wcyA9IHt9O1xuICAgICAgICBpZiAoZGVtb0xpbmspIHtcbiAgICAgICAgICAgIGJ1dHRvblByb3BzLmxpbmsgPSBkZW1vTGluaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFuZGxlRGVtb0NsaWNrKSB7XG4gICAgICAgICAgICBidXR0b25Qcm9wcy5vbkNsaWNrID0gaGFuZGxlRGVtb0NsaWNrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgICAgICA8c2VjdGlvbiB7Li4ucmVzdFByb3BzfSBjbGFzc05hbWU9e3dyYXBwZXJDbGFzc30+XG4gICAgICAgICAgICAgICAgICAgIDxDb250ZW50Q29udGFpbmVyIGNsYXNzTmFtZT17Y29udGVudENvbnRhaW5lckNsYXNzfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0V3JhcHBlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGl0bGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhvb2xhIEFJIGNvbWVzIHdpdGggPEhpZ2hsaWdodGVkQmc+IHNldmVyYWwgRlJFRSA8L0hpZ2hsaWdodGVkQmc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWR5LW1hZGUgYXBwcyB5b3UgY2FuIHVzZSB0b2RheTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1RpdGxlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHshdGhpcy5wcm9wcy5jdGEgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGNsYXNzTmFtZT17Y3RhQnV0dG9ufSB0eXBlPVwic2Vjb25kYXJ5XCIgey4uLmJ1dHRvblByb3BzfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxEZW1vSWNvbiBzcmM9e2RlbW9JY29ufSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2NoZWR1bGUgYSAxOjEgRGVtb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9UZXh0V3JhcHBlcj5cbiAgICAgICAgICAgICAgICAgICAgPC9Db250ZW50Q29udGFpbmVyPlxuICAgICAgICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgICAgICAgICA8c2VjdGlvbiB7Li4ucmVzdFByb3BzfSBjbGFzc05hbWU9e3dyYXBwZXJXaXRoQmFja2dyb3VuZEltYWdlQ2xhc3N9PlxuICAgICAgICAgICAgICAgICAgICA8QXBwc0NvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMZWZ0U2lkZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2xpZGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzTmF2Rm9yPXt0aGlzLnN0YXRlLmNvbnRlbnROYXZ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZj17c2xpZGVyID0+ICh0aGlzLnNsaWRlcjIgPSBzbGlkZXIpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c9ezF9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRlck1vZGU9e2ZhbHNlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXJQYWRkaW5nPXsyNX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpcGVUb1NsaWRlPXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb2N1c09uU2VsZWN0PXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3dlYmlueUFwcHNMaXN0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zaXZlPXtbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludDogMTAyNCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXJQYWRkaW5nOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXJNb2RlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDYwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXJQYWRkaW5nOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXJNb2RlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDQ4MCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXJQYWRkaW5nOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXJNb2RlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3NsaWRlckNvbnRlbnRDbGFzc30+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QXBwVGl0bGU+SGVhZGxlc3MgQ01TPC9BcHBUaXRsZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxBcHBEZXNjcmlwdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHcmFwaFFMIGJhc2VkIGhlYWRsZXNzIENNUyB3aXRoIHBvd2VyZnVsIGNvbnRlbnQgbW9kZWxpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlcy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQXBwRGVzY3JpcHRpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXthcHBDdGFCdXR0b25DbGFzc31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rPVwiL3NlcnZlcmxlc3MtYXBwL2hlYWRsZXNzLWNtc1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImRlZmF1bHRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTGVhcm4gbW9yZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxBcnJvd1JpZ2h0IHNyYz17cHVycGxlQXJyb3dSaWdodH0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3NsaWRlckNvbnRlbnRDbGFzc30+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QXBwVGl0bGU+UGFnZSBCdWlsZGVyPC9BcHBUaXRsZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxBcHBEZXNjcmlwdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCdWlsZCBzdHVubmluZyBsYW5kaW5nIHBhZ2VzIHdpdGggYW4gZWFzeSB0byB1c2UgZHJhZyZkcm9wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0FwcERlc2NyaXB0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YXBwQ3RhQnV0dG9uQ2xhc3N9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluaz1cIi9zZXJ2ZXJsZXNzLWFwcC9wYWdlLWJ1aWxkZXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJkZWZhdWx0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExlYXJuIG1vcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QXJyb3dSaWdodCBzcmM9e3B1cnBsZUFycm93UmlnaHR9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzbGlkZXJDb250ZW50Q2xhc3N9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEFwcFRpdGxlPkZvcm0gQnVpbGRlcjwvQXBwVGl0bGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QXBwRGVzY3JpcHRpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3JlYXRlIGZvcm1zIHVzaW5nIGEgZHJhZyZkcm9wIGludGVyZmFjZSBhbmQgdHJhY2sgaG93IHRoZXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJ0LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9BcHBEZXNjcmlwdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2FwcEN0YUJ1dHRvbkNsYXNzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbms9XCIvc2VydmVybGVzcy1hcHAvZm9ybS1idWlsZGVyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiZGVmYXVsdFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMZWFybiBtb3JlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEFycm93UmlnaHQgc3JjPXtwdXJwbGVBcnJvd1JpZ2h0fSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c2xpZGVyQ29udGVudENsYXNzfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxBcHBUaXRsZT5GaWxlIE1hbmFnZXI8L0FwcFRpdGxlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEFwcERlc2NyaXB0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwbG9hZCwgY2F0ZWdvcml6ZSwgc2VhcmNoIGFuZCBlZGl0IHlvdXIgZmlsZXMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0FwcERlc2NyaXB0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YXBwQ3RhQnV0dG9uQ2xhc3N9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluaz1cIi9zZXJ2ZXJsZXNzLWFwcC9maWxlLW1hbmFnZXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJkZWZhdWx0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExlYXJuIG1vcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QXJyb3dSaWdodCBzcmM9e3B1cnBsZUFycm93UmlnaHR9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9TbGlkZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0xlZnRTaWRlPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFJpZ2h0U2lkZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RGV2aWNlRnJhbWUgc3JjPXttYWNrQm9va0FpckZyYW1lfSBhbHQ9XCJtYWNib29rXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2xpZGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzTmF2Rm9yPXt0aGlzLnN0YXRlLmltYWdlTmF2fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY9e3NsaWRlciA9PiAodGhpcy5zbGlkZXIxID0gc2xpZGVyKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG90cz17dHJ1ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXt3ZWJpbnlBcHBzSW1hZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdz17MX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVyTW9kZT17dHJ1ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVyUGFkZGluZz17MjV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhZGU9e3RydWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZBcnJvdz17PFByZXZBcnJvdyAvPn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dEFycm93PXs8TmV4dEFycm93IC8+fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtoZWFkbGVzc0Ntc30gYWx0PVwiSG9vbGEgQUkgU2VydmVybGVzcyBIZWFkbGVzcyBDTVNcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtwYWdlQnVpbGRlcn0gYWx0PVwiSG9vbGEgQUkgU2VydmVybGVzcyBQYWdlIEJ1aWxkZXJcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtmb3JtQnVpbGRlcn0gYWx0PVwiSG9vbGEgQUkgU2VydmVybGVzcyBGb3JtIEJ1aWxkZXJcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtmaWxlTWFuYWdlcn0gYWx0PVwiSG9vbGEgQUkgU2VydmVybGVzcyBGaWxlIE1hbmFnZXJcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1NsaWRlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvUmlnaHRTaWRlPlxuICAgICAgICAgICAgICAgICAgICA8L0FwcHNDb250YWluZXI+XG4gICAgICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlYWR5TWFkZUFwcHM7XG5cbmZ1bmN0aW9uIFByZXZBcnJvdyhwcm9wcykge1xuICAgIGNvbnN0IHsgc3R5bGUsIG9uQ2xpY2sgfSA9IHByb3BzO1xuICAgIHJldHVybiAoXG4gICAgICAgIDxCdXR0b24gdHlwZT1cImRlZmF1bHRcIiBjbGFzc05hbWU9e2xlZnRBcnJvd0NsYXNzfSBzdHlsZT17c3R5bGV9IG9uQ2xpY2s9e29uQ2xpY2t9PlxuICAgICAgICAgICAgPExlZnRBcnJvd0ltYWdlIHNyYz17bGVmdEFycm93SWNvbn0gYWx0PVwiYXJyb3cgdG8gbGVmdFwiIC8+XG4gICAgICAgIDwvQnV0dG9uPlxuICAgICk7XG59XG5cbmZ1bmN0aW9uIE5leHRBcnJvdyhwcm9wcykge1xuICAgIGNvbnN0IHsgc3R5bGUsIG9uQ2xpY2sgfSA9IHByb3BzO1xuICAgIHJldHVybiAoXG4gICAgICAgIDxCdXR0b24gdHlwZT1cImRlZmF1bHRcIiBjbGFzc05hbWU9e3JpZ2h0QXJyb3dDbGFzc30gc3R5bGU9e3N0eWxlfSBvbkNsaWNrPXtvbkNsaWNrfT5cbiAgICAgICAgICAgIDxSaWdodEFycm93SW1hZ2Ugc3JjPXtyaWdodEFycm93SWNvbn0gYWx0PVwiYXJyb3cgdG8gcmlnaHRcIiAvPlxuICAgICAgICA8L0J1dHRvbj5cbiAgICApO1xufVxuIl19 */"),v=(0,Z.css)({position:"relative",marginLeft:"-20px !important",textTransform:"uppercase",fontWeight:i.default.fontWeight.bold,backgroundColor:"transparent !important",color:"#7B39D9 !important",textDecoration:"underline !important",textDecorationColor:"#7B39D9 !important","&:hover":{boxShadow:"none !important","& img":{transform:"translateX(5px)"}}},(0,l.default)({width:["150px !important"]}),"label:appCtaButtonClass;","/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),p=(0,G.default)("img",{target:"e1xjmg8m3",label:"ArrowRight"})({position:"relative",marginLeft:5},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),L=(0,Z.css)({textTransform:"uppercase",padding:"10px 12px !important"},(0,l.default)({width:["230px !important"]}),"label:ctaButton;","/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),z=(0,G.default)("img",{target:"e1xjmg8m4",label:"DemoIcon"})({position:"relative",marginRight:5},(0,l.default)({display:["block"]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),o=(0,G.default)("div",{target:"e1xjmg8m5",label:"AppsContainer"})({display:"flex",maxWidth:1200,margin:"0 auto"},(0,l.default)({width:["100%","100%"],flexDirection:["column","row"],paddingTop:[40,140],paddingBottom:[40,250],paddingLeft:[0,24]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),j=(0,Z.css)({display:"flex !important",flexDirection:"column"},(0,l.default)({alignItems:["center","flex-start"]}),"label:sliderContentClass;","/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),k=(0,G.default)("div",{target:"e1xjmg8m6",label:"LeftSide"})({position:"relative"},(0,l.default)({width:["100%","30%"],margin:["0 auto 15px auto",0]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),e=(0,G.default)("div",{target:"e1xjmg8m7",label:"RightSide"})({position:"relative"},(0,l.default)({width:["100%","70%"],marginTop:[0,-120]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),S=(0,G.default)("h2",{target:"e1xjmg8m8",label:"AppTitle"})({fontSize:48,fontWeight:i.default.fontWeight.bold,color:i.default.color.black,paddingTop:0,marginTop:0,marginBottom:20},(0,l.default)({textAlign:["center","left"]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),Q=(0,G.default)("h2",{target:"e1xjmg8m9",label:"AppDescription"})({fontSize:i.default.fontSize.subText,fontWeight:i.default.fontWeight.light,color:i.default.color.black,paddingTop:0,margin:"0px 0px 24px"},(0,l.default)({maxWidth:[302],textAlign:["center","left"]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),D=(0,G.default)("img",{target:"e1xjmg8m10",label:"DeviceFrame"})({position:"absolute",top:0,left:0},(0,l.default)({width:["100%"]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),U=(0,Z.css)({position:"absolute",top:"40%",padding:"0px !important",backgroundColor:"transparent !important",zIndex:5,"&:hover":{boxShadow:"none !important"}},(0,l.default)({display:["none !important","block !important"],width:["30px !important","50px !important"],left:[15,"-8%","-15%"],"@media (min-width: 1366px)":{left:"-15%"}}),"label:leftArrowClass;","/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),M=(0,Z.css)({position:"absolute",top:"40%",padding:"0px !important",backgroundColor:"transparent !important",zIndex:5,"&:hover":{boxShadow:"none !important"}},(0,l.default)({display:["none !important","block !important"],width:["30px !important","50px !important"],right:[15,"-8%","-15%"],"@media (min-width: 1366px)":{right:"-15%"}}),"label:rightArrowClass;","/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),O=(0,G.default)("img",{target:"e1xjmg8m11",label:"LeftArrowImage"})({width:"100%"},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),T=(0,G.default)("img",{target:"e1xjmg8m12",label:"RightArrowImage"})({width:"100%"},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),P=(0,Z.css)({maxWidth:"100vw",overflowX:"hidden",".slick-list":{position:"relative"}},(0,l.default)({}),"label:webinyAppsList;","/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),E=(0,Z.css)({maxWidth:"580px",overflow:"visible",paddingBottom:20,margin:"0 auto",".slick-list":{height:324,maxWidth:"580px"},".slick-slide":{outline:0,boxSizing:"border-box",div:{outline:0},img:{outline:0,boxShadow:"0 5px 10px 0 rgba(0,0,0,0.15)",margin:"0 auto",borderRadius:5,boxSizing:"border-box"}},".slick-dots":{zIndex:10,"li button:before":{fontSize:30}}},(0,l.default)({height:["auto",324],".slick-list":{height:["auto",324],maxWidth:"580px"},".slick-slide":{width:["100%","100%"],padding:10,margin:0,img:{width:["80%","90%"],minHeight:["auto","auto"],minWidth:["auto","auto"],marginLeft:["18%","10%"],marginTop:["0","3%"],"@media (min-width: 768px)":{width:"100%",marginLeft:"5%",marginTop:"3%"},"@media (min-width: 1024px)":{width:"90%",marginLeft:"10%",marginTop:"3%"},"@media (min-width: 1336px)":{width:560,marginLeft:0}}},".slick-dots":{position:["absolute","relative"],bottom:["-10%","-25%"]}}),"label:webinyAppsImage;","/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");class f extends b.default.Component{constructor(I){super(I),this.state={contentNav:null,imageNav:null}}componentDidMount(){this.setState({contentNav:this.slider1,imageNav:this.slider2})}render(){const I=this.props,{handleDemoClick:g,demoLink:C}=I,A=(0,c.default)(I,J),G={};return C&&(G.link=C),g&&(G.onClick=g),b.default.createElement(b.default.Fragment,null,b.default.createElement("section",Object.assign({},A,{className:Y}),b.default.createElement(x.default,{className:h},b.default.createElement(n,null,b.default.createElement(s,null,"Hoola AI comes with ",b.default.createElement(t,null," several FREE "),"ready-made apps you can use today:"),!this.props.cta&&b.default.createElement(W.default,Object.assign({className:L,type:"secondary"},G),b.default.createElement(z,{src:u.default}),"Schedule a 1:1 Demo")))),b.default.createElement("section",Object.assign({},A,{className:H}),b.default.createElement(o,null,b.default.createElement(k,null,b.default.createElement(X.default,{asNavFor:this.state.contentNav,ref:I=>this.slider2=I,slidesToShow:1,centerMode:!1,centerPadding:25,swipeToSlide:!0,focusOnSelect:!0,className:P,responsive:[{breakpoint:1024,settings:{slidesToShow:1,slidesToScroll:1,centerPadding:0,centerMode:!0}},{breakpoint:600,settings:{slidesToShow:1,slidesToScroll:1,centerPadding:0,centerMode:!0}},{breakpoint:480,settings:{slidesToShow:1,slidesToScroll:1,centerPadding:0,centerMode:!0}}]},b.default.createElement("div",{className:j},b.default.createElement(S,null,"Headless CMS"),b.default.createElement(Q,null,"GraphQL based headless CMS with powerful content modeling features."),b.default.createElement(W.default,{className:v,link:"/serverless-app/headless-cms",type:"default",target:"_blank"},"Learn more",b.default.createElement(p,{src:d.default}))),b.default.createElement("div",{className:j},b.default.createElement(S,null,"Page Builder"),b.default.createElement(Q,null,"Build stunning landing pages with an easy to use drag&drop editor"),b.default.createElement(W.default,{className:v,link:"/serverless-app/page-builder",type:"default",target:"_blank"},"Learn more",b.default.createElement(p,{src:d.default}))),b.default.createElement("div",{className:j},b.default.createElement(S,null,"Form Builder"),b.default.createElement(Q,null,"Create forms using a drag&drop interface and track how they convert."),b.default.createElement(W.default,{className:v,link:"/serverless-app/form-builder",type:"default",target:"_blank"},"Learn more",b.default.createElement(p,{src:d.default}))),b.default.createElement("div",{className:j},b.default.createElement(S,null,"File Manager"),b.default.createElement(Q,null,"Upload, categorize, search and edit your files."),b.default.createElement(W.default,{className:v,link:"/serverless-app/file-manager",type:"default",target:"_blank"},"Learn more",b.default.createElement(p,{src:d.default}))))),b.default.createElement(e,null,b.default.createElement(D,{src:w.default,alt:"macbook"}),b.default.createElement(X.default,{asNavFor:this.state.imageNav,ref:I=>this.slider1=I,dots:!0,className:E,slidesToShow:1,centerMode:!0,centerPadding:25,fade:!0,prevArrow:b.default.createElement(K,null),nextArrow:b.default.createElement(r,null)},b.default.createElement("div",null,b.default.createElement("img",{src:N.default,alt:"Hoola AI Serverless Headless CMS"})),b.default.createElement("div",null,b.default.createElement("img",{src:y.default,alt:"Hoola AI Serverless Page Builder"})),b.default.createElement("div",null,b.default.createElement("img",{src:a.default,alt:"Hoola AI Serverless Form Builder"})),b.default.createElement("div",null,b.default.createElement("img",{src:V.default,alt:"Hoola AI Serverless File Manager"})))))))}}g.default=f;function K(I){const{style:g,onClick:C}=I;return b.default.createElement(W.default,{type:"default",className:U,style:g,onClick:C},b.default.createElement(O,{src:R.default,alt:"arrow to left"}))}function r(I){const{style:g,onClick:C}=I;return b.default.createElement(W.default,{type:"default",className:M,style:g,onClick:C},b.default.createElement(T,{src:m.default,alt:"arrow to right"}))}}}]);
//# sourceMappingURL=1806f475-c4d62c8602bc82dcc48f.js.map