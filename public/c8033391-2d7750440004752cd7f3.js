(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{CzB1:function(I,g,C){"use strict";var A=C("TqRt");g.__esModule=!0,g.welcomeContainerClass=g.videoPreviewClass=g.mediaKitContainerClass=g.investorContainerClass=g.heroContainerClass=g.contributorsContainerClass=g.WebinyHallMarkImage=g.TraitsWrapper=g.TraitCard=g.TitleHighlight=g.Title=g.Text=g.TeamWrapper=g.TeamSection=g.TeamPath=g.SectionWithWaves=g.SectionWithGrayRectangle=g.SectionWithDots=g.SectionWithBackground=g.Section=g.ProfileCard=g.More=g.MediaKitCard=g.MediaCardWrapper=g.ImageWrapper=g.HeroSectionWrapper=g.FoundersVideoTitle=g.ContributorsWrapper=g.ContributorCard=g.ButtonWrapper=void 0;var c=A(C("VIIK")),b=C("PAeb"),X=A(C("slAs")),i=A(C("0uQq")),G=A(C("M8KP")),x=A(C("7iFO")),Z=A(C("JZNn")),l=A(C("T/VD"));g.SectionWithBackground=(0,c.default)("section",{target:"e1z6kuv0",label:"SectionWithBackground"})({backgroundColor:X.default.color.white,position:"relative",zIndex:0,backgroundImage:"url("+x.default+")",backgroundRepeat:"no-repeat",backgroundPosition:"bottom",backgroundSize:"cover"},(0,i.default)({}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),g.SectionWithWaves=(0,c.default)("section",{target:"e1z6kuv1",label:"SectionWithWaves"})({backgroundColor:X.default.color.white,position:"relative",zIndex:0,backgroundImage:"url("+l.default+")",backgroundRepeat:"no-repeat",backgroundSize:"cover",backgroundPosition:"top",padding:"0px 15px"},(0,i.default)({}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),g.SectionWithDots=(0,c.default)("section",{target:"e1z6kuv2",label:"SectionWithDots"})({backgroundColor:X.default.color.white,backgroundImage:"url("+Z.default+")",backgroundRepeatX:"repeat",backgroundRepeatY:"no-repeat",backgroundPosition:"bottom",padding:"0px 15px"},(0,i.default)({backgroundSize:["cover","contain"]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9iZXJuYXJkL1Byb2plY3RzL2hvb2xhL3NpdGUvc3JjL2NvbXBvbmVudHMvYWJvdXQtdXMvYWJvdXQtdXMtc3R5bGVzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXNDK0IiLCJmaWxlIjoiL1VzZXJzL2Jlcm5hcmQvUHJvamVjdHMvaG9vbGEvc2l0ZS9zcmMvY29tcG9uZW50cy9hYm91dC11cy9hYm91dC11cy1zdHlsZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gXCJyZWFjdC1lbW90aW9uXCI7XG5pbXBvcnQgeyBjc3MgfSBmcm9tIFwiZW1vdGlvblwiO1xuaW1wb3J0IHRoZW1lIGZyb20gXCIuLi91dGlscy90aGVtZVwiO1xuaW1wb3J0IG1xIGZyb20gXCIuLi91dGlscy9icmVha3BvaW50c1wiO1xuLy8gYXNzZXRzXG5pbXBvcnQgY29udHJpYnV0b3JzQmcgZnJvbSBcIi4vYXNzZXRzL2Fib3V0LWNvbnRyaWJ1dG9ycy1iZy5zdmdcIjtcbmltcG9ydCBoZXJvQmcgZnJvbSBcIi4vYXNzZXRzL2Fib3V0LWhlcm8tYmcuc3ZnXCI7XG5pbXBvcnQgZG90c0JnIGZyb20gXCIuL2Fzc2V0cy9kb3RzLnN2Z1wiO1xuaW1wb3J0IGdvU2VydmVybGVzc0JnIGZyb20gXCIuL2Fzc2V0cy9iZ3dhdmVzLnN2Z1wiO1xuXG5leHBvcnQgY29uc3QgU2VjdGlvbldpdGhCYWNrZ3JvdW5kID0gc3R5bGVkKFwic2VjdGlvblwiKShcbiAgICB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUuY29sb3Iud2hpdGUsXG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIHpJbmRleDogMCxcbiAgICAgICAgYmFja2dyb3VuZEltYWdlOiBcInVybChcIiArIGhlcm9CZyArIFwiKVwiLFxuICAgICAgICBiYWNrZ3JvdW5kUmVwZWF0OiBcIm5vLXJlcGVhdFwiLFxuICAgICAgICAvL3BhZGRpbmc6IFwiMHB4IDE1cHhcIixcbiAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiBcImJvdHRvbVwiLFxuICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogXCJjb3ZlclwiLFxuICAgIH0sXG4gICAgbXEoe30pLFxuKTtcblxuZXhwb3J0IGNvbnN0IFNlY3Rpb25XaXRoV2F2ZXMgPSBzdHlsZWQoXCJzZWN0aW9uXCIpKFxuICAgIHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5jb2xvci53aGl0ZSxcbiAgICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgICAgekluZGV4OiAwLFxuICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IFwidXJsKFwiICsgZ29TZXJ2ZXJsZXNzQmcgKyBcIilcIixcbiAgICAgICAgYmFja2dyb3VuZFJlcGVhdDogXCJuby1yZXBlYXRcIixcbiAgICAgICAgYmFja2dyb3VuZFNpemU6IFwiY292ZXJcIixcbiAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiBcInRvcFwiLFxuICAgICAgICBwYWRkaW5nOiBcIjBweCAxNXB4XCIsXG4gICAgfSxcbiAgICBtcSh7fSksXG4pO1xuXG5leHBvcnQgY29uc3QgU2VjdGlvbldpdGhEb3RzID0gc3R5bGVkKFwic2VjdGlvblwiKShcbiAgICB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUuY29sb3Iud2hpdGUsXG4gICAgICAgIGJhY2tncm91bmRJbWFnZTogXCJ1cmwoXCIgKyBkb3RzQmcgKyBcIilcIixcbiAgICAgICAgYmFja2dyb3VuZFJlcGVhdFg6IFwicmVwZWF0XCIsXG4gICAgICAgIGJhY2tncm91bmRSZXBlYXRZOiBcIm5vLXJlcGVhdFwiLFxuICAgICAgICBiYWNrZ3JvdW5kUG9zaXRpb246IFwiYm90dG9tXCIsXG4gICAgICAgIHBhZGRpbmc6IFwiMHB4IDE1cHhcIixcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgYmFja2dyb3VuZFNpemU6IFtcImNvdmVyXCIsIFwiY29udGFpblwiXSxcbiAgICB9KSxcbik7XG5cbmV4cG9ydCBjb25zdCBTZWN0aW9uV2l0aEdyYXlSZWN0YW5nbGUgPSBzdHlsZWQoXCJzZWN0aW9uXCIpKFxuICAgIHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5jb2xvci53aGl0ZSxcbiAgICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgICAgekluZGV4OiAwLFxuICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IFwidXJsKFwiICsgY29udHJpYnV0b3JzQmcgKyBcIilcIixcbiAgICAgICAgYmFja2dyb3VuZFJlcGVhdDogXCJuby1yZXBlYXRcIixcbiAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiBcInRvcFwiLFxuICAgICAgICBwYWRkaW5nOiBcIjBweCAxNXB4XCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIGJhY2tncm91bmRTaXplOiBbXCJjb3ZlclwiXSxcbiAgICB9KSxcbik7XG5cbmV4cG9ydCBjb25zdCBTZWN0aW9uID0gc3R5bGVkKFwic2VjdGlvblwiKShcbiAgICB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUuY29sb3Iud2hpdGUsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIHBhZGRpbmc6IFtcIjEwMHB4IDE1cHhcIiwgXCI4MHB4IDE1cHhcIl0sXG4gICAgfSksXG4pO1xuXG5leHBvcnQgY29uc3QgVGVhbVNlY3Rpb24gPSBzdHlsZWQoXCJzZWN0aW9uXCIpKFxuICAgIHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5jb2xvci53aGl0ZSxcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgcGFkZGluZzogW1wiMHB4IDE1cHggMTAwcHhcIiwgXCIwcHggMTVweCA4MHB4XCJdLFxuICAgIH0pLFxuKTtcblxuZXhwb3J0IGNvbnN0IGhlcm9Db250YWluZXJDbGFzcyA9IGNzcyhcbiAgICB7XG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICBtYXhXaWR0aDogMTIwMCxcbiAgICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgICAgLy8gRm9yIFwiV2ViaW55SGFsbE1hcmtJbWFnZVwiXG4gICAgICAgIG92ZXJmbG93OiBcImhpZGRlblwiLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICB3aWR0aDogW1wiMTAwJVwiLCBcIjEwMCVcIl0sXG4gICAgICAgIGhlaWdodDogW1wiNTB2aFwiLCA0MDRdLFxuICAgICAgICBwYWRkaW5nOiBbXCIwcHggMHB4XCIsIFwiMHB4IDBweCAwcHhcIl0sXG4gICAgICAgIFwiQG1lZGlhIChtaW4td2lkdGg6IDIwMDBweClcIjoge1xuICAgICAgICAgICAgcGFkZGluZ0JvdHRvbTogODAsXG4gICAgICAgIH0sXG4gICAgfSksXG4pO1xuXG5leHBvcnQgY29uc3QgY29udHJpYnV0b3JzQ29udGFpbmVyQ2xhc3MgPSBjc3MoXG4gICAge1xuICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgbWF4V2lkdGg6IDEyMDAsXG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIHdpZHRoOiBbXCIxMDAlXCIsIFwiMTAwJVwiXSxcbiAgICAgICAgcGFkZGluZzogW1wiODBweCAwcHhcIiwgXCIxMjBweCAwcHggODBweFwiXSxcbiAgICB9KSxcbik7XG5cbmV4cG9ydCBjb25zdCB3ZWxjb21lQ29udGFpbmVyQ2xhc3MgPSBjc3MoXG4gICAge1xuICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgbWF4V2lkdGg6IDEyMDAsXG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIHdpZHRoOiBbXCIxMDAlXCIsIFwiMTAwJVwiXSxcbiAgICAgICAgcGFkZGluZzogW1wiMHB4IDBweFwiLCBcIjBweCAwcHggMHB4XCJdLFxuICAgIH0pLFxuKTtcblxuZXhwb3J0IGNvbnN0IGludmVzdG9yQ29udGFpbmVyQ2xhc3MgPSBjc3MoXG4gICAge1xuICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgbWF4V2lkdGg6IDEyMDAsXG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIHdpZHRoOiBbXCIxMDAlXCIsIFwiMTAwJVwiXSxcbiAgICAgICAgaGVpZ2h0OiBbXCI1MHZoXCIsIDUyNV0sXG4gICAgICAgIHBhZGRpbmc6IFtcIjBweCAwcHhcIiwgXCI4MHB4IDBweCAwcHhcIl0sXG4gICAgfSksXG4pO1xuXG5leHBvcnQgY29uc3QgbWVkaWFLaXRDb250YWluZXJDbGFzcyA9IGNzcyhcbiAgICB7XG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgbWF4V2lkdGg6IDEyMDAsXG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIHdpZHRoOiBbXCIxMDAlXCIsIFwiMTAwJVwiXSxcbiAgICAgICAgaGVpZ2h0OiBbXCJhdXRvXCIsIDYwMF0sXG4gICAgICAgIHBhZGRpbmc6IFtcIjgwcHggMHB4XCIsIFwiODBweCAwcHggMHB4XCJdLFxuICAgIH0pLFxuKTtcblxuZXhwb3J0IGNvbnN0IEhlcm9TZWN0aW9uV3JhcHBlciA9IHN0eWxlZChcImRpdlwiKShcbiAgICB7XG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgd2lkdGg6IFtcIjEwMCVcIiwgMTEwMF0sXG4gICAgICAgIGFsaWduSXRlbXM6IFtcImNlbnRlclwiXSxcbiAgICB9KSxcbik7XG5cbmV4cG9ydCBjb25zdCBXZWJpbnlIYWxsTWFya0ltYWdlID0gc3R5bGVkKFwiaW1nXCIpKFxuICAgIHtcbiAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgekluZGV4OiAxLFxuICAgICAgICB0b3A6IDAsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIHdpZHRoOiBbXCIxMDAlXCIsIFwiMTAwJVwiXSxcbiAgICAgICAgaGVpZ2h0OiBbXCIxMDAlXCIsIFwiYXV0b1wiXSxcbiAgICAgICAgbWF4SGVpZ2h0OiBbXCJ1bnNldFwiLCA3MDBdLFxuICAgIH0pLFxuKTtcblxuZXhwb3J0IGNvbnN0IFRpdGxlID0gc3R5bGVkKFwiaDFcIikoXG4gICAge1xuICAgICAgICBtYXhXaWR0aDogNzY4LFxuICAgICAgICBmb250U2l6ZTogdGhlbWUuZm9udFNpemVbXCI1eGxcIl0sXG4gICAgICAgIGZvbnRXZWlnaHQ6IHRoZW1lLmZvbnRXZWlnaHQuYm9sZCxcbiAgICAgICAgY29sb3I6IHRoZW1lLmNvbG9yLndoaXRlLFxuICAgICAgICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXG4gICAgICAgIGxpbmVIZWlnaHQ6IFwiNDhweFwiLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICBtYXJnaW46IFswLCBcIjBweCBhdXRvXCJdLFxuICAgIH0pLFxuKTtcblxuZXhwb3J0IGNvbnN0IFRpdGxlSGlnaGxpZ2h0ID0gc3R5bGVkKFwic3BhblwiKSh7XG4gICAgYmFja2dyb3VuZFBvc2l0aW9uWDogXCJyaWdodFwiLFxuICAgIGJhY2tncm91bmRQb3NpdGlvblk6IFwiYm90dG9tXCIsXG4gICAgYmFja2dyb3VuZFJlcGVhdDogXCJuby1yZXBlYXRcIixcbn0pO1xuXG5leHBvcnQgY29uc3QgVGV4dCA9IHN0eWxlZChcInBcIikoXG4gICAge1xuICAgICAgICBmb250U2l6ZTogdGhlbWUuZm9udFNpemVbXCIyeGxcIl0sXG4gICAgICAgIGZvbnRXZWlnaHQ6IHRoZW1lLmZvbnRXZWlnaHQucmVndWxhcixcbiAgICAgICAgbGluZUhlaWdodDogXCIzNHB4XCIsXG4gICAgICAgIG1hcmdpblRvcDogMCxcbiAgICAgICAgbWFyZ2luQm90dG9tOiAyNixcbiAgICAgICAgY29sb3I6IHRoZW1lLmNvbG9yLndoaXRlLFxuICAgICAgICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIG1heFdpZHRoOiBbMzM3LCA1OTBdLFxuICAgICAgICBtYXJnaW5MZWZ0OiBbMCwgXCJhdXRvXCJdLFxuICAgICAgICBtYXJnaW5SaWdodDogWzAsIFwiYXV0b1wiXSxcbiAgICB9KSxcbik7XG5cbmV4cG9ydCBjb25zdCBJbWFnZVdyYXBwZXIgPSBzdHlsZWQoXCJkaXZcIikoe1xuICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbn0pO1xuXG5leHBvcnQgY29uc3QgdmlkZW9QcmV2aWV3Q2xhc3MgPSBjc3Moe1xuICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgXCImIGltZ1wiOiB7XG4gICAgICAgIHdpZHRoOiBcIjk1JVwiLFxuICAgICAgICB0cmFuc2Zvcm06IFwidHJhbnNsYXRlKDIlLCAtMTAlKVwiLFxuICAgIH0sXG59KTtcblxuZXhwb3J0IGNvbnN0IFRlYW1XcmFwcGVyID0gc3R5bGVkKFwiZGl2XCIpKFxuICAgIHtcbiAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICBtYXhXaWR0aDogMTAwMCxcbiAgICAgICAgZGlzcGxheTogXCJncmlkXCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIGdyaWRUZW1wbGF0ZUNvbHVtbnM6IFtcInJlcGVhdCgxLCAxZnIpXCIsIFwicmVwZWF0KDQsIDFmcilcIl0sXG4gICAgICAgIGdyaWRHYXA6IFtcIjgwcHggMHB4XCIsIFwiNTBweCA3MHB4XCJdLFxuICAgIH0pLFxuKTtcblxuZXhwb3J0IGNvbnN0IFByb2ZpbGVDYXJkID0gc3R5bGVkKFwiZGl2XCIpKFxuICAgIHtcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgIG1hcmdpbjogXCIwcHggYXV0b1wiLFxuICAgICAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgICAgIG1heFdpZHRoOiAxOTAsXG5cbiAgICAgICAgdGV4dEFsaWduOiBcImNlbnRlclwiLFxuICAgICAgICBcIiYgLnByb2ZpbGVfX2ltZ1wiOiB7XG4gICAgICAgICAgICAvL2hlaWdodDogXCIxMDAlXCIsXG4gICAgICAgICAgICAvL3dpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgICAgIGhlaWdodDogMTYwLFxuICAgICAgICAgICAgbWFyZ2luQm90dG9tOiA4LFxuICAgICAgICAgICAgLy9vYmplY3RGaXQ6IFwiY292ZXJcIlxuICAgICAgICB9LFxuICAgICAgICBcIiYgLnByb2ZpbGVfX25hbWVcIjoge1xuICAgICAgICAgICAgbWFyZ2luQm90dG9tOiAwLFxuICAgICAgICAgICAgY29sb3I6IHRoZW1lLmNvbG9yLmJsYWNrLFxuICAgICAgICAgICAgZm9udFNpemU6IHRoZW1lLmZvbnRTaXplW1wiMnhsXCJdLFxuICAgICAgICAgICAgZm9udFdlaWdodDogdGhlbWUuZm9udFdlaWdodC5ib2xkLFxuICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgICAgIH0sXG4gICAgICAgIFwiJiAucHJvZmlsZV9fdGl0bGVcIjoge1xuICAgICAgICAgICAgbWFyZ2luOiBcIjBweCAwcHggMTBweFwiLFxuICAgICAgICB9LFxuICAgICAgICBcIiYgLnByb2ZpbGVfX2xpbmtzXCI6IHtcbiAgICAgICAgICAgIGxpc3RTdHlsZTogXCJub25lXCIsXG4gICAgICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcblxuICAgICAgICAgICAgXCImIC5wcm9maWxlX19saW5rXCI6IHtcbiAgICAgICAgICAgICAgICBtYXJnaW5SaWdodDogOCxcblxuICAgICAgICAgICAgICAgIFwiJiBpbWdcIjoge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMjAsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMjAsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIGE6IHtcbiAgICAgICAgICAgIGNvbG9yOiB0aGVtZS5jb2xvci5ncmF5VGV4dCxcbiAgICAgICAgICAgIHRleHREZWNvcmF0aW9uOiBcInVuZGVybGluZVwiLFxuICAgICAgICAgICAgXCImOmhvdmVyXCI6IHtcbiAgICAgICAgICAgICAgICBjb2xvcjogdGhlbWUuY29sb3IucHJpbWFyeURhcmssXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgbXEoe30pLFxuKTtcblxuZXhwb3J0IGNvbnN0IFRlYW1QYXRoID0gc3R5bGVkKFwiaW1nXCIpKHtcbiAgICB3aWR0aDogXCIxMDAlXCIsXG59KTtcblxuZXhwb3J0IGNvbnN0IENvbnRyaWJ1dG9yc1dyYXBwZXIgPSBzdHlsZWQoXCJkaXZcIikoXG4gICAge1xuICAgICAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgICAgIG1heFdpZHRoOiAxMDAwLFxuICAgICAgICBkaXNwbGF5OiBcImdyaWRcIixcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgZ3JpZFRlbXBsYXRlQ29sdW1uczogW1wicmVwZWF0KDIsIDFmcilcIiwgXCJyZXBlYXQoNCwgMWZyKVwiLCBcInJlcGVhdCg1LCAxZnIpXCJdLFxuICAgICAgICBncmlkR2FwOiBbXCI4MHB4IDBweFwiLCBcIjYwcHggNzBweFwiXSxcbiAgICB9KSxcbik7XG5cbmV4cG9ydCBjb25zdCBDb250cmlidXRvckNhcmQgPSBzdHlsZWQoXCJkaXZcIikoXG4gICAge1xuICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgbWFyZ2luOiBcIjBweCBhdXRvXCIsXG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgbWF4V2lkdGg6IDE0MCxcbiAgICAgICAgdHJhbnNpdGlvbjogXCJ0cmFuc2Zvcm0gMjUwbXMgZWFzZS1vdXRcIixcbiAgICAgICAgY3Vyc29yOiBcInBvaW50ZXJcIixcblxuICAgICAgICBcIiY6aG92ZXJcIjoge1xuICAgICAgICAgICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZVkoLTVweCkgc2NhbGUoMS4wNSlcIixcbiAgICAgICAgfSxcblxuICAgICAgICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXG4gICAgICAgIFwiJiAuY2FyZF9faW1nXCI6IHtcbiAgICAgICAgICAgIGhlaWdodDogMTQwLFxuICAgICAgICAgICAgd2lkdGg6IDE0MCxcbiAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogMjAsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6IDgsXG4gICAgICAgIH0sXG4gICAgICAgIFwiJiAuY2FyZF9fbmFtZVwiOiB7XG4gICAgICAgICAgICBtYXJnaW5Cb3R0b206IDAsXG4gICAgICAgICAgICBjb2xvcjogdGhlbWUuY29sb3IuYmxhY2ssXG4gICAgICAgICAgICBmb250U2l6ZTogdGhlbWUuZm9udFNpemUuc20sXG4gICAgICAgICAgICBmb250V2VpZ2h0OiB0aGVtZS5mb250V2VpZ2h0LmJvbGQsXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIG1xKHt9KSxcbik7XG5cbmV4cG9ydCBjb25zdCBCdXR0b25XcmFwcGVyID0gc3R5bGVkKFwiZGl2XCIpKHtcbiAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICBtYXJnaW5Ub3A6IDUwLFxuXG4gICAgXCImIC5pY29uXCI6IHtcbiAgICAgICAgbWFyZ2luTGVmdDogMTYsXG4gICAgfSxcbn0pO1xuXG5leHBvcnQgY29uc3QgVHJhaXRzV3JhcHBlciA9IHN0eWxlZChcImRpdlwiKShcbiAgICB7XG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgbWF4V2lkdGg6IDk2MyxcbiAgICAgICAgZGlzcGxheTogXCJncmlkXCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIGdyaWRUZW1wbGF0ZUNvbHVtbnM6IFtcInJlcGVhdCgxLCAxZnIpXCIsIFwicmVwZWF0KDMsIDFmcilcIl0sXG4gICAgICAgIGdyaWRHYXA6IFtcIjQwcHggMHB4XCIsIFwiMHB4XCJdLFxuICAgIH0pLFxuKTtcblxuZXhwb3J0IGNvbnN0IFRyYWl0Q2FyZCA9IHN0eWxlZChcImRpdlwiKShcbiAgICB7XG4gICAgICAgIGJveFNpemluZzogXCJib3JkZXItYm94XCIsXG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgICBhbGlnbkl0ZW1zOiBcImZsZXgtc3RhcnRcIixcbiAgICAgICAgbWFyZ2luOiBcIjBweCBhdXRvXCIsXG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgbWF4V2lkdGg6IDMxOSxcbiAgICAgICAgaGVpZ2h0OiAyMTAsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUuY29sb3IubGlnaHRHcmF5LFxuICAgICAgICBwYWRkaW5nOiAzMCxcbiAgICAgICAgdGV4dEFsaWduOiBcImxlZnRcIixcblxuICAgICAgICBcIiYgLmNhcmRfX2ltZ1wiOiB7XG4gICAgICAgICAgICBoZWlnaHQ6IFwiYXV0b1wiLFxuICAgICAgICAgICAgd2lkdGg6IFwiYXV0b1wiLFxuICAgICAgICAgICAgbWFyZ2luQm90dG9tOiAyMCxcbiAgICAgICAgfSxcbiAgICAgICAgXCImIC5jYXJkX190aXRsZVwiOiB7XG4gICAgICAgICAgICBtYXJnaW5Cb3R0b206IDAsXG4gICAgICAgICAgICBjb2xvcjogdGhlbWUuY29sb3IuYmxhY2ssXG4gICAgICAgICAgICBmb250U2l6ZTogdGhlbWUuZm9udFNpemUubGcsXG4gICAgICAgICAgICBmb250V2VpZ2h0OiB0aGVtZS5mb250V2VpZ2h0LmJvbGQsXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgXCImLnNwYW5Ud29Sb3dzXCI6IHtcbiAgICAgICAgICAgIGdyaWRSb3c6IFtcIlwiLCBcIjIgLyA0XCJdLFxuICAgICAgICAgICAgZ3JpZENvbHVtbjogW1wiXCIsIFwiMlwiXSxcbiAgICAgICAgICAgIHBhZGRpbmc6IFswLCAwXSxcblxuICAgICAgICAgICAgXCImIC5jYXJkX19pbWdcIjoge1xuICAgICAgICAgICAgICAgIHdpZHRoOiBbXCIxMDAlXCJdLFxuICAgICAgICAgICAgICAgIGhlaWdodDogW1wiMTAwJVwiLCBcImF1dG9cIl0sXG4gICAgICAgICAgICAgICAgbWFyZ2luQm90dG9tOiBbMCwgMjBdLFxuICAgICAgICAgICAgICAgIG9iamVjdEZpdDogW1wiY292ZXJcIl0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0pLFxuKTtcblxuZXhwb3J0IGNvbnN0IE1vcmUgPSBzdHlsZWQoXCJkaXZcIikoe1xuICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICB6SW5kZXg6IDEsXG4gICAgYm94U2l6aW5nOiBcImJvcmRlci1ib3hcIixcbiAgICBtYXhXaWR0aDogOTAwLFxuICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICBwYWRkaW5nOiBcIjYwcHggMzBweFwiLFxuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUuY29sb3Iud2hpdGUsXG4gICAgYm94U2hhZG93OiBcIjBweCAwcHggMTBweCByZ2JhKDAsIDAsIDAsIDAuMDk4MDM5MilcIixcbiAgICBib3JkZXJSYWRpdXM6IDEyLFxuXG4gICAgXCImIC5pbWdcIjoge1xuICAgICAgICBtYXhXaWR0aDogMjA4LFxuICAgIH0sXG59KTtcblxuZXhwb3J0IGNvbnN0IE1lZGlhQ2FyZFdyYXBwZXIgPSBzdHlsZWQoXCJkaXZcIikoXG4gICAge1xuICAgICAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgICAgIG1heFdpZHRoOiA5NjMsXG4gICAgICAgIGRpc3BsYXk6IFwiZ3JpZFwiLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICBncmlkVGVtcGxhdGVDb2x1bW5zOiBbXCJyZXBlYXQoMSwgMWZyKVwiLCBcInJlcGVhdCgzLCAxZnIpXCJdLFxuICAgICAgICBncmlkR2FwOiBbXCI0MHB4IDBweFwiLCBcIjBweCAzMHB4XCJdLFxuICAgIH0pLFxuKTtcblxuZXhwb3J0IGNvbnN0IE1lZGlhS2l0Q2FyZCA9IHN0eWxlZChcImRpdlwiKShcbiAgICB7XG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLmNvbG9yLndoaXRlLFxuXG4gICAgICAgIHdpZHRoOiAzMDMsXG4gICAgICAgIGhlaWdodDogMjg2LFxuICAgICAgICBib3JkZXJSYWRpdXM6IDgsXG4gICAgICAgIHRyYW5zaXRpb246IFwidHJhbnNmb3JtIDMwMG1zIGVhc2UtaW5cIixcbiAgICAgICAgY3Vyc29yOiBcInBvaW50ZXJcIixcblxuICAgICAgICBcIiY6aG92ZXJcIjoge1xuICAgICAgICAgICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZVkoLTEwcHgpIHNjYWxlKDEuMDUpXCIsXG4gICAgICAgIH0sXG5cbiAgICAgICAgXCImIC5pbWdcIjoge1xuICAgICAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICAgICAgYm9yZGVyVG9wTGVmdFJhZGl1czogOCxcbiAgICAgICAgICAgIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiA4LFxuICAgICAgICB9LFxuXG4gICAgICAgIFwiJiAubGlua1wiOiB7XG4gICAgICAgICAgICBmb250U2l6ZTogdGhlbWUuZm9udFNpemUubGcsXG4gICAgICAgICAgICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXG4gICAgICAgICAgICBwYWRkaW5nOiAyNCxcbiAgICAgICAgICAgIGNvbG9yOiB0aGVtZS5jb2xvci5wcmltYXJ5RGFyayxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgbWFyZ2luOiBbXCIwIGF1dG9cIl0sXG4gICAgfSksXG4pO1xuXG5leHBvcnQgY29uc3QgRm91bmRlcnNWaWRlb1RpdGxlID0gc3R5bGVkKFwiaDNcIikoe1xuICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXG4gICAgcGFkZGluZ1RvcDogMjUsXG4gICAgZm9udFdlaWdodDogNzAwLFxuICAgIGZvbnRTaXplOiBcIjEuMTI1cmVtXCIsXG4gICAgbWFyZ2luQm90dG9tOiAzMCxcbn0pO1xuIl19 */"),g.SectionWithGrayRectangle=(0,c.default)("section",{target:"e1z6kuv3",label:"SectionWithGrayRectangle"})({backgroundColor:X.default.color.white,position:"relative",zIndex:0,backgroundImage:"url("+G.default+")",backgroundRepeat:"no-repeat",backgroundPosition:"top",padding:"0px 15px"},(0,i.default)({backgroundSize:["cover"]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),g.Section=(0,c.default)("section",{target:"e1z6kuv4",label:"Section"})({backgroundColor:X.default.color.white},(0,i.default)({padding:["100px 15px","80px 15px"]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),g.TeamSection=(0,c.default)("section",{target:"e1z6kuv5",label:"TeamSection"})({backgroundColor:X.default.color.white},(0,i.default)({padding:["0px 15px 100px","0px 15px 80px"]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),g.heroContainerClass=(0,b.css)({display:"flex",flexDirection:"column",alignItems:"center",maxWidth:1200,position:"relative",overflow:"hidden"},(0,i.default)({width:["100%","100%"],height:["50vh",404],padding:["0px 0px","0px 0px 0px"],"@media (min-width: 2000px)":{paddingBottom:80}}),"label:heroContainerClass;","/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),g.contributorsContainerClass=(0,b.css)({display:"flex",flexDirection:"column",alignItems:"center",maxWidth:1200,position:"relative"},(0,i.default)({width:["100%","100%"],padding:["80px 0px","120px 0px 80px"]}),"label:contributorsContainerClass;","/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),g.welcomeContainerClass=(0,b.css)({display:"flex",flexDirection:"column",alignItems:"center",maxWidth:1200,position:"relative"},(0,i.default)({width:["100%","100%"],padding:["0px 0px","0px 0px 0px"]}),"label:welcomeContainerClass;","/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),g.investorContainerClass=(0,b.css)({display:"flex",flexDirection:"column",alignItems:"center",maxWidth:1200,position:"relative"},(0,i.default)({width:["100%","100%"],height:["50vh",525],padding:["0px 0px","80px 0px 0px"]}),"label:investorContainerClass;","/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),g.mediaKitContainerClass=(0,b.css)({display:"flex",flexDirection:"column",alignItems:"center",justifyContent:"center",maxWidth:1200,position:"relative"},(0,i.default)({width:["100%","100%"],height:["auto",600],padding:["80px 0px","80px 0px 0px"]}),"label:mediaKitContainerClass;","/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),g.HeroSectionWrapper=(0,c.default)("div",{target:"e1z6kuv6",label:"HeroSectionWrapper"})({display:"flex",flexDirection:"column",justifyContent:"center",height:"100%"},(0,i.default)({width:["100%",1100],alignItems:["center"]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),g.WebinyHallMarkImage=(0,c.default)("img",{target:"e1z6kuv7",label:"WebinyHallMarkImage"})({position:"absolute",zIndex:1,top:0,left:0},(0,i.default)({width:["100%","100%"],height:["100%","auto"],maxHeight:["unset",700]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),g.Title=(0,c.default)("h1",{target:"e1z6kuv8",label:"Title"})({maxWidth:768,fontSize:X.default.fontSize["5xl"],fontWeight:X.default.fontWeight.bold,color:X.default.color.white,textAlign:"center",lineHeight:"48px"},(0,i.default)({margin:[0,"0px auto"]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),g.TitleHighlight=(0,c.default)("span",{target:"e1z6kuv9",label:"TitleHighlight"})({backgroundPositionX:"right",backgroundPositionY:"bottom",backgroundRepeat:"no-repeat"},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9iZXJuYXJkL1Byb2plY3RzL2hvb2xhL3NpdGUvc3JjL2NvbXBvbmVudHMvYWJvdXQtdXMvYWJvdXQtdXMtc3R5bGVzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTZNOEIiLCJmaWxlIjoiL1VzZXJzL2Jlcm5hcmQvUHJvamVjdHMvaG9vbGEvc2l0ZS9zcmMvY29tcG9uZW50cy9hYm91dC11cy9hYm91dC11cy1zdHlsZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gXCJyZWFjdC1lbW90aW9uXCI7XG5pbXBvcnQgeyBjc3MgfSBmcm9tIFwiZW1vdGlvblwiO1xuaW1wb3J0IHRoZW1lIGZyb20gXCIuLi91dGlscy90aGVtZVwiO1xuaW1wb3J0IG1xIGZyb20gXCIuLi91dGlscy9icmVha3BvaW50c1wiO1xuLy8gYXNzZXRzXG5pbXBvcnQgY29udHJpYnV0b3JzQmcgZnJvbSBcIi4vYXNzZXRzL2Fib3V0LWNvbnRyaWJ1dG9ycy1iZy5zdmdcIjtcbmltcG9ydCBoZXJvQmcgZnJvbSBcIi4vYXNzZXRzL2Fib3V0LWhlcm8tYmcuc3ZnXCI7XG5pbXBvcnQgZG90c0JnIGZyb20gXCIuL2Fzc2V0cy9kb3RzLnN2Z1wiO1xuaW1wb3J0IGdvU2VydmVybGVzc0JnIGZyb20gXCIuL2Fzc2V0cy9iZ3dhdmVzLnN2Z1wiO1xuXG5leHBvcnQgY29uc3QgU2VjdGlvbldpdGhCYWNrZ3JvdW5kID0gc3R5bGVkKFwic2VjdGlvblwiKShcbiAgICB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUuY29sb3Iud2hpdGUsXG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIHpJbmRleDogMCxcbiAgICAgICAgYmFja2dyb3VuZEltYWdlOiBcInVybChcIiArIGhlcm9CZyArIFwiKVwiLFxuICAgICAgICBiYWNrZ3JvdW5kUmVwZWF0OiBcIm5vLXJlcGVhdFwiLFxuICAgICAgICAvL3BhZGRpbmc6IFwiMHB4IDE1cHhcIixcbiAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiBcImJvdHRvbVwiLFxuICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogXCJjb3ZlclwiLFxuICAgIH0sXG4gICAgbXEoe30pLFxuKTtcblxuZXhwb3J0IGNvbnN0IFNlY3Rpb25XaXRoV2F2ZXMgPSBzdHlsZWQoXCJzZWN0aW9uXCIpKFxuICAgIHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5jb2xvci53aGl0ZSxcbiAgICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgICAgekluZGV4OiAwLFxuICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IFwidXJsKFwiICsgZ29TZXJ2ZXJsZXNzQmcgKyBcIilcIixcbiAgICAgICAgYmFja2dyb3VuZFJlcGVhdDogXCJuby1yZXBlYXRcIixcbiAgICAgICAgYmFja2dyb3VuZFNpemU6IFwiY292ZXJcIixcbiAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiBcInRvcFwiLFxuICAgICAgICBwYWRkaW5nOiBcIjBweCAxNXB4XCIsXG4gICAgfSxcbiAgICBtcSh7fSksXG4pO1xuXG5leHBvcnQgY29uc3QgU2VjdGlvbldpdGhEb3RzID0gc3R5bGVkKFwic2VjdGlvblwiKShcbiAgICB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUuY29sb3Iud2hpdGUsXG4gICAgICAgIGJhY2tncm91bmRJbWFnZTogXCJ1cmwoXCIgKyBkb3RzQmcgKyBcIilcIixcbiAgICAgICAgYmFja2dyb3VuZFJlcGVhdFg6IFwicmVwZWF0XCIsXG4gICAgICAgIGJhY2tncm91bmRSZXBlYXRZOiBcIm5vLXJlcGVhdFwiLFxuICAgICAgICBiYWNrZ3JvdW5kUG9zaXRpb246IFwiYm90dG9tXCIsXG4gICAgICAgIHBhZGRpbmc6IFwiMHB4IDE1cHhcIixcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgYmFja2dyb3VuZFNpemU6IFtcImNvdmVyXCIsIFwiY29udGFpblwiXSxcbiAgICB9KSxcbik7XG5cbmV4cG9ydCBjb25zdCBTZWN0aW9uV2l0aEdyYXlSZWN0YW5nbGUgPSBzdHlsZWQoXCJzZWN0aW9uXCIpKFxuICAgIHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5jb2xvci53aGl0ZSxcbiAgICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgICAgekluZGV4OiAwLFxuICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IFwidXJsKFwiICsgY29udHJpYnV0b3JzQmcgKyBcIilcIixcbiAgICAgICAgYmFja2dyb3VuZFJlcGVhdDogXCJuby1yZXBlYXRcIixcbiAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiBcInRvcFwiLFxuICAgICAgICBwYWRkaW5nOiBcIjBweCAxNXB4XCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIGJhY2tncm91bmRTaXplOiBbXCJjb3ZlclwiXSxcbiAgICB9KSxcbik7XG5cbmV4cG9ydCBjb25zdCBTZWN0aW9uID0gc3R5bGVkKFwic2VjdGlvblwiKShcbiAgICB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUuY29sb3Iud2hpdGUsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIHBhZGRpbmc6IFtcIjEwMHB4IDE1cHhcIiwgXCI4MHB4IDE1cHhcIl0sXG4gICAgfSksXG4pO1xuXG5leHBvcnQgY29uc3QgVGVhbVNlY3Rpb24gPSBzdHlsZWQoXCJzZWN0aW9uXCIpKFxuICAgIHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5jb2xvci53aGl0ZSxcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgcGFkZGluZzogW1wiMHB4IDE1cHggMTAwcHhcIiwgXCIwcHggMTVweCA4MHB4XCJdLFxuICAgIH0pLFxuKTtcblxuZXhwb3J0IGNvbnN0IGhlcm9Db250YWluZXJDbGFzcyA9IGNzcyhcbiAgICB7XG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICBtYXhXaWR0aDogMTIwMCxcbiAgICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgICAgLy8gRm9yIFwiV2ViaW55SGFsbE1hcmtJbWFnZVwiXG4gICAgICAgIG92ZXJmbG93OiBcImhpZGRlblwiLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICB3aWR0aDogW1wiMTAwJVwiLCBcIjEwMCVcIl0sXG4gICAgICAgIGhlaWdodDogW1wiNTB2aFwiLCA0MDRdLFxuICAgICAgICBwYWRkaW5nOiBbXCIwcHggMHB4XCIsIFwiMHB4IDBweCAwcHhcIl0sXG4gICAgICAgIFwiQG1lZGlhIChtaW4td2lkdGg6IDIwMDBweClcIjoge1xuICAgICAgICAgICAgcGFkZGluZ0JvdHRvbTogODAsXG4gICAgICAgIH0sXG4gICAgfSksXG4pO1xuXG5leHBvcnQgY29uc3QgY29udHJpYnV0b3JzQ29udGFpbmVyQ2xhc3MgPSBjc3MoXG4gICAge1xuICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgbWF4V2lkdGg6IDEyMDAsXG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIHdpZHRoOiBbXCIxMDAlXCIsIFwiMTAwJVwiXSxcbiAgICAgICAgcGFkZGluZzogW1wiODBweCAwcHhcIiwgXCIxMjBweCAwcHggODBweFwiXSxcbiAgICB9KSxcbik7XG5cbmV4cG9ydCBjb25zdCB3ZWxjb21lQ29udGFpbmVyQ2xhc3MgPSBjc3MoXG4gICAge1xuICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgbWF4V2lkdGg6IDEyMDAsXG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIHdpZHRoOiBbXCIxMDAlXCIsIFwiMTAwJVwiXSxcbiAgICAgICAgcGFkZGluZzogW1wiMHB4IDBweFwiLCBcIjBweCAwcHggMHB4XCJdLFxuICAgIH0pLFxuKTtcblxuZXhwb3J0IGNvbnN0IGludmVzdG9yQ29udGFpbmVyQ2xhc3MgPSBjc3MoXG4gICAge1xuICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgbWF4V2lkdGg6IDEyMDAsXG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIHdpZHRoOiBbXCIxMDAlXCIsIFwiMTAwJVwiXSxcbiAgICAgICAgaGVpZ2h0OiBbXCI1MHZoXCIsIDUyNV0sXG4gICAgICAgIHBhZGRpbmc6IFtcIjBweCAwcHhcIiwgXCI4MHB4IDBweCAwcHhcIl0sXG4gICAgfSksXG4pO1xuXG5leHBvcnQgY29uc3QgbWVkaWFLaXRDb250YWluZXJDbGFzcyA9IGNzcyhcbiAgICB7XG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgbWF4V2lkdGg6IDEyMDAsXG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIHdpZHRoOiBbXCIxMDAlXCIsIFwiMTAwJVwiXSxcbiAgICAgICAgaGVpZ2h0OiBbXCJhdXRvXCIsIDYwMF0sXG4gICAgICAgIHBhZGRpbmc6IFtcIjgwcHggMHB4XCIsIFwiODBweCAwcHggMHB4XCJdLFxuICAgIH0pLFxuKTtcblxuZXhwb3J0IGNvbnN0IEhlcm9TZWN0aW9uV3JhcHBlciA9IHN0eWxlZChcImRpdlwiKShcbiAgICB7XG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgd2lkdGg6IFtcIjEwMCVcIiwgMTEwMF0sXG4gICAgICAgIGFsaWduSXRlbXM6IFtcImNlbnRlclwiXSxcbiAgICB9KSxcbik7XG5cbmV4cG9ydCBjb25zdCBXZWJpbnlIYWxsTWFya0ltYWdlID0gc3R5bGVkKFwiaW1nXCIpKFxuICAgIHtcbiAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgekluZGV4OiAxLFxuICAgICAgICB0b3A6IDAsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIHdpZHRoOiBbXCIxMDAlXCIsIFwiMTAwJVwiXSxcbiAgICAgICAgaGVpZ2h0OiBbXCIxMDAlXCIsIFwiYXV0b1wiXSxcbiAgICAgICAgbWF4SGVpZ2h0OiBbXCJ1bnNldFwiLCA3MDBdLFxuICAgIH0pLFxuKTtcblxuZXhwb3J0IGNvbnN0IFRpdGxlID0gc3R5bGVkKFwiaDFcIikoXG4gICAge1xuICAgICAgICBtYXhXaWR0aDogNzY4LFxuICAgICAgICBmb250U2l6ZTogdGhlbWUuZm9udFNpemVbXCI1eGxcIl0sXG4gICAgICAgIGZvbnRXZWlnaHQ6IHRoZW1lLmZvbnRXZWlnaHQuYm9sZCxcbiAgICAgICAgY29sb3I6IHRoZW1lLmNvbG9yLndoaXRlLFxuICAgICAgICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXG4gICAgICAgIGxpbmVIZWlnaHQ6IFwiNDhweFwiLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICBtYXJnaW46IFswLCBcIjBweCBhdXRvXCJdLFxuICAgIH0pLFxuKTtcblxuZXhwb3J0IGNvbnN0IFRpdGxlSGlnaGxpZ2h0ID0gc3R5bGVkKFwic3BhblwiKSh7XG4gICAgYmFja2dyb3VuZFBvc2l0aW9uWDogXCJyaWdodFwiLFxuICAgIGJhY2tncm91bmRQb3NpdGlvblk6IFwiYm90dG9tXCIsXG4gICAgYmFja2dyb3VuZFJlcGVhdDogXCJuby1yZXBlYXRcIixcbn0pO1xuXG5leHBvcnQgY29uc3QgVGV4dCA9IHN0eWxlZChcInBcIikoXG4gICAge1xuICAgICAgICBmb250U2l6ZTogdGhlbWUuZm9udFNpemVbXCIyeGxcIl0sXG4gICAgICAgIGZvbnRXZWlnaHQ6IHRoZW1lLmZvbnRXZWlnaHQucmVndWxhcixcbiAgICAgICAgbGluZUhlaWdodDogXCIzNHB4XCIsXG4gICAgICAgIG1hcmdpblRvcDogMCxcbiAgICAgICAgbWFyZ2luQm90dG9tOiAyNixcbiAgICAgICAgY29sb3I6IHRoZW1lLmNvbG9yLndoaXRlLFxuICAgICAgICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIG1heFdpZHRoOiBbMzM3LCA1OTBdLFxuICAgICAgICBtYXJnaW5MZWZ0OiBbMCwgXCJhdXRvXCJdLFxuICAgICAgICBtYXJnaW5SaWdodDogWzAsIFwiYXV0b1wiXSxcbiAgICB9KSxcbik7XG5cbmV4cG9ydCBjb25zdCBJbWFnZVdyYXBwZXIgPSBzdHlsZWQoXCJkaXZcIikoe1xuICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbn0pO1xuXG5leHBvcnQgY29uc3QgdmlkZW9QcmV2aWV3Q2xhc3MgPSBjc3Moe1xuICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgXCImIGltZ1wiOiB7XG4gICAgICAgIHdpZHRoOiBcIjk1JVwiLFxuICAgICAgICB0cmFuc2Zvcm06IFwidHJhbnNsYXRlKDIlLCAtMTAlKVwiLFxuICAgIH0sXG59KTtcblxuZXhwb3J0IGNvbnN0IFRlYW1XcmFwcGVyID0gc3R5bGVkKFwiZGl2XCIpKFxuICAgIHtcbiAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICBtYXhXaWR0aDogMTAwMCxcbiAgICAgICAgZGlzcGxheTogXCJncmlkXCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIGdyaWRUZW1wbGF0ZUNvbHVtbnM6IFtcInJlcGVhdCgxLCAxZnIpXCIsIFwicmVwZWF0KDQsIDFmcilcIl0sXG4gICAgICAgIGdyaWRHYXA6IFtcIjgwcHggMHB4XCIsIFwiNTBweCA3MHB4XCJdLFxuICAgIH0pLFxuKTtcblxuZXhwb3J0IGNvbnN0IFByb2ZpbGVDYXJkID0gc3R5bGVkKFwiZGl2XCIpKFxuICAgIHtcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgIG1hcmdpbjogXCIwcHggYXV0b1wiLFxuICAgICAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgICAgIG1heFdpZHRoOiAxOTAsXG5cbiAgICAgICAgdGV4dEFsaWduOiBcImNlbnRlclwiLFxuICAgICAgICBcIiYgLnByb2ZpbGVfX2ltZ1wiOiB7XG4gICAgICAgICAgICAvL2hlaWdodDogXCIxMDAlXCIsXG4gICAgICAgICAgICAvL3dpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgICAgIGhlaWdodDogMTYwLFxuICAgICAgICAgICAgbWFyZ2luQm90dG9tOiA4LFxuICAgICAgICAgICAgLy9vYmplY3RGaXQ6IFwiY292ZXJcIlxuICAgICAgICB9LFxuICAgICAgICBcIiYgLnByb2ZpbGVfX25hbWVcIjoge1xuICAgICAgICAgICAgbWFyZ2luQm90dG9tOiAwLFxuICAgICAgICAgICAgY29sb3I6IHRoZW1lLmNvbG9yLmJsYWNrLFxuICAgICAgICAgICAgZm9udFNpemU6IHRoZW1lLmZvbnRTaXplW1wiMnhsXCJdLFxuICAgICAgICAgICAgZm9udFdlaWdodDogdGhlbWUuZm9udFdlaWdodC5ib2xkLFxuICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgICAgIH0sXG4gICAgICAgIFwiJiAucHJvZmlsZV9fdGl0bGVcIjoge1xuICAgICAgICAgICAgbWFyZ2luOiBcIjBweCAwcHggMTBweFwiLFxuICAgICAgICB9LFxuICAgICAgICBcIiYgLnByb2ZpbGVfX2xpbmtzXCI6IHtcbiAgICAgICAgICAgIGxpc3RTdHlsZTogXCJub25lXCIsXG4gICAgICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcblxuICAgICAgICAgICAgXCImIC5wcm9maWxlX19saW5rXCI6IHtcbiAgICAgICAgICAgICAgICBtYXJnaW5SaWdodDogOCxcblxuICAgICAgICAgICAgICAgIFwiJiBpbWdcIjoge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMjAsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMjAsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIGE6IHtcbiAgICAgICAgICAgIGNvbG9yOiB0aGVtZS5jb2xvci5ncmF5VGV4dCxcbiAgICAgICAgICAgIHRleHREZWNvcmF0aW9uOiBcInVuZGVybGluZVwiLFxuICAgICAgICAgICAgXCImOmhvdmVyXCI6IHtcbiAgICAgICAgICAgICAgICBjb2xvcjogdGhlbWUuY29sb3IucHJpbWFyeURhcmssXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgbXEoe30pLFxuKTtcblxuZXhwb3J0IGNvbnN0IFRlYW1QYXRoID0gc3R5bGVkKFwiaW1nXCIpKHtcbiAgICB3aWR0aDogXCIxMDAlXCIsXG59KTtcblxuZXhwb3J0IGNvbnN0IENvbnRyaWJ1dG9yc1dyYXBwZXIgPSBzdHlsZWQoXCJkaXZcIikoXG4gICAge1xuICAgICAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgICAgIG1heFdpZHRoOiAxMDAwLFxuICAgICAgICBkaXNwbGF5OiBcImdyaWRcIixcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgZ3JpZFRlbXBsYXRlQ29sdW1uczogW1wicmVwZWF0KDIsIDFmcilcIiwgXCJyZXBlYXQoNCwgMWZyKVwiLCBcInJlcGVhdCg1LCAxZnIpXCJdLFxuICAgICAgICBncmlkR2FwOiBbXCI4MHB4IDBweFwiLCBcIjYwcHggNzBweFwiXSxcbiAgICB9KSxcbik7XG5cbmV4cG9ydCBjb25zdCBDb250cmlidXRvckNhcmQgPSBzdHlsZWQoXCJkaXZcIikoXG4gICAge1xuICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgbWFyZ2luOiBcIjBweCBhdXRvXCIsXG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgbWF4V2lkdGg6IDE0MCxcbiAgICAgICAgdHJhbnNpdGlvbjogXCJ0cmFuc2Zvcm0gMjUwbXMgZWFzZS1vdXRcIixcbiAgICAgICAgY3Vyc29yOiBcInBvaW50ZXJcIixcblxuICAgICAgICBcIiY6aG92ZXJcIjoge1xuICAgICAgICAgICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZVkoLTVweCkgc2NhbGUoMS4wNSlcIixcbiAgICAgICAgfSxcblxuICAgICAgICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXG4gICAgICAgIFwiJiAuY2FyZF9faW1nXCI6IHtcbiAgICAgICAgICAgIGhlaWdodDogMTQwLFxuICAgICAgICAgICAgd2lkdGg6IDE0MCxcbiAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogMjAsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6IDgsXG4gICAgICAgIH0sXG4gICAgICAgIFwiJiAuY2FyZF9fbmFtZVwiOiB7XG4gICAgICAgICAgICBtYXJnaW5Cb3R0b206IDAsXG4gICAgICAgICAgICBjb2xvcjogdGhlbWUuY29sb3IuYmxhY2ssXG4gICAgICAgICAgICBmb250U2l6ZTogdGhlbWUuZm9udFNpemUuc20sXG4gICAgICAgICAgICBmb250V2VpZ2h0OiB0aGVtZS5mb250V2VpZ2h0LmJvbGQsXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIG1xKHt9KSxcbik7XG5cbmV4cG9ydCBjb25zdCBCdXR0b25XcmFwcGVyID0gc3R5bGVkKFwiZGl2XCIpKHtcbiAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICBtYXJnaW5Ub3A6IDUwLFxuXG4gICAgXCImIC5pY29uXCI6IHtcbiAgICAgICAgbWFyZ2luTGVmdDogMTYsXG4gICAgfSxcbn0pO1xuXG5leHBvcnQgY29uc3QgVHJhaXRzV3JhcHBlciA9IHN0eWxlZChcImRpdlwiKShcbiAgICB7XG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgbWF4V2lkdGg6IDk2MyxcbiAgICAgICAgZGlzcGxheTogXCJncmlkXCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIGdyaWRUZW1wbGF0ZUNvbHVtbnM6IFtcInJlcGVhdCgxLCAxZnIpXCIsIFwicmVwZWF0KDMsIDFmcilcIl0sXG4gICAgICAgIGdyaWRHYXA6IFtcIjQwcHggMHB4XCIsIFwiMHB4XCJdLFxuICAgIH0pLFxuKTtcblxuZXhwb3J0IGNvbnN0IFRyYWl0Q2FyZCA9IHN0eWxlZChcImRpdlwiKShcbiAgICB7XG4gICAgICAgIGJveFNpemluZzogXCJib3JkZXItYm94XCIsXG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgICBhbGlnbkl0ZW1zOiBcImZsZXgtc3RhcnRcIixcbiAgICAgICAgbWFyZ2luOiBcIjBweCBhdXRvXCIsXG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgbWF4V2lkdGg6IDMxOSxcbiAgICAgICAgaGVpZ2h0OiAyMTAsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUuY29sb3IubGlnaHRHcmF5LFxuICAgICAgICBwYWRkaW5nOiAzMCxcbiAgICAgICAgdGV4dEFsaWduOiBcImxlZnRcIixcblxuICAgICAgICBcIiYgLmNhcmRfX2ltZ1wiOiB7XG4gICAgICAgICAgICBoZWlnaHQ6IFwiYXV0b1wiLFxuICAgICAgICAgICAgd2lkdGg6IFwiYXV0b1wiLFxuICAgICAgICAgICAgbWFyZ2luQm90dG9tOiAyMCxcbiAgICAgICAgfSxcbiAgICAgICAgXCImIC5jYXJkX190aXRsZVwiOiB7XG4gICAgICAgICAgICBtYXJnaW5Cb3R0b206IDAsXG4gICAgICAgICAgICBjb2xvcjogdGhlbWUuY29sb3IuYmxhY2ssXG4gICAgICAgICAgICBmb250U2l6ZTogdGhlbWUuZm9udFNpemUubGcsXG4gICAgICAgICAgICBmb250V2VpZ2h0OiB0aGVtZS5mb250V2VpZ2h0LmJvbGQsXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgXCImLnNwYW5Ud29Sb3dzXCI6IHtcbiAgICAgICAgICAgIGdyaWRSb3c6IFtcIlwiLCBcIjIgLyA0XCJdLFxuICAgICAgICAgICAgZ3JpZENvbHVtbjogW1wiXCIsIFwiMlwiXSxcbiAgICAgICAgICAgIHBhZGRpbmc6IFswLCAwXSxcblxuICAgICAgICAgICAgXCImIC5jYXJkX19pbWdcIjoge1xuICAgICAgICAgICAgICAgIHdpZHRoOiBbXCIxMDAlXCJdLFxuICAgICAgICAgICAgICAgIGhlaWdodDogW1wiMTAwJVwiLCBcImF1dG9cIl0sXG4gICAgICAgICAgICAgICAgbWFyZ2luQm90dG9tOiBbMCwgMjBdLFxuICAgICAgICAgICAgICAgIG9iamVjdEZpdDogW1wiY292ZXJcIl0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0pLFxuKTtcblxuZXhwb3J0IGNvbnN0IE1vcmUgPSBzdHlsZWQoXCJkaXZcIikoe1xuICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICB6SW5kZXg6IDEsXG4gICAgYm94U2l6aW5nOiBcImJvcmRlci1ib3hcIixcbiAgICBtYXhXaWR0aDogOTAwLFxuICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICBwYWRkaW5nOiBcIjYwcHggMzBweFwiLFxuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUuY29sb3Iud2hpdGUsXG4gICAgYm94U2hhZG93OiBcIjBweCAwcHggMTBweCByZ2JhKDAsIDAsIDAsIDAuMDk4MDM5MilcIixcbiAgICBib3JkZXJSYWRpdXM6IDEyLFxuXG4gICAgXCImIC5pbWdcIjoge1xuICAgICAgICBtYXhXaWR0aDogMjA4LFxuICAgIH0sXG59KTtcblxuZXhwb3J0IGNvbnN0IE1lZGlhQ2FyZFdyYXBwZXIgPSBzdHlsZWQoXCJkaXZcIikoXG4gICAge1xuICAgICAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgICAgIG1heFdpZHRoOiA5NjMsXG4gICAgICAgIGRpc3BsYXk6IFwiZ3JpZFwiLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICBncmlkVGVtcGxhdGVDb2x1bW5zOiBbXCJyZXBlYXQoMSwgMWZyKVwiLCBcInJlcGVhdCgzLCAxZnIpXCJdLFxuICAgICAgICBncmlkR2FwOiBbXCI0MHB4IDBweFwiLCBcIjBweCAzMHB4XCJdLFxuICAgIH0pLFxuKTtcblxuZXhwb3J0IGNvbnN0IE1lZGlhS2l0Q2FyZCA9IHN0eWxlZChcImRpdlwiKShcbiAgICB7XG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLmNvbG9yLndoaXRlLFxuXG4gICAgICAgIHdpZHRoOiAzMDMsXG4gICAgICAgIGhlaWdodDogMjg2LFxuICAgICAgICBib3JkZXJSYWRpdXM6IDgsXG4gICAgICAgIHRyYW5zaXRpb246IFwidHJhbnNmb3JtIDMwMG1zIGVhc2UtaW5cIixcbiAgICAgICAgY3Vyc29yOiBcInBvaW50ZXJcIixcblxuICAgICAgICBcIiY6aG92ZXJcIjoge1xuICAgICAgICAgICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZVkoLTEwcHgpIHNjYWxlKDEuMDUpXCIsXG4gICAgICAgIH0sXG5cbiAgICAgICAgXCImIC5pbWdcIjoge1xuICAgICAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICAgICAgYm9yZGVyVG9wTGVmdFJhZGl1czogOCxcbiAgICAgICAgICAgIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiA4LFxuICAgICAgICB9LFxuXG4gICAgICAgIFwiJiAubGlua1wiOiB7XG4gICAgICAgICAgICBmb250U2l6ZTogdGhlbWUuZm9udFNpemUubGcsXG4gICAgICAgICAgICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXG4gICAgICAgICAgICBwYWRkaW5nOiAyNCxcbiAgICAgICAgICAgIGNvbG9yOiB0aGVtZS5jb2xvci5wcmltYXJ5RGFyayxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgbWFyZ2luOiBbXCIwIGF1dG9cIl0sXG4gICAgfSksXG4pO1xuXG5leHBvcnQgY29uc3QgRm91bmRlcnNWaWRlb1RpdGxlID0gc3R5bGVkKFwiaDNcIikoe1xuICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXG4gICAgcGFkZGluZ1RvcDogMjUsXG4gICAgZm9udFdlaWdodDogNzAwLFxuICAgIGZvbnRTaXplOiBcIjEuMTI1cmVtXCIsXG4gICAgbWFyZ2luQm90dG9tOiAzMCxcbn0pO1xuIl19 */"),g.Text=(0,c.default)("p",{target:"e1z6kuv10",label:"Text"})({fontSize:X.default.fontSize["2xl"],fontWeight:X.default.fontWeight.regular,lineHeight:"34px",marginTop:0,marginBottom:26,color:X.default.color.white,textAlign:"center"},(0,i.default)({maxWidth:[337,590],marginLeft:[0,"auto"],marginRight:[0,"auto"]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9iZXJuYXJkL1Byb2plY3RzL2hvb2xhL3NpdGUvc3JjL2NvbXBvbmVudHMvYWJvdXQtdXMvYWJvdXQtdXMtc3R5bGVzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW1Ob0IiLCJmaWxlIjoiL1VzZXJzL2Jlcm5hcmQvUHJvamVjdHMvaG9vbGEvc2l0ZS9zcmMvY29tcG9uZW50cy9hYm91dC11cy9hYm91dC11cy1zdHlsZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gXCJyZWFjdC1lbW90aW9uXCI7XG5pbXBvcnQgeyBjc3MgfSBmcm9tIFwiZW1vdGlvblwiO1xuaW1wb3J0IHRoZW1lIGZyb20gXCIuLi91dGlscy90aGVtZVwiO1xuaW1wb3J0IG1xIGZyb20gXCIuLi91dGlscy9icmVha3BvaW50c1wiO1xuLy8gYXNzZXRzXG5pbXBvcnQgY29udHJpYnV0b3JzQmcgZnJvbSBcIi4vYXNzZXRzL2Fib3V0LWNvbnRyaWJ1dG9ycy1iZy5zdmdcIjtcbmltcG9ydCBoZXJvQmcgZnJvbSBcIi4vYXNzZXRzL2Fib3V0LWhlcm8tYmcuc3ZnXCI7XG5pbXBvcnQgZG90c0JnIGZyb20gXCIuL2Fzc2V0cy9kb3RzLnN2Z1wiO1xuaW1wb3J0IGdvU2VydmVybGVzc0JnIGZyb20gXCIuL2Fzc2V0cy9iZ3dhdmVzLnN2Z1wiO1xuXG5leHBvcnQgY29uc3QgU2VjdGlvbldpdGhCYWNrZ3JvdW5kID0gc3R5bGVkKFwic2VjdGlvblwiKShcbiAgICB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUuY29sb3Iud2hpdGUsXG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIHpJbmRleDogMCxcbiAgICAgICAgYmFja2dyb3VuZEltYWdlOiBcInVybChcIiArIGhlcm9CZyArIFwiKVwiLFxuICAgICAgICBiYWNrZ3JvdW5kUmVwZWF0OiBcIm5vLXJlcGVhdFwiLFxuICAgICAgICAvL3BhZGRpbmc6IFwiMHB4IDE1cHhcIixcbiAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiBcImJvdHRvbVwiLFxuICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogXCJjb3ZlclwiLFxuICAgIH0sXG4gICAgbXEoe30pLFxuKTtcblxuZXhwb3J0IGNvbnN0IFNlY3Rpb25XaXRoV2F2ZXMgPSBzdHlsZWQoXCJzZWN0aW9uXCIpKFxuICAgIHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5jb2xvci53aGl0ZSxcbiAgICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgICAgekluZGV4OiAwLFxuICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IFwidXJsKFwiICsgZ29TZXJ2ZXJsZXNzQmcgKyBcIilcIixcbiAgICAgICAgYmFja2dyb3VuZFJlcGVhdDogXCJuby1yZXBlYXRcIixcbiAgICAgICAgYmFja2dyb3VuZFNpemU6IFwiY292ZXJcIixcbiAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiBcInRvcFwiLFxuICAgICAgICBwYWRkaW5nOiBcIjBweCAxNXB4XCIsXG4gICAgfSxcbiAgICBtcSh7fSksXG4pO1xuXG5leHBvcnQgY29uc3QgU2VjdGlvbldpdGhEb3RzID0gc3R5bGVkKFwic2VjdGlvblwiKShcbiAgICB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUuY29sb3Iud2hpdGUsXG4gICAgICAgIGJhY2tncm91bmRJbWFnZTogXCJ1cmwoXCIgKyBkb3RzQmcgKyBcIilcIixcbiAgICAgICAgYmFja2dyb3VuZFJlcGVhdFg6IFwicmVwZWF0XCIsXG4gICAgICAgIGJhY2tncm91bmRSZXBlYXRZOiBcIm5vLXJlcGVhdFwiLFxuICAgICAgICBiYWNrZ3JvdW5kUG9zaXRpb246IFwiYm90dG9tXCIsXG4gICAgICAgIHBhZGRpbmc6IFwiMHB4IDE1cHhcIixcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgYmFja2dyb3VuZFNpemU6IFtcImNvdmVyXCIsIFwiY29udGFpblwiXSxcbiAgICB9KSxcbik7XG5cbmV4cG9ydCBjb25zdCBTZWN0aW9uV2l0aEdyYXlSZWN0YW5nbGUgPSBzdHlsZWQoXCJzZWN0aW9uXCIpKFxuICAgIHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5jb2xvci53aGl0ZSxcbiAgICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgICAgekluZGV4OiAwLFxuICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IFwidXJsKFwiICsgY29udHJpYnV0b3JzQmcgKyBcIilcIixcbiAgICAgICAgYmFja2dyb3VuZFJlcGVhdDogXCJuby1yZXBlYXRcIixcbiAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiBcInRvcFwiLFxuICAgICAgICBwYWRkaW5nOiBcIjBweCAxNXB4XCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIGJhY2tncm91bmRTaXplOiBbXCJjb3ZlclwiXSxcbiAgICB9KSxcbik7XG5cbmV4cG9ydCBjb25zdCBTZWN0aW9uID0gc3R5bGVkKFwic2VjdGlvblwiKShcbiAgICB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUuY29sb3Iud2hpdGUsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIHBhZGRpbmc6IFtcIjEwMHB4IDE1cHhcIiwgXCI4MHB4IDE1cHhcIl0sXG4gICAgfSksXG4pO1xuXG5leHBvcnQgY29uc3QgVGVhbVNlY3Rpb24gPSBzdHlsZWQoXCJzZWN0aW9uXCIpKFxuICAgIHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5jb2xvci53aGl0ZSxcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgcGFkZGluZzogW1wiMHB4IDE1cHggMTAwcHhcIiwgXCIwcHggMTVweCA4MHB4XCJdLFxuICAgIH0pLFxuKTtcblxuZXhwb3J0IGNvbnN0IGhlcm9Db250YWluZXJDbGFzcyA9IGNzcyhcbiAgICB7XG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICBtYXhXaWR0aDogMTIwMCxcbiAgICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgICAgLy8gRm9yIFwiV2ViaW55SGFsbE1hcmtJbWFnZVwiXG4gICAgICAgIG92ZXJmbG93OiBcImhpZGRlblwiLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICB3aWR0aDogW1wiMTAwJVwiLCBcIjEwMCVcIl0sXG4gICAgICAgIGhlaWdodDogW1wiNTB2aFwiLCA0MDRdLFxuICAgICAgICBwYWRkaW5nOiBbXCIwcHggMHB4XCIsIFwiMHB4IDBweCAwcHhcIl0sXG4gICAgICAgIFwiQG1lZGlhIChtaW4td2lkdGg6IDIwMDBweClcIjoge1xuICAgICAgICAgICAgcGFkZGluZ0JvdHRvbTogODAsXG4gICAgICAgIH0sXG4gICAgfSksXG4pO1xuXG5leHBvcnQgY29uc3QgY29udHJpYnV0b3JzQ29udGFpbmVyQ2xhc3MgPSBjc3MoXG4gICAge1xuICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgbWF4V2lkdGg6IDEyMDAsXG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIHdpZHRoOiBbXCIxMDAlXCIsIFwiMTAwJVwiXSxcbiAgICAgICAgcGFkZGluZzogW1wiODBweCAwcHhcIiwgXCIxMjBweCAwcHggODBweFwiXSxcbiAgICB9KSxcbik7XG5cbmV4cG9ydCBjb25zdCB3ZWxjb21lQ29udGFpbmVyQ2xhc3MgPSBjc3MoXG4gICAge1xuICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgbWF4V2lkdGg6IDEyMDAsXG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIHdpZHRoOiBbXCIxMDAlXCIsIFwiMTAwJVwiXSxcbiAgICAgICAgcGFkZGluZzogW1wiMHB4IDBweFwiLCBcIjBweCAwcHggMHB4XCJdLFxuICAgIH0pLFxuKTtcblxuZXhwb3J0IGNvbnN0IGludmVzdG9yQ29udGFpbmVyQ2xhc3MgPSBjc3MoXG4gICAge1xuICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgbWF4V2lkdGg6IDEyMDAsXG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIHdpZHRoOiBbXCIxMDAlXCIsIFwiMTAwJVwiXSxcbiAgICAgICAgaGVpZ2h0OiBbXCI1MHZoXCIsIDUyNV0sXG4gICAgICAgIHBhZGRpbmc6IFtcIjBweCAwcHhcIiwgXCI4MHB4IDBweCAwcHhcIl0sXG4gICAgfSksXG4pO1xuXG5leHBvcnQgY29uc3QgbWVkaWFLaXRDb250YWluZXJDbGFzcyA9IGNzcyhcbiAgICB7XG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgbWF4V2lkdGg6IDEyMDAsXG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIHdpZHRoOiBbXCIxMDAlXCIsIFwiMTAwJVwiXSxcbiAgICAgICAgaGVpZ2h0OiBbXCJhdXRvXCIsIDYwMF0sXG4gICAgICAgIHBhZGRpbmc6IFtcIjgwcHggMHB4XCIsIFwiODBweCAwcHggMHB4XCJdLFxuICAgIH0pLFxuKTtcblxuZXhwb3J0IGNvbnN0IEhlcm9TZWN0aW9uV3JhcHBlciA9IHN0eWxlZChcImRpdlwiKShcbiAgICB7XG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgd2lkdGg6IFtcIjEwMCVcIiwgMTEwMF0sXG4gICAgICAgIGFsaWduSXRlbXM6IFtcImNlbnRlclwiXSxcbiAgICB9KSxcbik7XG5cbmV4cG9ydCBjb25zdCBXZWJpbnlIYWxsTWFya0ltYWdlID0gc3R5bGVkKFwiaW1nXCIpKFxuICAgIHtcbiAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgekluZGV4OiAxLFxuICAgICAgICB0b3A6IDAsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIHdpZHRoOiBbXCIxMDAlXCIsIFwiMTAwJVwiXSxcbiAgICAgICAgaGVpZ2h0OiBbXCIxMDAlXCIsIFwiYXV0b1wiXSxcbiAgICAgICAgbWF4SGVpZ2h0OiBbXCJ1bnNldFwiLCA3MDBdLFxuICAgIH0pLFxuKTtcblxuZXhwb3J0IGNvbnN0IFRpdGxlID0gc3R5bGVkKFwiaDFcIikoXG4gICAge1xuICAgICAgICBtYXhXaWR0aDogNzY4LFxuICAgICAgICBmb250U2l6ZTogdGhlbWUuZm9udFNpemVbXCI1eGxcIl0sXG4gICAgICAgIGZvbnRXZWlnaHQ6IHRoZW1lLmZvbnRXZWlnaHQuYm9sZCxcbiAgICAgICAgY29sb3I6IHRoZW1lLmNvbG9yLndoaXRlLFxuICAgICAgICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXG4gICAgICAgIGxpbmVIZWlnaHQ6IFwiNDhweFwiLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICBtYXJnaW46IFswLCBcIjBweCBhdXRvXCJdLFxuICAgIH0pLFxuKTtcblxuZXhwb3J0IGNvbnN0IFRpdGxlSGlnaGxpZ2h0ID0gc3R5bGVkKFwic3BhblwiKSh7XG4gICAgYmFja2dyb3VuZFBvc2l0aW9uWDogXCJyaWdodFwiLFxuICAgIGJhY2tncm91bmRQb3NpdGlvblk6IFwiYm90dG9tXCIsXG4gICAgYmFja2dyb3VuZFJlcGVhdDogXCJuby1yZXBlYXRcIixcbn0pO1xuXG5leHBvcnQgY29uc3QgVGV4dCA9IHN0eWxlZChcInBcIikoXG4gICAge1xuICAgICAgICBmb250U2l6ZTogdGhlbWUuZm9udFNpemVbXCIyeGxcIl0sXG4gICAgICAgIGZvbnRXZWlnaHQ6IHRoZW1lLmZvbnRXZWlnaHQucmVndWxhcixcbiAgICAgICAgbGluZUhlaWdodDogXCIzNHB4XCIsXG4gICAgICAgIG1hcmdpblRvcDogMCxcbiAgICAgICAgbWFyZ2luQm90dG9tOiAyNixcbiAgICAgICAgY29sb3I6IHRoZW1lLmNvbG9yLndoaXRlLFxuICAgICAgICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIG1heFdpZHRoOiBbMzM3LCA1OTBdLFxuICAgICAgICBtYXJnaW5MZWZ0OiBbMCwgXCJhdXRvXCJdLFxuICAgICAgICBtYXJnaW5SaWdodDogWzAsIFwiYXV0b1wiXSxcbiAgICB9KSxcbik7XG5cbmV4cG9ydCBjb25zdCBJbWFnZVdyYXBwZXIgPSBzdHlsZWQoXCJkaXZcIikoe1xuICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbn0pO1xuXG5leHBvcnQgY29uc3QgdmlkZW9QcmV2aWV3Q2xhc3MgPSBjc3Moe1xuICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgXCImIGltZ1wiOiB7XG4gICAgICAgIHdpZHRoOiBcIjk1JVwiLFxuICAgICAgICB0cmFuc2Zvcm06IFwidHJhbnNsYXRlKDIlLCAtMTAlKVwiLFxuICAgIH0sXG59KTtcblxuZXhwb3J0IGNvbnN0IFRlYW1XcmFwcGVyID0gc3R5bGVkKFwiZGl2XCIpKFxuICAgIHtcbiAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICBtYXhXaWR0aDogMTAwMCxcbiAgICAgICAgZGlzcGxheTogXCJncmlkXCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIGdyaWRUZW1wbGF0ZUNvbHVtbnM6IFtcInJlcGVhdCgxLCAxZnIpXCIsIFwicmVwZWF0KDQsIDFmcilcIl0sXG4gICAgICAgIGdyaWRHYXA6IFtcIjgwcHggMHB4XCIsIFwiNTBweCA3MHB4XCJdLFxuICAgIH0pLFxuKTtcblxuZXhwb3J0IGNvbnN0IFByb2ZpbGVDYXJkID0gc3R5bGVkKFwiZGl2XCIpKFxuICAgIHtcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgIG1hcmdpbjogXCIwcHggYXV0b1wiLFxuICAgICAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgICAgIG1heFdpZHRoOiAxOTAsXG5cbiAgICAgICAgdGV4dEFsaWduOiBcImNlbnRlclwiLFxuICAgICAgICBcIiYgLnByb2ZpbGVfX2ltZ1wiOiB7XG4gICAgICAgICAgICAvL2hlaWdodDogXCIxMDAlXCIsXG4gICAgICAgICAgICAvL3dpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgICAgIGhlaWdodDogMTYwLFxuICAgICAgICAgICAgbWFyZ2luQm90dG9tOiA4LFxuICAgICAgICAgICAgLy9vYmplY3RGaXQ6IFwiY292ZXJcIlxuICAgICAgICB9LFxuICAgICAgICBcIiYgLnByb2ZpbGVfX25hbWVcIjoge1xuICAgICAgICAgICAgbWFyZ2luQm90dG9tOiAwLFxuICAgICAgICAgICAgY29sb3I6IHRoZW1lLmNvbG9yLmJsYWNrLFxuICAgICAgICAgICAgZm9udFNpemU6IHRoZW1lLmZvbnRTaXplW1wiMnhsXCJdLFxuICAgICAgICAgICAgZm9udFdlaWdodDogdGhlbWUuZm9udFdlaWdodC5ib2xkLFxuICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgICAgIH0sXG4gICAgICAgIFwiJiAucHJvZmlsZV9fdGl0bGVcIjoge1xuICAgICAgICAgICAgbWFyZ2luOiBcIjBweCAwcHggMTBweFwiLFxuICAgICAgICB9LFxuICAgICAgICBcIiYgLnByb2ZpbGVfX2xpbmtzXCI6IHtcbiAgICAgICAgICAgIGxpc3RTdHlsZTogXCJub25lXCIsXG4gICAgICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcblxuICAgICAgICAgICAgXCImIC5wcm9maWxlX19saW5rXCI6IHtcbiAgICAgICAgICAgICAgICBtYXJnaW5SaWdodDogOCxcblxuICAgICAgICAgICAgICAgIFwiJiBpbWdcIjoge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMjAsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMjAsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIGE6IHtcbiAgICAgICAgICAgIGNvbG9yOiB0aGVtZS5jb2xvci5ncmF5VGV4dCxcbiAgICAgICAgICAgIHRleHREZWNvcmF0aW9uOiBcInVuZGVybGluZVwiLFxuICAgICAgICAgICAgXCImOmhvdmVyXCI6IHtcbiAgICAgICAgICAgICAgICBjb2xvcjogdGhlbWUuY29sb3IucHJpbWFyeURhcmssXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgbXEoe30pLFxuKTtcblxuZXhwb3J0IGNvbnN0IFRlYW1QYXRoID0gc3R5bGVkKFwiaW1nXCIpKHtcbiAgICB3aWR0aDogXCIxMDAlXCIsXG59KTtcblxuZXhwb3J0IGNvbnN0IENvbnRyaWJ1dG9yc1dyYXBwZXIgPSBzdHlsZWQoXCJkaXZcIikoXG4gICAge1xuICAgICAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgICAgIG1heFdpZHRoOiAxMDAwLFxuICAgICAgICBkaXNwbGF5OiBcImdyaWRcIixcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgZ3JpZFRlbXBsYXRlQ29sdW1uczogW1wicmVwZWF0KDIsIDFmcilcIiwgXCJyZXBlYXQoNCwgMWZyKVwiLCBcInJlcGVhdCg1LCAxZnIpXCJdLFxuICAgICAgICBncmlkR2FwOiBbXCI4MHB4IDBweFwiLCBcIjYwcHggNzBweFwiXSxcbiAgICB9KSxcbik7XG5cbmV4cG9ydCBjb25zdCBDb250cmlidXRvckNhcmQgPSBzdHlsZWQoXCJkaXZcIikoXG4gICAge1xuICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgbWFyZ2luOiBcIjBweCBhdXRvXCIsXG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgbWF4V2lkdGg6IDE0MCxcbiAgICAgICAgdHJhbnNpdGlvbjogXCJ0cmFuc2Zvcm0gMjUwbXMgZWFzZS1vdXRcIixcbiAgICAgICAgY3Vyc29yOiBcInBvaW50ZXJcIixcblxuICAgICAgICBcIiY6aG92ZXJcIjoge1xuICAgICAgICAgICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZVkoLTVweCkgc2NhbGUoMS4wNSlcIixcbiAgICAgICAgfSxcblxuICAgICAgICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXG4gICAgICAgIFwiJiAuY2FyZF9faW1nXCI6IHtcbiAgICAgICAgICAgIGhlaWdodDogMTQwLFxuICAgICAgICAgICAgd2lkdGg6IDE0MCxcbiAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogMjAsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6IDgsXG4gICAgICAgIH0sXG4gICAgICAgIFwiJiAuY2FyZF9fbmFtZVwiOiB7XG4gICAgICAgICAgICBtYXJnaW5Cb3R0b206IDAsXG4gICAgICAgICAgICBjb2xvcjogdGhlbWUuY29sb3IuYmxhY2ssXG4gICAgICAgICAgICBmb250U2l6ZTogdGhlbWUuZm9udFNpemUuc20sXG4gICAgICAgICAgICBmb250V2VpZ2h0OiB0aGVtZS5mb250V2VpZ2h0LmJvbGQsXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIG1xKHt9KSxcbik7XG5cbmV4cG9ydCBjb25zdCBCdXR0b25XcmFwcGVyID0gc3R5bGVkKFwiZGl2XCIpKHtcbiAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICBtYXJnaW5Ub3A6IDUwLFxuXG4gICAgXCImIC5pY29uXCI6IHtcbiAgICAgICAgbWFyZ2luTGVmdDogMTYsXG4gICAgfSxcbn0pO1xuXG5leHBvcnQgY29uc3QgVHJhaXRzV3JhcHBlciA9IHN0eWxlZChcImRpdlwiKShcbiAgICB7XG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgbWF4V2lkdGg6IDk2MyxcbiAgICAgICAgZGlzcGxheTogXCJncmlkXCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIGdyaWRUZW1wbGF0ZUNvbHVtbnM6IFtcInJlcGVhdCgxLCAxZnIpXCIsIFwicmVwZWF0KDMsIDFmcilcIl0sXG4gICAgICAgIGdyaWRHYXA6IFtcIjQwcHggMHB4XCIsIFwiMHB4XCJdLFxuICAgIH0pLFxuKTtcblxuZXhwb3J0IGNvbnN0IFRyYWl0Q2FyZCA9IHN0eWxlZChcImRpdlwiKShcbiAgICB7XG4gICAgICAgIGJveFNpemluZzogXCJib3JkZXItYm94XCIsXG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgICBhbGlnbkl0ZW1zOiBcImZsZXgtc3RhcnRcIixcbiAgICAgICAgbWFyZ2luOiBcIjBweCBhdXRvXCIsXG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgbWF4V2lkdGg6IDMxOSxcbiAgICAgICAgaGVpZ2h0OiAyMTAsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUuY29sb3IubGlnaHRHcmF5LFxuICAgICAgICBwYWRkaW5nOiAzMCxcbiAgICAgICAgdGV4dEFsaWduOiBcImxlZnRcIixcblxuICAgICAgICBcIiYgLmNhcmRfX2ltZ1wiOiB7XG4gICAgICAgICAgICBoZWlnaHQ6IFwiYXV0b1wiLFxuICAgICAgICAgICAgd2lkdGg6IFwiYXV0b1wiLFxuICAgICAgICAgICAgbWFyZ2luQm90dG9tOiAyMCxcbiAgICAgICAgfSxcbiAgICAgICAgXCImIC5jYXJkX190aXRsZVwiOiB7XG4gICAgICAgICAgICBtYXJnaW5Cb3R0b206IDAsXG4gICAgICAgICAgICBjb2xvcjogdGhlbWUuY29sb3IuYmxhY2ssXG4gICAgICAgICAgICBmb250U2l6ZTogdGhlbWUuZm9udFNpemUubGcsXG4gICAgICAgICAgICBmb250V2VpZ2h0OiB0aGVtZS5mb250V2VpZ2h0LmJvbGQsXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgXCImLnNwYW5Ud29Sb3dzXCI6IHtcbiAgICAgICAgICAgIGdyaWRSb3c6IFtcIlwiLCBcIjIgLyA0XCJdLFxuICAgICAgICAgICAgZ3JpZENvbHVtbjogW1wiXCIsIFwiMlwiXSxcbiAgICAgICAgICAgIHBhZGRpbmc6IFswLCAwXSxcblxuICAgICAgICAgICAgXCImIC5jYXJkX19pbWdcIjoge1xuICAgICAgICAgICAgICAgIHdpZHRoOiBbXCIxMDAlXCJdLFxuICAgICAgICAgICAgICAgIGhlaWdodDogW1wiMTAwJVwiLCBcImF1dG9cIl0sXG4gICAgICAgICAgICAgICAgbWFyZ2luQm90dG9tOiBbMCwgMjBdLFxuICAgICAgICAgICAgICAgIG9iamVjdEZpdDogW1wiY292ZXJcIl0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0pLFxuKTtcblxuZXhwb3J0IGNvbnN0IE1vcmUgPSBzdHlsZWQoXCJkaXZcIikoe1xuICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICB6SW5kZXg6IDEsXG4gICAgYm94U2l6aW5nOiBcImJvcmRlci1ib3hcIixcbiAgICBtYXhXaWR0aDogOTAwLFxuICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICBwYWRkaW5nOiBcIjYwcHggMzBweFwiLFxuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUuY29sb3Iud2hpdGUsXG4gICAgYm94U2hhZG93OiBcIjBweCAwcHggMTBweCByZ2JhKDAsIDAsIDAsIDAuMDk4MDM5MilcIixcbiAgICBib3JkZXJSYWRpdXM6IDEyLFxuXG4gICAgXCImIC5pbWdcIjoge1xuICAgICAgICBtYXhXaWR0aDogMjA4LFxuICAgIH0sXG59KTtcblxuZXhwb3J0IGNvbnN0IE1lZGlhQ2FyZFdyYXBwZXIgPSBzdHlsZWQoXCJkaXZcIikoXG4gICAge1xuICAgICAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgICAgIG1heFdpZHRoOiA5NjMsXG4gICAgICAgIGRpc3BsYXk6IFwiZ3JpZFwiLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICBncmlkVGVtcGxhdGVDb2x1bW5zOiBbXCJyZXBlYXQoMSwgMWZyKVwiLCBcInJlcGVhdCgzLCAxZnIpXCJdLFxuICAgICAgICBncmlkR2FwOiBbXCI0MHB4IDBweFwiLCBcIjBweCAzMHB4XCJdLFxuICAgIH0pLFxuKTtcblxuZXhwb3J0IGNvbnN0IE1lZGlhS2l0Q2FyZCA9IHN0eWxlZChcImRpdlwiKShcbiAgICB7XG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLmNvbG9yLndoaXRlLFxuXG4gICAgICAgIHdpZHRoOiAzMDMsXG4gICAgICAgIGhlaWdodDogMjg2LFxuICAgICAgICBib3JkZXJSYWRpdXM6IDgsXG4gICAgICAgIHRyYW5zaXRpb246IFwidHJhbnNmb3JtIDMwMG1zIGVhc2UtaW5cIixcbiAgICAgICAgY3Vyc29yOiBcInBvaW50ZXJcIixcblxuICAgICAgICBcIiY6aG92ZXJcIjoge1xuICAgICAgICAgICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZVkoLTEwcHgpIHNjYWxlKDEuMDUpXCIsXG4gICAgICAgIH0sXG5cbiAgICAgICAgXCImIC5pbWdcIjoge1xuICAgICAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICAgICAgYm9yZGVyVG9wTGVmdFJhZGl1czogOCxcbiAgICAgICAgICAgIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiA4LFxuICAgICAgICB9LFxuXG4gICAgICAgIFwiJiAubGlua1wiOiB7XG4gICAgICAgICAgICBmb250U2l6ZTogdGhlbWUuZm9udFNpemUubGcsXG4gICAgICAgICAgICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXG4gICAgICAgICAgICBwYWRkaW5nOiAyNCxcbiAgICAgICAgICAgIGNvbG9yOiB0aGVtZS5jb2xvci5wcmltYXJ5RGFyayxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgbWFyZ2luOiBbXCIwIGF1dG9cIl0sXG4gICAgfSksXG4pO1xuXG5leHBvcnQgY29uc3QgRm91bmRlcnNWaWRlb1RpdGxlID0gc3R5bGVkKFwiaDNcIikoe1xuICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXG4gICAgcGFkZGluZ1RvcDogMjUsXG4gICAgZm9udFdlaWdodDogNzAwLFxuICAgIGZvbnRTaXplOiBcIjEuMTI1cmVtXCIsXG4gICAgbWFyZ2luQm90dG9tOiAzMCxcbn0pO1xuIl19 */"),g.ImageWrapper=(0,c.default)("div",{target:"e1z6kuv11",label:"ImageWrapper"})({display:"flex",flexDirection:"column",alignItems:"center",width:"100%",position:"relative"},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),g.videoPreviewClass=(0,b.css)({position:"absolute","& img":{width:"95%",transform:"translate(2%, -10%)"}},"label:videoPreviewClass;","/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),g.TeamWrapper=(0,c.default)("div",{target:"e1z6kuv12",label:"TeamWrapper"})({width:"100%",maxWidth:1e3,display:"grid"},(0,i.default)({gridTemplateColumns:["repeat(1, 1fr)","repeat(4, 1fr)"],gridGap:["80px 0px","50px 70px"]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),g.ProfileCard=(0,c.default)("div",{target:"e1z6kuv13",label:"ProfileCard"})({display:"flex",flexDirection:"column",alignItems:"center",margin:"0px auto",width:"100%",maxWidth:190,textAlign:"center","& .profile__img":{height:160,marginBottom:8},"& .profile__name":{marginBottom:0,color:X.default.color.black,fontSize:X.default.fontSize["2xl"],fontWeight:X.default.fontWeight.bold,justifyContent:"center"},"& .profile__title":{margin:"0px 0px 10px"},"& .profile__links":{listStyle:"none",display:"flex","& .profile__link":{marginRight:8,"& img":{width:20,height:20}}},a:{color:X.default.color.grayText,textDecoration:"underline","&:hover":{color:X.default.color.primaryDark}}},(0,i.default)({}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),g.TeamPath=(0,c.default)("img",{target:"e1z6kuv14",label:"TeamPath"})({width:"100%"},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),g.ContributorsWrapper=(0,c.default)("div",{target:"e1z6kuv15",label:"ContributorsWrapper"})({width:"100%",maxWidth:1e3,display:"grid"},(0,i.default)({gridTemplateColumns:["repeat(2, 1fr)","repeat(4, 1fr)","repeat(5, 1fr)"],gridGap:["80px 0px","60px 70px"]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),g.ContributorCard=(0,c.default)("div",{target:"e1z6kuv16",label:"ContributorCard"})({display:"flex",flexDirection:"column",alignItems:"center",margin:"0px auto",width:"100%",maxWidth:140,transition:"transform 250ms ease-out",cursor:"pointer","&:hover":{transform:"translateY(-5px) scale(1.05)"},textAlign:"center","& .card__img":{height:140,width:140,marginBottom:20,borderRadius:8},"& .card__name":{marginBottom:0,color:X.default.color.black,fontSize:X.default.fontSize.sm,fontWeight:X.default.fontWeight.bold,justifyContent:"center"}},(0,i.default)({}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),g.ButtonWrapper=(0,c.default)("div",{target:"e1z6kuv17",label:"ButtonWrapper"})({display:"flex",justifyContent:"center",marginTop:50,"& .icon":{marginLeft:16}},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),g.TraitsWrapper=(0,c.default)("div",{target:"e1z6kuv18",label:"TraitsWrapper"})({width:"100%",maxWidth:963,display:"grid"},(0,i.default)({gridTemplateColumns:["repeat(1, 1fr)","repeat(3, 1fr)"],gridGap:["40px 0px","0px"]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),g.TraitCard=(0,c.default)("div",{target:"e1z6kuv19",label:"TraitCard"})({boxSizing:"border-box",display:"flex",flexDirection:"column",alignItems:"flex-start",margin:"0px auto",width:"100%",maxWidth:319,height:210,backgroundColor:X.default.color.lightGray,padding:30,textAlign:"left","& .card__img":{height:"auto",width:"auto",marginBottom:20},"& .card__title":{marginBottom:0,color:X.default.color.black,fontSize:X.default.fontSize.lg,fontWeight:X.default.fontWeight.bold,justifyContent:"center"}},(0,i.default)({"&.spanTwoRows":{gridRow:["","2 / 4"],gridColumn:["","2"],padding:[0,0],"& .card__img":{width:["100%"],height:["100%","auto"],marginBottom:[0,20],objectFit:["cover"]}}}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),g.More=(0,c.default)("div",{target:"e1z6kuv20",label:"More"})({display:"flex",flexDirection:"column",alignItems:"center",zIndex:1,boxSizing:"border-box",maxWidth:900,width:"100%",padding:"60px 30px",backgroundColor:X.default.color.white,boxShadow:"0px 0px 10px rgba(0, 0, 0, 0.0980392)",borderRadius:12,"& .img":{maxWidth:208}},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),g.MediaCardWrapper=(0,c.default)("div",{target:"e1z6kuv21",label:"MediaCardWrapper"})({width:"100%",maxWidth:963,display:"grid"},(0,i.default)({gridTemplateColumns:["repeat(1, 1fr)","repeat(3, 1fr)"],gridGap:["40px 0px","0px 30px"]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),g.MediaKitCard=(0,c.default)("div",{target:"e1z6kuv22",label:"MediaKitCard"})({display:"flex",flexDirection:"column",alignItems:"center",backgroundColor:X.default.color.white,width:303,height:286,borderRadius:8,transition:"transform 300ms ease-in",cursor:"pointer","&:hover":{transform:"translateY(-10px) scale(1.05)"},"& .img":{width:"100%",borderTopLeftRadius:8,borderTopRightRadius:8},"& .link":{fontSize:X.default.fontSize.lg,textAlign:"center",padding:24,color:X.default.color.primaryDark}},(0,i.default)({margin:["0 auto"]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),g.FoundersVideoTitle=(0,c.default)("h3",{target:"e1z6kuv23",label:"FoundersVideoTitle"})({width:"100%",textAlign:"center",paddingTop:25,fontWeight:700,fontSize:"1.125rem",marginBottom:30},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")}}]);
//# sourceMappingURL=c8033391-2d7750440004752cd7f3.js.map