(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{"9LKZ":function(I,g,C){"use strict";var A=C("TqRt");g.__esModule=!0,g.default=void 0;var b=A(C("QILm")),G=A(C("q1tI")),c=A(C("VIIK")),l=C("PAeb"),X=A(C("slAs")),d=A(C("0uQq")),B=A(C("uOxL")),Z=C("lv+v"),i=A(C("NMLQ")),W=A(C("m7zu")),u=A(C("8QCk")),x=A(C("t903")),m=A(C("1x2/"));const Y=["children"],F=(0,c.default)("span",{target:"e6hl26r0",label:"Bold"})({fontWeight:600},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),a=(0,l.css)({},(0,d.default)({marginTop:[75,100]}),"label:hero;","/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),v=(0,c.default)("h1",{target:"e6hl26r1",label:"Title"})({fontSize:32,fontWeight:X.default.fontWeight.semiBold,marginBottom:25,textAlign:"center"},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),y=(0,c.default)("h2",{target:"e6hl26r2",label:"SubTitle"})({paddingTop:0,marginTop:50,marginBottom:50,textAlign:"center"},(0,d.default)({fontSize:[32,48]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9iZXJuYXJkL1Byb2plY3RzL2hvb2xhL3NpdGUvc3JjL2NvbXBvbmVudHMvc3RhdGljL3N3YWcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBK0JpQiIsImZpbGUiOiIvVXNlcnMvYmVybmFyZC9Qcm9qZWN0cy9ob29sYS9zaXRlL3NyYy9jb21wb25lbnRzL3N0YXRpYy9zd2FnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwicmVhY3QtZW1vdGlvblwiO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSBcImVtb3Rpb25cIjtcbmltcG9ydCB0aGVtZSBmcm9tIFwiLi4vdXRpbHMvdGhlbWVcIjtcbmltcG9ydCBtcSBmcm9tIFwiLi4vdXRpbHMvYnJlYWtwb2ludHNcIjtcbmltcG9ydCBDb250ZW50Q29udGFpbmVyIGZyb20gXCIuLi91aS9jb250ZW50LWNvbnRhaW5lclwiO1xuaW1wb3J0IHsgR3JpZCwgQ2VsbCB9IGZyb20gXCIuLi91aS9sYXlvdXQvbGF5b3V0XCI7XG5pbXBvcnQgd2ViaW55U2hpcnQgZnJvbSBcIi4vYXNzZXRzL3dlYmlueS1zaGlydC5wbmdcIjtcbmltcG9ydCB3ZWJpbnlTdGlja2VycyBmcm9tIFwiLi9hc3NldHMvd2ViaW55LXN0aWNrZXJzLnBuZ1wiO1xuaW1wb3J0IHdlYmlueVNoaXJ0QW5kU3RpY2tlcnMgZnJvbSBcIi4vYXNzZXRzL3dlYmlueS1zaGlydC1hbmQtc3RpY2tlcnMucG5nXCI7XG5pbXBvcnQgYW1iYXNzYWRvckJnIGZyb20gXCIuL2Fzc2V0cy93ZWJpbnktYW1iYXNzYWRvci1iZy5zdmdcIjtcbmltcG9ydCBhbWJhc3NhZG9yQmFkZ2UgZnJvbSBcIi4vYXNzZXRzL3dlYmlueS1hbWJhc3NhZG9yLWJhZGdlLnN2Z1wiO1xuXG5jb25zdCBCb2xkID0gc3R5bGVkKFwic3BhblwiKSh7XG4gICAgZm9udFdlaWdodDogNjAwLFxufSk7XG5cbmNvbnN0IGhlcm8gPSBjc3MoXG4gICAge30sXG4gICAgbXEoe1xuICAgICAgICBtYXJnaW5Ub3A6IFs3NSwgMTAwXSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IFRpdGxlID0gc3R5bGVkKFwiaDFcIikoe1xuICAgIGZvbnRTaXplOiAzMixcbiAgICBmb250V2VpZ2h0OiB0aGVtZS5mb250V2VpZ2h0LnNlbWlCb2xkLFxuICAgIG1hcmdpbkJvdHRvbTogMjUsXG4gICAgdGV4dEFsaWduOiBcImNlbnRlclwiLFxufSk7XG5cbmNvbnN0IFN1YlRpdGxlID0gc3R5bGVkKFwiaDJcIikoXG4gICAge1xuICAgICAgICBwYWRkaW5nVG9wOiAwLFxuICAgICAgICBtYXJnaW5Ub3A6IDUwLFxuICAgICAgICBtYXJnaW5Cb3R0b206IDUwLFxuICAgICAgICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIGZvbnRTaXplOiBbMzIsIDQ4XSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IEludHJvVGV4dFdyYXBwZXIgPSBzdHlsZWQoXCJkaXZcIikoXG4gICAge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiI2YyZWVjYlwiLFxuICAgICAgICBib3JkZXJSYWRpdXM6IDEwLFxuICAgICAgICBib3hTaGFkb3c6IFwiMCAycHggNHB4IDAgcmdiYSgyMDksMjA5LDIwOSwwLjUwKVwiLFxuICAgICAgICBib3hTaXppbmc6IFwiYm9yZGVyLWJveFwiLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICBwYWRkaW5nOiBbMjUsIDUwXSxcbiAgICAgICAgd2lkdGg6IFtcImF1dG9cIiwgNjAwXSxcbiAgICAgICAgbWFyZ2luOiBbMTUsIFwiMCBhdXRvXCJdLFxuICAgIH0pLFxuKTtcblxuY29uc3QgSW50cm9UZXh0ID0gc3R5bGVkKFwicFwiKShcbiAgICB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5jb2xvci5ibGFjayxcbiAgICAgICAgdGV4dEFsaWduOiBcImp1c3RpZnlcIixcbiAgICAgICAgXCImOmxhc3QtY2hpbGRcIjoge1xuICAgICAgICAgICAgbWFyZ2luQm90dG9tOiAwLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICBmb250U2l6ZTogWzIwLCAyNF0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBEaXZpZGVyID0gc3R5bGVkKFwiZGl2XCIpKHtcbiAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgaGVpZ2h0OiAyMCxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiI0Y0RjZGOFwiLFxuICAgIGJvcmRlclRvcDogXCIxcHggc29saWQgI0U1RTVFNVwiLFxuICAgIGJvcmRlckJvdHRvbTogXCIxcHggc29saWQgI0U1RTVFNVwiLFxufSk7XG5cbmNvbnN0IGNvbnRhaW5lclN0eWxlID0gY3NzKHtcbiAgICBtYXhXaWR0aDogMTEwMCxcbiAgICBtYXJnaW5Cb3R0b206IDUwLFxuICAgIFwiLm5vdGljZVwiOiB7XG4gICAgICAgIGZvbnRTaXplOiAxMixcbiAgICAgICAgY29sb3I6IHRoZW1lLmNvbG9yLmdyYXlUZXh0LFxuICAgIH0sXG59KTtcblxuY29uc3Qgc3dhZ0ltYWdlID0gY3NzKHtcbiAgICB3aWR0aDogXCIzNTBweCAhaW1wb3J0YW50XCIsXG4gICAgaGVpZ2h0OiBcImF1dG8gIWltcG9ydGFudFwiLFxuICAgIGRpc3BsYXk6IFwiYmxvY2tcIixcbiAgICBtYXJnaW46IFwiMCBhdXRvXCIsXG59KTtcblxuY29uc3QgYW1iYXNzYWRvckJsb2NrID0gY3NzKFxuICAgIHtcbiAgICAgICAgYmFja2dyb3VuZDogXCJ1cmwoXCIgKyBhbWJhc3NhZG9yQmcgKyBcIikgbm8tcmVwZWF0IGNlbnRlciB0b3BcIixcbiAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICBib3hTaXppbmc6IFwiYm9yZGVyLWJveFwiLFxuICAgICAgICBtYXJnaW5Cb3R0b206IDAsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIHBhZGRpbmc6IFtcIjEwMHB4IDIwcHggMjVweFwiLCBcIjE1MHB4IDAgMjVweFwiXSxcbiAgICAgICAgYmFja2dyb3VuZFNpemU6IFtcImNvdmVyXCJdLFxuICAgICAgICBiYWNrZ3JvdW5kUG9zaXRpb246IFtcInRvcFwiLCBcInRvcFwiXSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IGFtYmFzc2Fkb3JDb250ZW50ID0gY3NzKHtcbiAgICBoMjoge1xuICAgICAgICBmb250U2l6ZTogdGhlbWUuZm9udFNpemUuaDIsXG4gICAgICAgIGNvbG9yOiB0aGVtZS5jb2xvci53aGl0ZSxcbiAgICB9LFxuICAgIHA6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLmNvbG9yLndoaXRlLFxuICAgIH0sXG4gICAgdWw6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLmNvbG9yLndoaXRlLFxuICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICBtYXJnaW46IFwiLTIwcHggMCAyMHB4IDBcIixcbiAgICAgICAgbGk6IHtcbiAgICAgICAgICAgIG1hcmdpbkxlZnQ6IDIwLFxuICAgICAgICAgICAgZm9udFNpemU6IDIwLFxuICAgICAgICAgICAgdGV4dEFsaWduOiBcImxlZnRcIixcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIFwiLmpvaW5UZWFtXCI6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLmNvbG9yLndoaXRlLFxuICAgICAgICBmb250U2l6ZTogMjAsXG4gICAgICAgIGZvbnRXZWlnaHQ6IDYwMCxcbiAgICAgICAgZGlzcGxheTogXCJpbmxpbmUtYmxvY2tcIixcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcIiNGNUE3MjNcIixcbiAgICAgICAgcGFkZGluZzogXCIycHggNHB4XCIsXG4gICAgICAgIGJvcmRlclJhZGl1czogNSxcbiAgICB9LFxufSk7XG5cbmNvbnN0IGNsYWltU3dhZ0Jsb2NrID0gY3NzKFxuICAgIHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcIiMyOTI5MjlcIixcbiAgICAgICAgY29sb3I6IHRoZW1lLmNvbG9yLndoaXRlLFxuICAgICAgICBwYWRkaW5nOiBcIjUwcHggMCAxNTBweCAwXCIsXG4gICAgICAgIHA6IHtcbiAgICAgICAgICAgIGZvbnRTaXplOiAyMCxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgbWFyZ2luQm90dG9tOiBbLTEwMCwgLTEwMCwgLTE1MF0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBDbGFpbUluc3RydWN0aW9ucyA9IHN0eWxlZChcImRpdlwiKShcbiAgICB7XG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJzcGFjZS1iZXR3ZWVuXCIsXG4gICAgICAgIGZvbnRTaXplOiAyMCxcbiAgICAgICAgdWw6IHtcbiAgICAgICAgICAgIGNvbG9yOiB0aGVtZS5jb2xvci53aGl0ZSxcbiAgICAgICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAgICAgICBtYXJnaW46IFwiMTBweCAwIDI1cHggMjBweFwiLFxuICAgICAgICAgICAgbGk6IHtcbiAgICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiAyMCxcbiAgICAgICAgICAgICAgICBmb250U2l6ZTogMjAsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICBmbGV4RGlyZWN0aW9uOiBbXCJjb2x1bW5cIiwgXCJyb3dcIl0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBDbGFpbU5vdGUgPSBzdHlsZWQoXCJwXCIpKHtcbiAgICBmb250U2l6ZTogXCIxNHB4ICFpbXBvcnRhbnRcIixcbiAgICBjb2xvcjogXCIjOUI5QjlCXCIsXG4gICAgdGV4dEFsaWduOiBcImNlbnRlclwiLFxuICAgIG1hcmdpblRvcDogMjUsXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgKHsgY2hpbGRyZW4sIC4uLnByb3BzIH0pID0+IChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgIDxDb250ZW50Q29udGFpbmVyIGNsYXNzTmFtZT17Y29udGFpbmVyU3R5bGUgKyBcIiBcIiArIGhlcm99PlxuICAgICAgICAgICAgPEludHJvVGV4dFdyYXBwZXI+XG4gICAgICAgICAgICAgICAgPFRpdGxlPlxuICAgICAgICAgICAgICAgICAgICBGUkVFIFNXQUdcbiAgICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgICAgIHtcIntcIn1mb3IgYWxsIG91ciBjb250cmlidXRvcnMgYW5kIHN1cHBvcnRlcnN7XCJ9XCJ9XG4gICAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICA8L1RpdGxlPlxuICAgICAgICAgICAgICAgIDxJbnRyb1RleHQ+XG4gICAgICAgICAgICAgICAgICAgIFRvIHNob3cgb3VyIGFwcHJlY2lhdGlvbiB0byBhbGwgb3VyIGNvbnRyaWJ1dG9ycyBhbmQgc3VwcG9ydGVycywgd2UgYXJlIGdpdmluZ1xuICAgICAgICAgICAgICAgICAgICBhd2F5IGZyZWUgc3dhZy4gVGhlIHNlY3Rpb24gYmVsb3cgZGVmaW5lcyB3aGF0IHN3YWcgaXMgYXZhaWxhYmxlLCBhbmQgaG93IHlvdVxuICAgICAgICAgICAgICAgICAgICBjYW4gY2xhaW0geW91cnMuXG4gICAgICAgICAgICAgICAgPC9JbnRyb1RleHQ+XG4gICAgICAgICAgICAgICAgPEludHJvVGV4dD5cbiAgICAgICAgICAgICAgICAgICAgPEJvbGQ+V2h5IGFyZSB3ZSBkb2luZyB0aGlzPzwvQm9sZD5cbiAgICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgICAgIEFuIG9wZW4tc291cmNlIHByb2plY3QsIHN1Y2ggYXMgb3VycywgY2Fu4oCZdCBleGlzdCB3aXRob3V0IGEgY29tbXVuaXR5IGFyb3VuZCBpdC5cbiAgICAgICAgICAgICAgICAgICAgVGhlIGNvbW11bml0eSBjb250cmlidXRlcyBhbmQgaW1wcm92ZXMgdGhlIHByb2plY3QuIFRoaXMgaXMgdGhlIHNlY3JldFxuICAgICAgICAgICAgICAgICAgICBpbmdyZWRpZW50IHRvIGEgZ3JlYXQgb3Blbi1zb3VyY2UgcHJvZHVjdC4gQXQgSG9vbGEgQUkgd2UgZGVjaWRlZCB0byBvZmZlciBhXG4gICAgICAgICAgICAgICAgICAgIGxpdHRsZSB0b2tlbiBvZiBhcHByZWNpYXRpb24gdG8gYWxsIG91ciBjb21tdW5pdHkgbWVtYmVycy5cbiAgICAgICAgICAgICAgICA8L0ludHJvVGV4dD5cbiAgICAgICAgICAgICAgICA8SW50cm9UZXh0PlxuICAgICAgICAgICAgICAgICAgICBUaGlzIG1pZ2h0IGxvb2sgbGlrZSBmcmVlIG1hcmtldGluZywgYnV0IG91ciBnb2FsIGlzIHNpbmNlcmUuIEJ1aWxkaW5nIGFcbiAgICAgICAgICAgICAgICAgICAgY29tbXVuaXR5IGFyb3VuZCBIb29sYSBBSSBhbmQgYWR2YW5jaW5nIHRoZSBhZG9wdGlvbiBvZiBzZXJ2ZXJsZXNzIHRlY2hub2xvZ3kuXG4gICAgICAgICAgICAgICAgPC9JbnRyb1RleHQ+XG4gICAgICAgICAgICAgICAgPEludHJvVGV4dD5cbiAgICAgICAgICAgICAgICAgICAgSWYgeW91IHNoYXJlIHRoZSBzYW1lIGdvYWwsIGp1bXAgaW4gYW5kIGhlbHAgdXMgc3ByZWFkIHRoZSB3b3JkLlxuICAgICAgICAgICAgICAgIDwvSW50cm9UZXh0PlxuICAgICAgICAgICAgICAgIDxJbnRyb1RleHQgc3R5bGU9e3sgdGV4dEFsaWduOiBcInJpZ2h0XCIgfX0+U3ZlbiwgQ28tZm91bmRlciAmIENFTzwvSW50cm9UZXh0PlxuICAgICAgICAgICAgPC9JbnRyb1RleHRXcmFwcGVyPlxuICAgICAgICA8L0NvbnRlbnRDb250YWluZXI+XG4gICAgICAgIDxEaXZpZGVyIC8+XG4gICAgICAgIDxDb250ZW50Q29udGFpbmVyIGNsYXNzTmFtZT17Y29udGFpbmVyU3R5bGV9PlxuICAgICAgICAgICAgPFN1YlRpdGxlPldoYXTigJlzIEF2YWlsYWJsZSBmb3IgR3JhYnM8L1N1YlRpdGxlPlxuICAgICAgICAgICAgPEdyaWQgcmlnaHQ+XG4gICAgICAgICAgICAgICAgPENlbGwgdGl0bGU9XCJTcHJlYWQgdGhlIEtub3dsZWRnZVwiPlxuICAgICAgICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICAgICAgICAgIFlvdSBoYXZlIGNyZWF0ZWQgYSBibG9nIHBvc3QsIGEgdHV0b3JpYWwgb3IgYSB2aWRlbyBndWlkZSBmb3IgSG9vbGEgQUkgcmVsYXRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudD8gV2Ugd291bGQgbG92ZSB0byBrbm93IGFib3V0IGl0LCBzbyB3ZSBjYW4gc3ByZWFkIHRoZSB3b3JkIHRocm91Z2hcbiAgICAgICAgICAgICAgICAgICAgICAgIG91ciBjaGFubmVscy4gT24gdG9wIG9mIHRoYXQsIHdl4oCZbGwgc2VuZCB5b3UgYSBIb29sYSBBSSBicmFuZGVkIHQtc2hpcnQuXG4gICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPXtcIm5vdGljZVwifT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+Tm90ZTo8L3N0cm9uZz4gQmVmb3JlIGNvbW1pdGluZyB5b3VyIHRpbWUgdG8gd3JpdGluZyBhIHR1dG9yaWFsLCB3ZVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVjb21tZW5kIHlvdSBnaXZlIHVzIGEgcGluZyBvdXIgb3VyIDxhIGhyZWY9XCIvc2xhY2tcIj5jb21tdW5pdHkgc2xhY2s8L2E+IHNvXG4gICAgICAgICAgICAgICAgICAgICAgICB3ZSBtYWtlIHN1cmUgaXQncyBhIHZhbHVhYmxlIGNvbnRyaWJ1dGlvbi5cbiAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgIDwvQ2VsbD5cbiAgICAgICAgICAgICAgICA8Q2VsbD5cbiAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzc05hbWU9e3N3YWdJbWFnZX0gc3JjPXt3ZWJpbnlTaGlydH0gYWx0PVwiSG9vbGEgQUkgU1dBRyAtIFNoaXJ0XCIgLz5cbiAgICAgICAgICAgICAgICA8L0NlbGw+XG4gICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgICA8R3JpZCBsZWZ0PlxuICAgICAgICAgICAgICAgIDxDZWxsPlxuICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzTmFtZT17c3dhZ0ltYWdlfSBzcmM9e3dlYmlueVN0aWNrZXJzfSBhbHQ9XCJIb29sYSBBSSBTV0FHIC0gU3RpY2tlcnNcIiAvPlxuICAgICAgICAgICAgICAgIDwvQ2VsbD5cbiAgICAgICAgICAgICAgICA8Q2VsbCB0aXRsZT1cIlNob3cgdXMgWW91ciBXb3JrXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgICAgSGF2ZSB5b3UgcmVjZW50bHkgbGF1bmNoZWQgYSBwcm9qZWN0LCBhIHdlYnNpdGUsIG9yIGFuIGFwcCwgdGhhdCBydW5zIG9uXG4gICAgICAgICAgICAgICAgICAgICAgICBIb29sYSBBST8gT3IgaWYgeW91IGhhdmUgY3JlYXRlZCBhIEhvb2xhIEFJIHBsdWdpbj8gSWYgc28sIHBsZWFzZSBzZW5kIGl0IG92ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmQgd2XigJlsbCBoYXZlIGEgbG9vayBhbmQgc2VuZCB5b3Ugc29tZSBzdGlja2VycyBpbiByZXR1cm4uIFNlbGVjdGVkXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0cyBhbmQgdGVhbXMgaGF2ZSB0aGUgY2hhbmNlIHRvIGJlIHNob3djYXNlZCBvbiBvdXIgd2Vic2l0ZS5cbiAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgIDwvQ2VsbD5cbiAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICAgIDxHcmlkIHJpZ2h0PlxuICAgICAgICAgICAgICAgIDxDZWxsIHRpdGxlPVwiT3VyIFRoYW5rcyB0byBBbGwgQ29udHJpYnV0b3JzXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgICAgR290IHlvdXIgZmlyc3QgSG9vbGEgQUkgUFIgbWVyZ2VkLCB0aGF04oCZcyBhd2Vzb21lISBUaGFuayB5b3Ugc28gbXVjaCBmb3JcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyaWJ1dGluZyB5b3VyIHRpbWUgdG8gb3VyIHByb2plY3QuIEV4cGVjdCB0aGlzIHNtYWxsIHRva2VuIG9mXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHByZWNpYXRpb24uIFdlIHdpbGwgYWxzbyBhZGQgeW91IHRvIG91ciBjb250cmlidXRvcnMnIHBhZ2UsIGFzIHdlbGwgYXNcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb21vdGUgeW91ciBwcm9maWxlIG9uIG91ciB3ZWJzaXRlLlxuICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT17XCJub3RpY2VcIn0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPk5vdGU6PC9zdHJvbmc+IEFsdG91Z2ggd2UgYXJlIGhhcHB5IHdoZW4gcGVvcGxlIGRlY2lkZSB0byBjb250cmlidXRlXG4gICAgICAgICAgICAgICAgICAgICAgICB0byBvdXIgcHJvamVjdCwgd2UgaGFkIHBlb3BsZSByZXF1ZXN0aW5nIHN3YWcgYnkgY2hhbmdpbmcgd29yZHMgb24gb3VyXG4gICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudGF0aW9uIGFuZCBzaW1pbGFyLiBQbGVhc2Ugbm90ZSB0aGF0IHdlIHJlc2VydmUgdGhpcyBzd2FnIG9ubHkgdG9cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVhYmxlIGNvbnRyaWJ1dG9ycyB3aG8gcmVhbGx5IHdhbnQgdG8gaGVscCBvdXIgcHJvamVjdCBncm93LlxuICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgPC9DZWxsPlxuICAgICAgICAgICAgICAgIDxDZWxsPlxuICAgICAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3N3YWdJbWFnZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz17d2ViaW55U2hpcnRBbmRTdGlja2Vyc31cbiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD1cIkhvb2xhIEFJIFNXQUcgLSBTaGlydCBhbmQgU3RpY2tlcnNcIlxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvQ2VsbD5cbiAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgPC9Db250ZW50Q29udGFpbmVyPlxuXG4gICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT17Y2xhaW1Td2FnQmxvY2t9PlxuICAgICAgICAgICAgPENvbnRlbnRDb250YWluZXIgY2xhc3NOYW1lPXtjb250YWluZXJTdHlsZX0+XG4gICAgICAgICAgICAgICAgPFN1YlRpdGxlPkhvdyB0byBDbGFpbSBZb3VyIFNXQUc8L1N1YlRpdGxlPlxuICAgICAgICAgICAgICAgIDxwPlNlbmQgYW4gZW1haWwgdG8gY29tbXVuaXR5QGhvb2xhLmFpIHdpdGggdGhlIGZvbGxvd2luZyBpbmZvcm1hdGlvbjo8L3A+XG4gICAgICAgICAgICAgICAgPENsYWltSW5zdHJ1Y3Rpb25zPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPEJvbGQ+MS4gUGVyc29uYWwgaW5mb3JtYXRpb246PC9Cb2xkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5GaXJzdCBuYW1lPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TGFzdCBuYW1lPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2hpcnQgc2l6ZSAoaWYgYXBwbGllcyk8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Qm9sZD4yLiBDbGFpbSBkZXRhaWxzOjwvQm9sZD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WW91ciBHaXRIdWIgdXNlcm5hbWU8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbnkgVVJMcyB0aGF0IGFyZSByZWxldmFudCAobGluayB0byBhIFBSLCBhcnRpY2xlLi4uKTwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFueSBvdGhlciBpbmZvcm1hdGlvbiB5b3UgdGhpbmsgaXMgaW1wb3J0YW50PC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPEJvbGQ+My4gU2hpcHBpbmcgZGV0YWlsczo8L0JvbGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPllvdXIgZnVsbCBhZGRyZXNzPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UG9zdGNvZGU8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Db3VudHJ5PC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvQ2xhaW1JbnN0cnVjdGlvbnM+XG4gICAgICAgICAgICAgICAgPENsYWltTm90ZT5cbiAgICAgICAgICAgICAgICAgICAgKiBUaGUgcHJvdmlkZWQgaW5mb3JtYXRpb257XCIgXCJ9XG4gICAgICAgICAgICAgICAgICAgIDxCb2xkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHU+d29u4oCZdDwvdT5cbiAgICAgICAgICAgICAgICAgICAgPC9Cb2xkPntcIiBcIn1cbiAgICAgICAgICAgICAgICAgICAgYmUgdXNlZCBmb3IgbWFya2V0aW5nLCByZXRhcmdldGluZyBvciBhbnkgdHlwZXMgb2YgcHJvbW90aW9ucywgPGJyIC8+XG4gICAgICAgICAgICAgICAgICAgIGFuZCBpdHtcIiBcIn1cbiAgICAgICAgICAgICAgICAgICAgPEJvbGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8dT53b27igJl0PC91PlxuICAgICAgICAgICAgICAgICAgICA8L0JvbGQ+e1wiIFwifVxuICAgICAgICAgICAgICAgICAgICBiZSBzaGFyZWQgd2l0aCBhbnkgM3JkIHBhcnRpZXMuIFdlIGp1c3QgbmVlZCB0aGUgZGV0YWlscyB0byBrbm93IHdoZXJlIHRvIHNlbmRcbiAgICAgICAgICAgICAgICAgICAgeW91ciBwYWNrYWdlLlxuICAgICAgICAgICAgICAgIDwvQ2xhaW1Ob3RlPlxuICAgICAgICAgICAgICAgIDxDbGFpbU5vdGU+XG4gICAgICAgICAgICAgICAgICAgICoqIFdlIHJlc2VydmUgdGhlIHJpZ2h0IHRvIGRlY2lkZSBpZiB5b3VyIGNvbnRyaWJ1dGlvbiBpcyB2YWx1YWJsZSB0byBvdXJcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdCBhbmQgbWFrZSB0aGUgZmluYWwgZGVjaXNpb24gb24gdGhlIHN3YWcgcmVxdWVzdHMuXG4gICAgICAgICAgICAgICAgPC9DbGFpbU5vdGU+XG4gICAgICAgICAgICA8L0NvbnRlbnRDb250YWluZXI+XG4gICAgICAgIDwvc2VjdGlvbj5cblxuICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9e2FtYmFzc2Fkb3JCbG9ja30+XG4gICAgICAgICAgICA8Q29udGVudENvbnRhaW5lciBjbGFzc05hbWU9e2NvbnRhaW5lclN0eWxlfT5cbiAgICAgICAgICAgICAgICA8R3JpZCBsZWZ0PlxuICAgICAgICAgICAgICAgICAgICA8Q2VsbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXthbWJhc3NhZG9yQmFkZ2V9IGFsdD1cIkhvb2xhIEFJIEFtYmFzc2Fkb3JcIiAvPlxuICAgICAgICAgICAgICAgICAgICA8L0NlbGw+XG4gICAgICAgICAgICAgICAgICAgIDxDZWxsIGNsYXNzTmFtZT17YW1iYXNzYWRvckNvbnRlbnR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGgyPkhvb2xhIEFJIEFtYmFzc2Fkb3I8L2gyPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSWYgeW91IG9yZ2FuaXplZCBhIEhvb2xhIEFJIG1lZXR1cCBncm91cCwgb3Igd2FudCB0byBvcmdhbml6ZSBvbmUsIHdlIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhcHB5IHRvIHN1cHBvcnQgeW91LlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJvbGQ+V2hhdCB3ZSBjYW4gb2ZmZXI6PC9Cb2xkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5zcG9uc29yc2hpcCBmb3IgbG9jYWwgbWVldHVwIGdyb3VwczwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPnJldmlldyB5b3VyIEhvb2xhIEFJIHJlbGF0ZWQgY29udGVudC9wcmVzZW50YXRpb24vdGFsazwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPmhlbHAgd2l0aCB2aXN1YWxzIGFuZCBvdGhlciBtYXRlcmlhbDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPm1vcmUgU1dBRzwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzTmFtZT1cImpvaW5UZWFtXCI+Sm9pbiBPdXIgVGVhbTwvaDQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGb3IgYWN0aXZlIGFtYmFzc2Fkb3JzLCB3ZSBjYW4gZ28gYSBzdGVwIGZ1cnRoZXIuIElmIHlvdSBlbmpveSBlZHVjYXRpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdGhlcnMsIGxvdmUgYnVpbGRpbmcgY29tbXVuaXRpZXMsIG9yZ2FuaXppbmcgbWVldHVwcywgYXR0ZW5kaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmVyZW5jZXMsIGFuZCBzcHJlYWRpbmcgdGhlIHdvcmQgYWJvdXQgSG9vbGEgQUksIHdlIGFyZSByZWFkeSB0byBvZmZlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlvdSBhIGZ1bGwtdGltZSBwYWlkIHBvc2l0aW9uIGluIG91ciB0ZWFtLlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+VG8gYXBwbHksIHBsZWFzZSBzZW5kIHlvdXIgQ1YgdG8gaW5mb0Bob29sYS5haS48L3A+XG4gICAgICAgICAgICAgICAgICAgIDwvQ2VsbD5cbiAgICAgICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgICA8L0NvbnRlbnRDb250YWluZXI+XG4gICAgICAgIDwvc2VjdGlvbj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuKTtcbiJdfQ== */"),V=(0,c.default)("div",{target:"e6hl26r3",label:"IntroTextWrapper"})({backgroundColor:"#f2eecb",borderRadius:10,boxShadow:"0 2px 4px 0 rgba(209,209,209,0.50)",boxSizing:"border-box"},(0,d.default)({padding:[25,50],width:["auto",600],margin:[15,"0 auto"]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9iZXJuYXJkL1Byb2plY3RzL2hvb2xhL3NpdGUvc3JjL2NvbXBvbmVudHMvc3RhdGljL3N3YWcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMkN5QiIsImZpbGUiOiIvVXNlcnMvYmVybmFyZC9Qcm9qZWN0cy9ob29sYS9zaXRlL3NyYy9jb21wb25lbnRzL3N0YXRpYy9zd2FnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwicmVhY3QtZW1vdGlvblwiO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSBcImVtb3Rpb25cIjtcbmltcG9ydCB0aGVtZSBmcm9tIFwiLi4vdXRpbHMvdGhlbWVcIjtcbmltcG9ydCBtcSBmcm9tIFwiLi4vdXRpbHMvYnJlYWtwb2ludHNcIjtcbmltcG9ydCBDb250ZW50Q29udGFpbmVyIGZyb20gXCIuLi91aS9jb250ZW50LWNvbnRhaW5lclwiO1xuaW1wb3J0IHsgR3JpZCwgQ2VsbCB9IGZyb20gXCIuLi91aS9sYXlvdXQvbGF5b3V0XCI7XG5pbXBvcnQgd2ViaW55U2hpcnQgZnJvbSBcIi4vYXNzZXRzL3dlYmlueS1zaGlydC5wbmdcIjtcbmltcG9ydCB3ZWJpbnlTdGlja2VycyBmcm9tIFwiLi9hc3NldHMvd2ViaW55LXN0aWNrZXJzLnBuZ1wiO1xuaW1wb3J0IHdlYmlueVNoaXJ0QW5kU3RpY2tlcnMgZnJvbSBcIi4vYXNzZXRzL3dlYmlueS1zaGlydC1hbmQtc3RpY2tlcnMucG5nXCI7XG5pbXBvcnQgYW1iYXNzYWRvckJnIGZyb20gXCIuL2Fzc2V0cy93ZWJpbnktYW1iYXNzYWRvci1iZy5zdmdcIjtcbmltcG9ydCBhbWJhc3NhZG9yQmFkZ2UgZnJvbSBcIi4vYXNzZXRzL3dlYmlueS1hbWJhc3NhZG9yLWJhZGdlLnN2Z1wiO1xuXG5jb25zdCBCb2xkID0gc3R5bGVkKFwic3BhblwiKSh7XG4gICAgZm9udFdlaWdodDogNjAwLFxufSk7XG5cbmNvbnN0IGhlcm8gPSBjc3MoXG4gICAge30sXG4gICAgbXEoe1xuICAgICAgICBtYXJnaW5Ub3A6IFs3NSwgMTAwXSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IFRpdGxlID0gc3R5bGVkKFwiaDFcIikoe1xuICAgIGZvbnRTaXplOiAzMixcbiAgICBmb250V2VpZ2h0OiB0aGVtZS5mb250V2VpZ2h0LnNlbWlCb2xkLFxuICAgIG1hcmdpbkJvdHRvbTogMjUsXG4gICAgdGV4dEFsaWduOiBcImNlbnRlclwiLFxufSk7XG5cbmNvbnN0IFN1YlRpdGxlID0gc3R5bGVkKFwiaDJcIikoXG4gICAge1xuICAgICAgICBwYWRkaW5nVG9wOiAwLFxuICAgICAgICBtYXJnaW5Ub3A6IDUwLFxuICAgICAgICBtYXJnaW5Cb3R0b206IDUwLFxuICAgICAgICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIGZvbnRTaXplOiBbMzIsIDQ4XSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IEludHJvVGV4dFdyYXBwZXIgPSBzdHlsZWQoXCJkaXZcIikoXG4gICAge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiI2YyZWVjYlwiLFxuICAgICAgICBib3JkZXJSYWRpdXM6IDEwLFxuICAgICAgICBib3hTaGFkb3c6IFwiMCAycHggNHB4IDAgcmdiYSgyMDksMjA5LDIwOSwwLjUwKVwiLFxuICAgICAgICBib3hTaXppbmc6IFwiYm9yZGVyLWJveFwiLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICBwYWRkaW5nOiBbMjUsIDUwXSxcbiAgICAgICAgd2lkdGg6IFtcImF1dG9cIiwgNjAwXSxcbiAgICAgICAgbWFyZ2luOiBbMTUsIFwiMCBhdXRvXCJdLFxuICAgIH0pLFxuKTtcblxuY29uc3QgSW50cm9UZXh0ID0gc3R5bGVkKFwicFwiKShcbiAgICB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5jb2xvci5ibGFjayxcbiAgICAgICAgdGV4dEFsaWduOiBcImp1c3RpZnlcIixcbiAgICAgICAgXCImOmxhc3QtY2hpbGRcIjoge1xuICAgICAgICAgICAgbWFyZ2luQm90dG9tOiAwLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICBmb250U2l6ZTogWzIwLCAyNF0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBEaXZpZGVyID0gc3R5bGVkKFwiZGl2XCIpKHtcbiAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgaGVpZ2h0OiAyMCxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiI0Y0RjZGOFwiLFxuICAgIGJvcmRlclRvcDogXCIxcHggc29saWQgI0U1RTVFNVwiLFxuICAgIGJvcmRlckJvdHRvbTogXCIxcHggc29saWQgI0U1RTVFNVwiLFxufSk7XG5cbmNvbnN0IGNvbnRhaW5lclN0eWxlID0gY3NzKHtcbiAgICBtYXhXaWR0aDogMTEwMCxcbiAgICBtYXJnaW5Cb3R0b206IDUwLFxuICAgIFwiLm5vdGljZVwiOiB7XG4gICAgICAgIGZvbnRTaXplOiAxMixcbiAgICAgICAgY29sb3I6IHRoZW1lLmNvbG9yLmdyYXlUZXh0LFxuICAgIH0sXG59KTtcblxuY29uc3Qgc3dhZ0ltYWdlID0gY3NzKHtcbiAgICB3aWR0aDogXCIzNTBweCAhaW1wb3J0YW50XCIsXG4gICAgaGVpZ2h0OiBcImF1dG8gIWltcG9ydGFudFwiLFxuICAgIGRpc3BsYXk6IFwiYmxvY2tcIixcbiAgICBtYXJnaW46IFwiMCBhdXRvXCIsXG59KTtcblxuY29uc3QgYW1iYXNzYWRvckJsb2NrID0gY3NzKFxuICAgIHtcbiAgICAgICAgYmFja2dyb3VuZDogXCJ1cmwoXCIgKyBhbWJhc3NhZG9yQmcgKyBcIikgbm8tcmVwZWF0IGNlbnRlciB0b3BcIixcbiAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICBib3hTaXppbmc6IFwiYm9yZGVyLWJveFwiLFxuICAgICAgICBtYXJnaW5Cb3R0b206IDAsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIHBhZGRpbmc6IFtcIjEwMHB4IDIwcHggMjVweFwiLCBcIjE1MHB4IDAgMjVweFwiXSxcbiAgICAgICAgYmFja2dyb3VuZFNpemU6IFtcImNvdmVyXCJdLFxuICAgICAgICBiYWNrZ3JvdW5kUG9zaXRpb246IFtcInRvcFwiLCBcInRvcFwiXSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IGFtYmFzc2Fkb3JDb250ZW50ID0gY3NzKHtcbiAgICBoMjoge1xuICAgICAgICBmb250U2l6ZTogdGhlbWUuZm9udFNpemUuaDIsXG4gICAgICAgIGNvbG9yOiB0aGVtZS5jb2xvci53aGl0ZSxcbiAgICB9LFxuICAgIHA6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLmNvbG9yLndoaXRlLFxuICAgIH0sXG4gICAgdWw6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLmNvbG9yLndoaXRlLFxuICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICBtYXJnaW46IFwiLTIwcHggMCAyMHB4IDBcIixcbiAgICAgICAgbGk6IHtcbiAgICAgICAgICAgIG1hcmdpbkxlZnQ6IDIwLFxuICAgICAgICAgICAgZm9udFNpemU6IDIwLFxuICAgICAgICAgICAgdGV4dEFsaWduOiBcImxlZnRcIixcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIFwiLmpvaW5UZWFtXCI6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLmNvbG9yLndoaXRlLFxuICAgICAgICBmb250U2l6ZTogMjAsXG4gICAgICAgIGZvbnRXZWlnaHQ6IDYwMCxcbiAgICAgICAgZGlzcGxheTogXCJpbmxpbmUtYmxvY2tcIixcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcIiNGNUE3MjNcIixcbiAgICAgICAgcGFkZGluZzogXCIycHggNHB4XCIsXG4gICAgICAgIGJvcmRlclJhZGl1czogNSxcbiAgICB9LFxufSk7XG5cbmNvbnN0IGNsYWltU3dhZ0Jsb2NrID0gY3NzKFxuICAgIHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcIiMyOTI5MjlcIixcbiAgICAgICAgY29sb3I6IHRoZW1lLmNvbG9yLndoaXRlLFxuICAgICAgICBwYWRkaW5nOiBcIjUwcHggMCAxNTBweCAwXCIsXG4gICAgICAgIHA6IHtcbiAgICAgICAgICAgIGZvbnRTaXplOiAyMCxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgbWFyZ2luQm90dG9tOiBbLTEwMCwgLTEwMCwgLTE1MF0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBDbGFpbUluc3RydWN0aW9ucyA9IHN0eWxlZChcImRpdlwiKShcbiAgICB7XG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJzcGFjZS1iZXR3ZWVuXCIsXG4gICAgICAgIGZvbnRTaXplOiAyMCxcbiAgICAgICAgdWw6IHtcbiAgICAgICAgICAgIGNvbG9yOiB0aGVtZS5jb2xvci53aGl0ZSxcbiAgICAgICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAgICAgICBtYXJnaW46IFwiMTBweCAwIDI1cHggMjBweFwiLFxuICAgICAgICAgICAgbGk6IHtcbiAgICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiAyMCxcbiAgICAgICAgICAgICAgICBmb250U2l6ZTogMjAsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICBmbGV4RGlyZWN0aW9uOiBbXCJjb2x1bW5cIiwgXCJyb3dcIl0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBDbGFpbU5vdGUgPSBzdHlsZWQoXCJwXCIpKHtcbiAgICBmb250U2l6ZTogXCIxNHB4ICFpbXBvcnRhbnRcIixcbiAgICBjb2xvcjogXCIjOUI5QjlCXCIsXG4gICAgdGV4dEFsaWduOiBcImNlbnRlclwiLFxuICAgIG1hcmdpblRvcDogMjUsXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgKHsgY2hpbGRyZW4sIC4uLnByb3BzIH0pID0+IChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgIDxDb250ZW50Q29udGFpbmVyIGNsYXNzTmFtZT17Y29udGFpbmVyU3R5bGUgKyBcIiBcIiArIGhlcm99PlxuICAgICAgICAgICAgPEludHJvVGV4dFdyYXBwZXI+XG4gICAgICAgICAgICAgICAgPFRpdGxlPlxuICAgICAgICAgICAgICAgICAgICBGUkVFIFNXQUdcbiAgICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgICAgIHtcIntcIn1mb3IgYWxsIG91ciBjb250cmlidXRvcnMgYW5kIHN1cHBvcnRlcnN7XCJ9XCJ9XG4gICAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICA8L1RpdGxlPlxuICAgICAgICAgICAgICAgIDxJbnRyb1RleHQ+XG4gICAgICAgICAgICAgICAgICAgIFRvIHNob3cgb3VyIGFwcHJlY2lhdGlvbiB0byBhbGwgb3VyIGNvbnRyaWJ1dG9ycyBhbmQgc3VwcG9ydGVycywgd2UgYXJlIGdpdmluZ1xuICAgICAgICAgICAgICAgICAgICBhd2F5IGZyZWUgc3dhZy4gVGhlIHNlY3Rpb24gYmVsb3cgZGVmaW5lcyB3aGF0IHN3YWcgaXMgYXZhaWxhYmxlLCBhbmQgaG93IHlvdVxuICAgICAgICAgICAgICAgICAgICBjYW4gY2xhaW0geW91cnMuXG4gICAgICAgICAgICAgICAgPC9JbnRyb1RleHQ+XG4gICAgICAgICAgICAgICAgPEludHJvVGV4dD5cbiAgICAgICAgICAgICAgICAgICAgPEJvbGQ+V2h5IGFyZSB3ZSBkb2luZyB0aGlzPzwvQm9sZD5cbiAgICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgICAgIEFuIG9wZW4tc291cmNlIHByb2plY3QsIHN1Y2ggYXMgb3VycywgY2Fu4oCZdCBleGlzdCB3aXRob3V0IGEgY29tbXVuaXR5IGFyb3VuZCBpdC5cbiAgICAgICAgICAgICAgICAgICAgVGhlIGNvbW11bml0eSBjb250cmlidXRlcyBhbmQgaW1wcm92ZXMgdGhlIHByb2plY3QuIFRoaXMgaXMgdGhlIHNlY3JldFxuICAgICAgICAgICAgICAgICAgICBpbmdyZWRpZW50IHRvIGEgZ3JlYXQgb3Blbi1zb3VyY2UgcHJvZHVjdC4gQXQgSG9vbGEgQUkgd2UgZGVjaWRlZCB0byBvZmZlciBhXG4gICAgICAgICAgICAgICAgICAgIGxpdHRsZSB0b2tlbiBvZiBhcHByZWNpYXRpb24gdG8gYWxsIG91ciBjb21tdW5pdHkgbWVtYmVycy5cbiAgICAgICAgICAgICAgICA8L0ludHJvVGV4dD5cbiAgICAgICAgICAgICAgICA8SW50cm9UZXh0PlxuICAgICAgICAgICAgICAgICAgICBUaGlzIG1pZ2h0IGxvb2sgbGlrZSBmcmVlIG1hcmtldGluZywgYnV0IG91ciBnb2FsIGlzIHNpbmNlcmUuIEJ1aWxkaW5nIGFcbiAgICAgICAgICAgICAgICAgICAgY29tbXVuaXR5IGFyb3VuZCBIb29sYSBBSSBhbmQgYWR2YW5jaW5nIHRoZSBhZG9wdGlvbiBvZiBzZXJ2ZXJsZXNzIHRlY2hub2xvZ3kuXG4gICAgICAgICAgICAgICAgPC9JbnRyb1RleHQ+XG4gICAgICAgICAgICAgICAgPEludHJvVGV4dD5cbiAgICAgICAgICAgICAgICAgICAgSWYgeW91IHNoYXJlIHRoZSBzYW1lIGdvYWwsIGp1bXAgaW4gYW5kIGhlbHAgdXMgc3ByZWFkIHRoZSB3b3JkLlxuICAgICAgICAgICAgICAgIDwvSW50cm9UZXh0PlxuICAgICAgICAgICAgICAgIDxJbnRyb1RleHQgc3R5bGU9e3sgdGV4dEFsaWduOiBcInJpZ2h0XCIgfX0+U3ZlbiwgQ28tZm91bmRlciAmIENFTzwvSW50cm9UZXh0PlxuICAgICAgICAgICAgPC9JbnRyb1RleHRXcmFwcGVyPlxuICAgICAgICA8L0NvbnRlbnRDb250YWluZXI+XG4gICAgICAgIDxEaXZpZGVyIC8+XG4gICAgICAgIDxDb250ZW50Q29udGFpbmVyIGNsYXNzTmFtZT17Y29udGFpbmVyU3R5bGV9PlxuICAgICAgICAgICAgPFN1YlRpdGxlPldoYXTigJlzIEF2YWlsYWJsZSBmb3IgR3JhYnM8L1N1YlRpdGxlPlxuICAgICAgICAgICAgPEdyaWQgcmlnaHQ+XG4gICAgICAgICAgICAgICAgPENlbGwgdGl0bGU9XCJTcHJlYWQgdGhlIEtub3dsZWRnZVwiPlxuICAgICAgICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICAgICAgICAgIFlvdSBoYXZlIGNyZWF0ZWQgYSBibG9nIHBvc3QsIGEgdHV0b3JpYWwgb3IgYSB2aWRlbyBndWlkZSBmb3IgSG9vbGEgQUkgcmVsYXRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudD8gV2Ugd291bGQgbG92ZSB0byBrbm93IGFib3V0IGl0LCBzbyB3ZSBjYW4gc3ByZWFkIHRoZSB3b3JkIHRocm91Z2hcbiAgICAgICAgICAgICAgICAgICAgICAgIG91ciBjaGFubmVscy4gT24gdG9wIG9mIHRoYXQsIHdl4oCZbGwgc2VuZCB5b3UgYSBIb29sYSBBSSBicmFuZGVkIHQtc2hpcnQuXG4gICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPXtcIm5vdGljZVwifT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+Tm90ZTo8L3N0cm9uZz4gQmVmb3JlIGNvbW1pdGluZyB5b3VyIHRpbWUgdG8gd3JpdGluZyBhIHR1dG9yaWFsLCB3ZVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVjb21tZW5kIHlvdSBnaXZlIHVzIGEgcGluZyBvdXIgb3VyIDxhIGhyZWY9XCIvc2xhY2tcIj5jb21tdW5pdHkgc2xhY2s8L2E+IHNvXG4gICAgICAgICAgICAgICAgICAgICAgICB3ZSBtYWtlIHN1cmUgaXQncyBhIHZhbHVhYmxlIGNvbnRyaWJ1dGlvbi5cbiAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgIDwvQ2VsbD5cbiAgICAgICAgICAgICAgICA8Q2VsbD5cbiAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzc05hbWU9e3N3YWdJbWFnZX0gc3JjPXt3ZWJpbnlTaGlydH0gYWx0PVwiSG9vbGEgQUkgU1dBRyAtIFNoaXJ0XCIgLz5cbiAgICAgICAgICAgICAgICA8L0NlbGw+XG4gICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgICA8R3JpZCBsZWZ0PlxuICAgICAgICAgICAgICAgIDxDZWxsPlxuICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzTmFtZT17c3dhZ0ltYWdlfSBzcmM9e3dlYmlueVN0aWNrZXJzfSBhbHQ9XCJIb29sYSBBSSBTV0FHIC0gU3RpY2tlcnNcIiAvPlxuICAgICAgICAgICAgICAgIDwvQ2VsbD5cbiAgICAgICAgICAgICAgICA8Q2VsbCB0aXRsZT1cIlNob3cgdXMgWW91ciBXb3JrXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgICAgSGF2ZSB5b3UgcmVjZW50bHkgbGF1bmNoZWQgYSBwcm9qZWN0LCBhIHdlYnNpdGUsIG9yIGFuIGFwcCwgdGhhdCBydW5zIG9uXG4gICAgICAgICAgICAgICAgICAgICAgICBIb29sYSBBST8gT3IgaWYgeW91IGhhdmUgY3JlYXRlZCBhIEhvb2xhIEFJIHBsdWdpbj8gSWYgc28sIHBsZWFzZSBzZW5kIGl0IG92ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmQgd2XigJlsbCBoYXZlIGEgbG9vayBhbmQgc2VuZCB5b3Ugc29tZSBzdGlja2VycyBpbiByZXR1cm4uIFNlbGVjdGVkXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0cyBhbmQgdGVhbXMgaGF2ZSB0aGUgY2hhbmNlIHRvIGJlIHNob3djYXNlZCBvbiBvdXIgd2Vic2l0ZS5cbiAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgIDwvQ2VsbD5cbiAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICAgIDxHcmlkIHJpZ2h0PlxuICAgICAgICAgICAgICAgIDxDZWxsIHRpdGxlPVwiT3VyIFRoYW5rcyB0byBBbGwgQ29udHJpYnV0b3JzXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgICAgR290IHlvdXIgZmlyc3QgSG9vbGEgQUkgUFIgbWVyZ2VkLCB0aGF04oCZcyBhd2Vzb21lISBUaGFuayB5b3Ugc28gbXVjaCBmb3JcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyaWJ1dGluZyB5b3VyIHRpbWUgdG8gb3VyIHByb2plY3QuIEV4cGVjdCB0aGlzIHNtYWxsIHRva2VuIG9mXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHByZWNpYXRpb24uIFdlIHdpbGwgYWxzbyBhZGQgeW91IHRvIG91ciBjb250cmlidXRvcnMnIHBhZ2UsIGFzIHdlbGwgYXNcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb21vdGUgeW91ciBwcm9maWxlIG9uIG91ciB3ZWJzaXRlLlxuICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT17XCJub3RpY2VcIn0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPk5vdGU6PC9zdHJvbmc+IEFsdG91Z2ggd2UgYXJlIGhhcHB5IHdoZW4gcGVvcGxlIGRlY2lkZSB0byBjb250cmlidXRlXG4gICAgICAgICAgICAgICAgICAgICAgICB0byBvdXIgcHJvamVjdCwgd2UgaGFkIHBlb3BsZSByZXF1ZXN0aW5nIHN3YWcgYnkgY2hhbmdpbmcgd29yZHMgb24gb3VyXG4gICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudGF0aW9uIGFuZCBzaW1pbGFyLiBQbGVhc2Ugbm90ZSB0aGF0IHdlIHJlc2VydmUgdGhpcyBzd2FnIG9ubHkgdG9cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVhYmxlIGNvbnRyaWJ1dG9ycyB3aG8gcmVhbGx5IHdhbnQgdG8gaGVscCBvdXIgcHJvamVjdCBncm93LlxuICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgPC9DZWxsPlxuICAgICAgICAgICAgICAgIDxDZWxsPlxuICAgICAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3N3YWdJbWFnZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz17d2ViaW55U2hpcnRBbmRTdGlja2Vyc31cbiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD1cIkhvb2xhIEFJIFNXQUcgLSBTaGlydCBhbmQgU3RpY2tlcnNcIlxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvQ2VsbD5cbiAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgPC9Db250ZW50Q29udGFpbmVyPlxuXG4gICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT17Y2xhaW1Td2FnQmxvY2t9PlxuICAgICAgICAgICAgPENvbnRlbnRDb250YWluZXIgY2xhc3NOYW1lPXtjb250YWluZXJTdHlsZX0+XG4gICAgICAgICAgICAgICAgPFN1YlRpdGxlPkhvdyB0byBDbGFpbSBZb3VyIFNXQUc8L1N1YlRpdGxlPlxuICAgICAgICAgICAgICAgIDxwPlNlbmQgYW4gZW1haWwgdG8gY29tbXVuaXR5QGhvb2xhLmFpIHdpdGggdGhlIGZvbGxvd2luZyBpbmZvcm1hdGlvbjo8L3A+XG4gICAgICAgICAgICAgICAgPENsYWltSW5zdHJ1Y3Rpb25zPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPEJvbGQ+MS4gUGVyc29uYWwgaW5mb3JtYXRpb246PC9Cb2xkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5GaXJzdCBuYW1lPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TGFzdCBuYW1lPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2hpcnQgc2l6ZSAoaWYgYXBwbGllcyk8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Qm9sZD4yLiBDbGFpbSBkZXRhaWxzOjwvQm9sZD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WW91ciBHaXRIdWIgdXNlcm5hbWU8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbnkgVVJMcyB0aGF0IGFyZSByZWxldmFudCAobGluayB0byBhIFBSLCBhcnRpY2xlLi4uKTwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFueSBvdGhlciBpbmZvcm1hdGlvbiB5b3UgdGhpbmsgaXMgaW1wb3J0YW50PC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPEJvbGQ+My4gU2hpcHBpbmcgZGV0YWlsczo8L0JvbGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPllvdXIgZnVsbCBhZGRyZXNzPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UG9zdGNvZGU8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Db3VudHJ5PC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvQ2xhaW1JbnN0cnVjdGlvbnM+XG4gICAgICAgICAgICAgICAgPENsYWltTm90ZT5cbiAgICAgICAgICAgICAgICAgICAgKiBUaGUgcHJvdmlkZWQgaW5mb3JtYXRpb257XCIgXCJ9XG4gICAgICAgICAgICAgICAgICAgIDxCb2xkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHU+d29u4oCZdDwvdT5cbiAgICAgICAgICAgICAgICAgICAgPC9Cb2xkPntcIiBcIn1cbiAgICAgICAgICAgICAgICAgICAgYmUgdXNlZCBmb3IgbWFya2V0aW5nLCByZXRhcmdldGluZyBvciBhbnkgdHlwZXMgb2YgcHJvbW90aW9ucywgPGJyIC8+XG4gICAgICAgICAgICAgICAgICAgIGFuZCBpdHtcIiBcIn1cbiAgICAgICAgICAgICAgICAgICAgPEJvbGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8dT53b27igJl0PC91PlxuICAgICAgICAgICAgICAgICAgICA8L0JvbGQ+e1wiIFwifVxuICAgICAgICAgICAgICAgICAgICBiZSBzaGFyZWQgd2l0aCBhbnkgM3JkIHBhcnRpZXMuIFdlIGp1c3QgbmVlZCB0aGUgZGV0YWlscyB0byBrbm93IHdoZXJlIHRvIHNlbmRcbiAgICAgICAgICAgICAgICAgICAgeW91ciBwYWNrYWdlLlxuICAgICAgICAgICAgICAgIDwvQ2xhaW1Ob3RlPlxuICAgICAgICAgICAgICAgIDxDbGFpbU5vdGU+XG4gICAgICAgICAgICAgICAgICAgICoqIFdlIHJlc2VydmUgdGhlIHJpZ2h0IHRvIGRlY2lkZSBpZiB5b3VyIGNvbnRyaWJ1dGlvbiBpcyB2YWx1YWJsZSB0byBvdXJcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdCBhbmQgbWFrZSB0aGUgZmluYWwgZGVjaXNpb24gb24gdGhlIHN3YWcgcmVxdWVzdHMuXG4gICAgICAgICAgICAgICAgPC9DbGFpbU5vdGU+XG4gICAgICAgICAgICA8L0NvbnRlbnRDb250YWluZXI+XG4gICAgICAgIDwvc2VjdGlvbj5cblxuICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9e2FtYmFzc2Fkb3JCbG9ja30+XG4gICAgICAgICAgICA8Q29udGVudENvbnRhaW5lciBjbGFzc05hbWU9e2NvbnRhaW5lclN0eWxlfT5cbiAgICAgICAgICAgICAgICA8R3JpZCBsZWZ0PlxuICAgICAgICAgICAgICAgICAgICA8Q2VsbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXthbWJhc3NhZG9yQmFkZ2V9IGFsdD1cIkhvb2xhIEFJIEFtYmFzc2Fkb3JcIiAvPlxuICAgICAgICAgICAgICAgICAgICA8L0NlbGw+XG4gICAgICAgICAgICAgICAgICAgIDxDZWxsIGNsYXNzTmFtZT17YW1iYXNzYWRvckNvbnRlbnR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGgyPkhvb2xhIEFJIEFtYmFzc2Fkb3I8L2gyPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSWYgeW91IG9yZ2FuaXplZCBhIEhvb2xhIEFJIG1lZXR1cCBncm91cCwgb3Igd2FudCB0byBvcmdhbml6ZSBvbmUsIHdlIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhcHB5IHRvIHN1cHBvcnQgeW91LlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJvbGQ+V2hhdCB3ZSBjYW4gb2ZmZXI6PC9Cb2xkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5zcG9uc29yc2hpcCBmb3IgbG9jYWwgbWVldHVwIGdyb3VwczwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPnJldmlldyB5b3VyIEhvb2xhIEFJIHJlbGF0ZWQgY29udGVudC9wcmVzZW50YXRpb24vdGFsazwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPmhlbHAgd2l0aCB2aXN1YWxzIGFuZCBvdGhlciBtYXRlcmlhbDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPm1vcmUgU1dBRzwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzTmFtZT1cImpvaW5UZWFtXCI+Sm9pbiBPdXIgVGVhbTwvaDQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGb3IgYWN0aXZlIGFtYmFzc2Fkb3JzLCB3ZSBjYW4gZ28gYSBzdGVwIGZ1cnRoZXIuIElmIHlvdSBlbmpveSBlZHVjYXRpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdGhlcnMsIGxvdmUgYnVpbGRpbmcgY29tbXVuaXRpZXMsIG9yZ2FuaXppbmcgbWVldHVwcywgYXR0ZW5kaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmVyZW5jZXMsIGFuZCBzcHJlYWRpbmcgdGhlIHdvcmQgYWJvdXQgSG9vbGEgQUksIHdlIGFyZSByZWFkeSB0byBvZmZlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlvdSBhIGZ1bGwtdGltZSBwYWlkIHBvc2l0aW9uIGluIG91ciB0ZWFtLlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+VG8gYXBwbHksIHBsZWFzZSBzZW5kIHlvdXIgQ1YgdG8gaW5mb0Bob29sYS5haS48L3A+XG4gICAgICAgICAgICAgICAgICAgIDwvQ2VsbD5cbiAgICAgICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgICA8L0NvbnRlbnRDb250YWluZXI+XG4gICAgICAgIDwvc2VjdGlvbj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuKTtcbiJdfQ== */"),h=(0,c.default)("p",{target:"e6hl26r4",label:"IntroText"})({color:X.default.color.black,textAlign:"justify","&:last-child":{marginBottom:0}},(0,d.default)({fontSize:[20,24]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),w=(0,c.default)("div",{target:"e6hl26r5",label:"Divider"})({width:"100%",height:20,backgroundColor:"#F4F6F8",borderTop:"1px solid #E5E5E5",borderBottom:"1px solid #E5E5E5"},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),H=(0,l.css)({maxWidth:1100,marginBottom:50,".notice":{fontSize:12,color:X.default.color.grayText}},"label:containerStyle;","/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),R=(0,l.css)({width:"350px !important",height:"auto !important",display:"block",margin:"0 auto"},"label:swagImage;","/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),N=(0,l.css)({background:"url("+x.default+") no-repeat center top",width:"100%",boxSizing:"border-box",marginBottom:0},(0,d.default)({padding:["100px 20px 25px","150px 0 25px"],backgroundSize:["cover"],backgroundPosition:["top","top"]}),"label:ambassadorBlock;","/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9iZXJuYXJkL1Byb2plY3RzL2hvb2xhL3NpdGUvc3JjL2NvbXBvbmVudHMvc3RhdGljL3N3YWcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBOEZ3QiIsImZpbGUiOiIvVXNlcnMvYmVybmFyZC9Qcm9qZWN0cy9ob29sYS9zaXRlL3NyYy9jb21wb25lbnRzL3N0YXRpYy9zd2FnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwicmVhY3QtZW1vdGlvblwiO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSBcImVtb3Rpb25cIjtcbmltcG9ydCB0aGVtZSBmcm9tIFwiLi4vdXRpbHMvdGhlbWVcIjtcbmltcG9ydCBtcSBmcm9tIFwiLi4vdXRpbHMvYnJlYWtwb2ludHNcIjtcbmltcG9ydCBDb250ZW50Q29udGFpbmVyIGZyb20gXCIuLi91aS9jb250ZW50LWNvbnRhaW5lclwiO1xuaW1wb3J0IHsgR3JpZCwgQ2VsbCB9IGZyb20gXCIuLi91aS9sYXlvdXQvbGF5b3V0XCI7XG5pbXBvcnQgd2ViaW55U2hpcnQgZnJvbSBcIi4vYXNzZXRzL3dlYmlueS1zaGlydC5wbmdcIjtcbmltcG9ydCB3ZWJpbnlTdGlja2VycyBmcm9tIFwiLi9hc3NldHMvd2ViaW55LXN0aWNrZXJzLnBuZ1wiO1xuaW1wb3J0IHdlYmlueVNoaXJ0QW5kU3RpY2tlcnMgZnJvbSBcIi4vYXNzZXRzL3dlYmlueS1zaGlydC1hbmQtc3RpY2tlcnMucG5nXCI7XG5pbXBvcnQgYW1iYXNzYWRvckJnIGZyb20gXCIuL2Fzc2V0cy93ZWJpbnktYW1iYXNzYWRvci1iZy5zdmdcIjtcbmltcG9ydCBhbWJhc3NhZG9yQmFkZ2UgZnJvbSBcIi4vYXNzZXRzL3dlYmlueS1hbWJhc3NhZG9yLWJhZGdlLnN2Z1wiO1xuXG5jb25zdCBCb2xkID0gc3R5bGVkKFwic3BhblwiKSh7XG4gICAgZm9udFdlaWdodDogNjAwLFxufSk7XG5cbmNvbnN0IGhlcm8gPSBjc3MoXG4gICAge30sXG4gICAgbXEoe1xuICAgICAgICBtYXJnaW5Ub3A6IFs3NSwgMTAwXSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IFRpdGxlID0gc3R5bGVkKFwiaDFcIikoe1xuICAgIGZvbnRTaXplOiAzMixcbiAgICBmb250V2VpZ2h0OiB0aGVtZS5mb250V2VpZ2h0LnNlbWlCb2xkLFxuICAgIG1hcmdpbkJvdHRvbTogMjUsXG4gICAgdGV4dEFsaWduOiBcImNlbnRlclwiLFxufSk7XG5cbmNvbnN0IFN1YlRpdGxlID0gc3R5bGVkKFwiaDJcIikoXG4gICAge1xuICAgICAgICBwYWRkaW5nVG9wOiAwLFxuICAgICAgICBtYXJnaW5Ub3A6IDUwLFxuICAgICAgICBtYXJnaW5Cb3R0b206IDUwLFxuICAgICAgICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIGZvbnRTaXplOiBbMzIsIDQ4XSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IEludHJvVGV4dFdyYXBwZXIgPSBzdHlsZWQoXCJkaXZcIikoXG4gICAge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiI2YyZWVjYlwiLFxuICAgICAgICBib3JkZXJSYWRpdXM6IDEwLFxuICAgICAgICBib3hTaGFkb3c6IFwiMCAycHggNHB4IDAgcmdiYSgyMDksMjA5LDIwOSwwLjUwKVwiLFxuICAgICAgICBib3hTaXppbmc6IFwiYm9yZGVyLWJveFwiLFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICBwYWRkaW5nOiBbMjUsIDUwXSxcbiAgICAgICAgd2lkdGg6IFtcImF1dG9cIiwgNjAwXSxcbiAgICAgICAgbWFyZ2luOiBbMTUsIFwiMCBhdXRvXCJdLFxuICAgIH0pLFxuKTtcblxuY29uc3QgSW50cm9UZXh0ID0gc3R5bGVkKFwicFwiKShcbiAgICB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5jb2xvci5ibGFjayxcbiAgICAgICAgdGV4dEFsaWduOiBcImp1c3RpZnlcIixcbiAgICAgICAgXCImOmxhc3QtY2hpbGRcIjoge1xuICAgICAgICAgICAgbWFyZ2luQm90dG9tOiAwLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICBmb250U2l6ZTogWzIwLCAyNF0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBEaXZpZGVyID0gc3R5bGVkKFwiZGl2XCIpKHtcbiAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgaGVpZ2h0OiAyMCxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiI0Y0RjZGOFwiLFxuICAgIGJvcmRlclRvcDogXCIxcHggc29saWQgI0U1RTVFNVwiLFxuICAgIGJvcmRlckJvdHRvbTogXCIxcHggc29saWQgI0U1RTVFNVwiLFxufSk7XG5cbmNvbnN0IGNvbnRhaW5lclN0eWxlID0gY3NzKHtcbiAgICBtYXhXaWR0aDogMTEwMCxcbiAgICBtYXJnaW5Cb3R0b206IDUwLFxuICAgIFwiLm5vdGljZVwiOiB7XG4gICAgICAgIGZvbnRTaXplOiAxMixcbiAgICAgICAgY29sb3I6IHRoZW1lLmNvbG9yLmdyYXlUZXh0LFxuICAgIH0sXG59KTtcblxuY29uc3Qgc3dhZ0ltYWdlID0gY3NzKHtcbiAgICB3aWR0aDogXCIzNTBweCAhaW1wb3J0YW50XCIsXG4gICAgaGVpZ2h0OiBcImF1dG8gIWltcG9ydGFudFwiLFxuICAgIGRpc3BsYXk6IFwiYmxvY2tcIixcbiAgICBtYXJnaW46IFwiMCBhdXRvXCIsXG59KTtcblxuY29uc3QgYW1iYXNzYWRvckJsb2NrID0gY3NzKFxuICAgIHtcbiAgICAgICAgYmFja2dyb3VuZDogXCJ1cmwoXCIgKyBhbWJhc3NhZG9yQmcgKyBcIikgbm8tcmVwZWF0IGNlbnRlciB0b3BcIixcbiAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICBib3hTaXppbmc6IFwiYm9yZGVyLWJveFwiLFxuICAgICAgICBtYXJnaW5Cb3R0b206IDAsXG4gICAgfSxcbiAgICBtcSh7XG4gICAgICAgIHBhZGRpbmc6IFtcIjEwMHB4IDIwcHggMjVweFwiLCBcIjE1MHB4IDAgMjVweFwiXSxcbiAgICAgICAgYmFja2dyb3VuZFNpemU6IFtcImNvdmVyXCJdLFxuICAgICAgICBiYWNrZ3JvdW5kUG9zaXRpb246IFtcInRvcFwiLCBcInRvcFwiXSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IGFtYmFzc2Fkb3JDb250ZW50ID0gY3NzKHtcbiAgICBoMjoge1xuICAgICAgICBmb250U2l6ZTogdGhlbWUuZm9udFNpemUuaDIsXG4gICAgICAgIGNvbG9yOiB0aGVtZS5jb2xvci53aGl0ZSxcbiAgICB9LFxuICAgIHA6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLmNvbG9yLndoaXRlLFxuICAgIH0sXG4gICAgdWw6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLmNvbG9yLndoaXRlLFxuICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICBtYXJnaW46IFwiLTIwcHggMCAyMHB4IDBcIixcbiAgICAgICAgbGk6IHtcbiAgICAgICAgICAgIG1hcmdpbkxlZnQ6IDIwLFxuICAgICAgICAgICAgZm9udFNpemU6IDIwLFxuICAgICAgICAgICAgdGV4dEFsaWduOiBcImxlZnRcIixcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIFwiLmpvaW5UZWFtXCI6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLmNvbG9yLndoaXRlLFxuICAgICAgICBmb250U2l6ZTogMjAsXG4gICAgICAgIGZvbnRXZWlnaHQ6IDYwMCxcbiAgICAgICAgZGlzcGxheTogXCJpbmxpbmUtYmxvY2tcIixcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcIiNGNUE3MjNcIixcbiAgICAgICAgcGFkZGluZzogXCIycHggNHB4XCIsXG4gICAgICAgIGJvcmRlclJhZGl1czogNSxcbiAgICB9LFxufSk7XG5cbmNvbnN0IGNsYWltU3dhZ0Jsb2NrID0gY3NzKFxuICAgIHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcIiMyOTI5MjlcIixcbiAgICAgICAgY29sb3I6IHRoZW1lLmNvbG9yLndoaXRlLFxuICAgICAgICBwYWRkaW5nOiBcIjUwcHggMCAxNTBweCAwXCIsXG4gICAgICAgIHA6IHtcbiAgICAgICAgICAgIGZvbnRTaXplOiAyMCxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIG1xKHtcbiAgICAgICAgbWFyZ2luQm90dG9tOiBbLTEwMCwgLTEwMCwgLTE1MF0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBDbGFpbUluc3RydWN0aW9ucyA9IHN0eWxlZChcImRpdlwiKShcbiAgICB7XG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJzcGFjZS1iZXR3ZWVuXCIsXG4gICAgICAgIGZvbnRTaXplOiAyMCxcbiAgICAgICAgdWw6IHtcbiAgICAgICAgICAgIGNvbG9yOiB0aGVtZS5jb2xvci53aGl0ZSxcbiAgICAgICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAgICAgICBtYXJnaW46IFwiMTBweCAwIDI1cHggMjBweFwiLFxuICAgICAgICAgICAgbGk6IHtcbiAgICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiAyMCxcbiAgICAgICAgICAgICAgICBmb250U2l6ZTogMjAsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgbXEoe1xuICAgICAgICBmbGV4RGlyZWN0aW9uOiBbXCJjb2x1bW5cIiwgXCJyb3dcIl0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBDbGFpbU5vdGUgPSBzdHlsZWQoXCJwXCIpKHtcbiAgICBmb250U2l6ZTogXCIxNHB4ICFpbXBvcnRhbnRcIixcbiAgICBjb2xvcjogXCIjOUI5QjlCXCIsXG4gICAgdGV4dEFsaWduOiBcImNlbnRlclwiLFxuICAgIG1hcmdpblRvcDogMjUsXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgKHsgY2hpbGRyZW4sIC4uLnByb3BzIH0pID0+IChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgIDxDb250ZW50Q29udGFpbmVyIGNsYXNzTmFtZT17Y29udGFpbmVyU3R5bGUgKyBcIiBcIiArIGhlcm99PlxuICAgICAgICAgICAgPEludHJvVGV4dFdyYXBwZXI+XG4gICAgICAgICAgICAgICAgPFRpdGxlPlxuICAgICAgICAgICAgICAgICAgICBGUkVFIFNXQUdcbiAgICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgICAgIHtcIntcIn1mb3IgYWxsIG91ciBjb250cmlidXRvcnMgYW5kIHN1cHBvcnRlcnN7XCJ9XCJ9XG4gICAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICA8L1RpdGxlPlxuICAgICAgICAgICAgICAgIDxJbnRyb1RleHQ+XG4gICAgICAgICAgICAgICAgICAgIFRvIHNob3cgb3VyIGFwcHJlY2lhdGlvbiB0byBhbGwgb3VyIGNvbnRyaWJ1dG9ycyBhbmQgc3VwcG9ydGVycywgd2UgYXJlIGdpdmluZ1xuICAgICAgICAgICAgICAgICAgICBhd2F5IGZyZWUgc3dhZy4gVGhlIHNlY3Rpb24gYmVsb3cgZGVmaW5lcyB3aGF0IHN3YWcgaXMgYXZhaWxhYmxlLCBhbmQgaG93IHlvdVxuICAgICAgICAgICAgICAgICAgICBjYW4gY2xhaW0geW91cnMuXG4gICAgICAgICAgICAgICAgPC9JbnRyb1RleHQ+XG4gICAgICAgICAgICAgICAgPEludHJvVGV4dD5cbiAgICAgICAgICAgICAgICAgICAgPEJvbGQ+V2h5IGFyZSB3ZSBkb2luZyB0aGlzPzwvQm9sZD5cbiAgICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgICAgIEFuIG9wZW4tc291cmNlIHByb2plY3QsIHN1Y2ggYXMgb3VycywgY2Fu4oCZdCBleGlzdCB3aXRob3V0IGEgY29tbXVuaXR5IGFyb3VuZCBpdC5cbiAgICAgICAgICAgICAgICAgICAgVGhlIGNvbW11bml0eSBjb250cmlidXRlcyBhbmQgaW1wcm92ZXMgdGhlIHByb2plY3QuIFRoaXMgaXMgdGhlIHNlY3JldFxuICAgICAgICAgICAgICAgICAgICBpbmdyZWRpZW50IHRvIGEgZ3JlYXQgb3Blbi1zb3VyY2UgcHJvZHVjdC4gQXQgSG9vbGEgQUkgd2UgZGVjaWRlZCB0byBvZmZlciBhXG4gICAgICAgICAgICAgICAgICAgIGxpdHRsZSB0b2tlbiBvZiBhcHByZWNpYXRpb24gdG8gYWxsIG91ciBjb21tdW5pdHkgbWVtYmVycy5cbiAgICAgICAgICAgICAgICA8L0ludHJvVGV4dD5cbiAgICAgICAgICAgICAgICA8SW50cm9UZXh0PlxuICAgICAgICAgICAgICAgICAgICBUaGlzIG1pZ2h0IGxvb2sgbGlrZSBmcmVlIG1hcmtldGluZywgYnV0IG91ciBnb2FsIGlzIHNpbmNlcmUuIEJ1aWxkaW5nIGFcbiAgICAgICAgICAgICAgICAgICAgY29tbXVuaXR5IGFyb3VuZCBIb29sYSBBSSBhbmQgYWR2YW5jaW5nIHRoZSBhZG9wdGlvbiBvZiBzZXJ2ZXJsZXNzIHRlY2hub2xvZ3kuXG4gICAgICAgICAgICAgICAgPC9JbnRyb1RleHQ+XG4gICAgICAgICAgICAgICAgPEludHJvVGV4dD5cbiAgICAgICAgICAgICAgICAgICAgSWYgeW91IHNoYXJlIHRoZSBzYW1lIGdvYWwsIGp1bXAgaW4gYW5kIGhlbHAgdXMgc3ByZWFkIHRoZSB3b3JkLlxuICAgICAgICAgICAgICAgIDwvSW50cm9UZXh0PlxuICAgICAgICAgICAgICAgIDxJbnRyb1RleHQgc3R5bGU9e3sgdGV4dEFsaWduOiBcInJpZ2h0XCIgfX0+U3ZlbiwgQ28tZm91bmRlciAmIENFTzwvSW50cm9UZXh0PlxuICAgICAgICAgICAgPC9JbnRyb1RleHRXcmFwcGVyPlxuICAgICAgICA8L0NvbnRlbnRDb250YWluZXI+XG4gICAgICAgIDxEaXZpZGVyIC8+XG4gICAgICAgIDxDb250ZW50Q29udGFpbmVyIGNsYXNzTmFtZT17Y29udGFpbmVyU3R5bGV9PlxuICAgICAgICAgICAgPFN1YlRpdGxlPldoYXTigJlzIEF2YWlsYWJsZSBmb3IgR3JhYnM8L1N1YlRpdGxlPlxuICAgICAgICAgICAgPEdyaWQgcmlnaHQ+XG4gICAgICAgICAgICAgICAgPENlbGwgdGl0bGU9XCJTcHJlYWQgdGhlIEtub3dsZWRnZVwiPlxuICAgICAgICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICAgICAgICAgIFlvdSBoYXZlIGNyZWF0ZWQgYSBibG9nIHBvc3QsIGEgdHV0b3JpYWwgb3IgYSB2aWRlbyBndWlkZSBmb3IgSG9vbGEgQUkgcmVsYXRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudD8gV2Ugd291bGQgbG92ZSB0byBrbm93IGFib3V0IGl0LCBzbyB3ZSBjYW4gc3ByZWFkIHRoZSB3b3JkIHRocm91Z2hcbiAgICAgICAgICAgICAgICAgICAgICAgIG91ciBjaGFubmVscy4gT24gdG9wIG9mIHRoYXQsIHdl4oCZbGwgc2VuZCB5b3UgYSBIb29sYSBBSSBicmFuZGVkIHQtc2hpcnQuXG4gICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPXtcIm5vdGljZVwifT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+Tm90ZTo8L3N0cm9uZz4gQmVmb3JlIGNvbW1pdGluZyB5b3VyIHRpbWUgdG8gd3JpdGluZyBhIHR1dG9yaWFsLCB3ZVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVjb21tZW5kIHlvdSBnaXZlIHVzIGEgcGluZyBvdXIgb3VyIDxhIGhyZWY9XCIvc2xhY2tcIj5jb21tdW5pdHkgc2xhY2s8L2E+IHNvXG4gICAgICAgICAgICAgICAgICAgICAgICB3ZSBtYWtlIHN1cmUgaXQncyBhIHZhbHVhYmxlIGNvbnRyaWJ1dGlvbi5cbiAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgIDwvQ2VsbD5cbiAgICAgICAgICAgICAgICA8Q2VsbD5cbiAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzc05hbWU9e3N3YWdJbWFnZX0gc3JjPXt3ZWJpbnlTaGlydH0gYWx0PVwiSG9vbGEgQUkgU1dBRyAtIFNoaXJ0XCIgLz5cbiAgICAgICAgICAgICAgICA8L0NlbGw+XG4gICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgICA8R3JpZCBsZWZ0PlxuICAgICAgICAgICAgICAgIDxDZWxsPlxuICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzTmFtZT17c3dhZ0ltYWdlfSBzcmM9e3dlYmlueVN0aWNrZXJzfSBhbHQ9XCJIb29sYSBBSSBTV0FHIC0gU3RpY2tlcnNcIiAvPlxuICAgICAgICAgICAgICAgIDwvQ2VsbD5cbiAgICAgICAgICAgICAgICA8Q2VsbCB0aXRsZT1cIlNob3cgdXMgWW91ciBXb3JrXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgICAgSGF2ZSB5b3UgcmVjZW50bHkgbGF1bmNoZWQgYSBwcm9qZWN0LCBhIHdlYnNpdGUsIG9yIGFuIGFwcCwgdGhhdCBydW5zIG9uXG4gICAgICAgICAgICAgICAgICAgICAgICBIb29sYSBBST8gT3IgaWYgeW91IGhhdmUgY3JlYXRlZCBhIEhvb2xhIEFJIHBsdWdpbj8gSWYgc28sIHBsZWFzZSBzZW5kIGl0IG92ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmQgd2XigJlsbCBoYXZlIGEgbG9vayBhbmQgc2VuZCB5b3Ugc29tZSBzdGlja2VycyBpbiByZXR1cm4uIFNlbGVjdGVkXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0cyBhbmQgdGVhbXMgaGF2ZSB0aGUgY2hhbmNlIHRvIGJlIHNob3djYXNlZCBvbiBvdXIgd2Vic2l0ZS5cbiAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgIDwvQ2VsbD5cbiAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICAgIDxHcmlkIHJpZ2h0PlxuICAgICAgICAgICAgICAgIDxDZWxsIHRpdGxlPVwiT3VyIFRoYW5rcyB0byBBbGwgQ29udHJpYnV0b3JzXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgICAgR290IHlvdXIgZmlyc3QgSG9vbGEgQUkgUFIgbWVyZ2VkLCB0aGF04oCZcyBhd2Vzb21lISBUaGFuayB5b3Ugc28gbXVjaCBmb3JcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyaWJ1dGluZyB5b3VyIHRpbWUgdG8gb3VyIHByb2plY3QuIEV4cGVjdCB0aGlzIHNtYWxsIHRva2VuIG9mXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHByZWNpYXRpb24uIFdlIHdpbGwgYWxzbyBhZGQgeW91IHRvIG91ciBjb250cmlidXRvcnMnIHBhZ2UsIGFzIHdlbGwgYXNcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb21vdGUgeW91ciBwcm9maWxlIG9uIG91ciB3ZWJzaXRlLlxuICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT17XCJub3RpY2VcIn0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPk5vdGU6PC9zdHJvbmc+IEFsdG91Z2ggd2UgYXJlIGhhcHB5IHdoZW4gcGVvcGxlIGRlY2lkZSB0byBjb250cmlidXRlXG4gICAgICAgICAgICAgICAgICAgICAgICB0byBvdXIgcHJvamVjdCwgd2UgaGFkIHBlb3BsZSByZXF1ZXN0aW5nIHN3YWcgYnkgY2hhbmdpbmcgd29yZHMgb24gb3VyXG4gICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudGF0aW9uIGFuZCBzaW1pbGFyLiBQbGVhc2Ugbm90ZSB0aGF0IHdlIHJlc2VydmUgdGhpcyBzd2FnIG9ubHkgdG9cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVhYmxlIGNvbnRyaWJ1dG9ycyB3aG8gcmVhbGx5IHdhbnQgdG8gaGVscCBvdXIgcHJvamVjdCBncm93LlxuICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgPC9DZWxsPlxuICAgICAgICAgICAgICAgIDxDZWxsPlxuICAgICAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3N3YWdJbWFnZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz17d2ViaW55U2hpcnRBbmRTdGlja2Vyc31cbiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD1cIkhvb2xhIEFJIFNXQUcgLSBTaGlydCBhbmQgU3RpY2tlcnNcIlxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvQ2VsbD5cbiAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgPC9Db250ZW50Q29udGFpbmVyPlxuXG4gICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT17Y2xhaW1Td2FnQmxvY2t9PlxuICAgICAgICAgICAgPENvbnRlbnRDb250YWluZXIgY2xhc3NOYW1lPXtjb250YWluZXJTdHlsZX0+XG4gICAgICAgICAgICAgICAgPFN1YlRpdGxlPkhvdyB0byBDbGFpbSBZb3VyIFNXQUc8L1N1YlRpdGxlPlxuICAgICAgICAgICAgICAgIDxwPlNlbmQgYW4gZW1haWwgdG8gY29tbXVuaXR5QGhvb2xhLmFpIHdpdGggdGhlIGZvbGxvd2luZyBpbmZvcm1hdGlvbjo8L3A+XG4gICAgICAgICAgICAgICAgPENsYWltSW5zdHJ1Y3Rpb25zPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPEJvbGQ+MS4gUGVyc29uYWwgaW5mb3JtYXRpb246PC9Cb2xkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5GaXJzdCBuYW1lPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TGFzdCBuYW1lPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2hpcnQgc2l6ZSAoaWYgYXBwbGllcyk8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Qm9sZD4yLiBDbGFpbSBkZXRhaWxzOjwvQm9sZD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WW91ciBHaXRIdWIgdXNlcm5hbWU8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbnkgVVJMcyB0aGF0IGFyZSByZWxldmFudCAobGluayB0byBhIFBSLCBhcnRpY2xlLi4uKTwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFueSBvdGhlciBpbmZvcm1hdGlvbiB5b3UgdGhpbmsgaXMgaW1wb3J0YW50PC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPEJvbGQ+My4gU2hpcHBpbmcgZGV0YWlsczo8L0JvbGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPllvdXIgZnVsbCBhZGRyZXNzPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UG9zdGNvZGU8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Db3VudHJ5PC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvQ2xhaW1JbnN0cnVjdGlvbnM+XG4gICAgICAgICAgICAgICAgPENsYWltTm90ZT5cbiAgICAgICAgICAgICAgICAgICAgKiBUaGUgcHJvdmlkZWQgaW5mb3JtYXRpb257XCIgXCJ9XG4gICAgICAgICAgICAgICAgICAgIDxCb2xkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHU+d29u4oCZdDwvdT5cbiAgICAgICAgICAgICAgICAgICAgPC9Cb2xkPntcIiBcIn1cbiAgICAgICAgICAgICAgICAgICAgYmUgdXNlZCBmb3IgbWFya2V0aW5nLCByZXRhcmdldGluZyBvciBhbnkgdHlwZXMgb2YgcHJvbW90aW9ucywgPGJyIC8+XG4gICAgICAgICAgICAgICAgICAgIGFuZCBpdHtcIiBcIn1cbiAgICAgICAgICAgICAgICAgICAgPEJvbGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8dT53b27igJl0PC91PlxuICAgICAgICAgICAgICAgICAgICA8L0JvbGQ+e1wiIFwifVxuICAgICAgICAgICAgICAgICAgICBiZSBzaGFyZWQgd2l0aCBhbnkgM3JkIHBhcnRpZXMuIFdlIGp1c3QgbmVlZCB0aGUgZGV0YWlscyB0byBrbm93IHdoZXJlIHRvIHNlbmRcbiAgICAgICAgICAgICAgICAgICAgeW91ciBwYWNrYWdlLlxuICAgICAgICAgICAgICAgIDwvQ2xhaW1Ob3RlPlxuICAgICAgICAgICAgICAgIDxDbGFpbU5vdGU+XG4gICAgICAgICAgICAgICAgICAgICoqIFdlIHJlc2VydmUgdGhlIHJpZ2h0IHRvIGRlY2lkZSBpZiB5b3VyIGNvbnRyaWJ1dGlvbiBpcyB2YWx1YWJsZSB0byBvdXJcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdCBhbmQgbWFrZSB0aGUgZmluYWwgZGVjaXNpb24gb24gdGhlIHN3YWcgcmVxdWVzdHMuXG4gICAgICAgICAgICAgICAgPC9DbGFpbU5vdGU+XG4gICAgICAgICAgICA8L0NvbnRlbnRDb250YWluZXI+XG4gICAgICAgIDwvc2VjdGlvbj5cblxuICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9e2FtYmFzc2Fkb3JCbG9ja30+XG4gICAgICAgICAgICA8Q29udGVudENvbnRhaW5lciBjbGFzc05hbWU9e2NvbnRhaW5lclN0eWxlfT5cbiAgICAgICAgICAgICAgICA8R3JpZCBsZWZ0PlxuICAgICAgICAgICAgICAgICAgICA8Q2VsbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXthbWJhc3NhZG9yQmFkZ2V9IGFsdD1cIkhvb2xhIEFJIEFtYmFzc2Fkb3JcIiAvPlxuICAgICAgICAgICAgICAgICAgICA8L0NlbGw+XG4gICAgICAgICAgICAgICAgICAgIDxDZWxsIGNsYXNzTmFtZT17YW1iYXNzYWRvckNvbnRlbnR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGgyPkhvb2xhIEFJIEFtYmFzc2Fkb3I8L2gyPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSWYgeW91IG9yZ2FuaXplZCBhIEhvb2xhIEFJIG1lZXR1cCBncm91cCwgb3Igd2FudCB0byBvcmdhbml6ZSBvbmUsIHdlIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhcHB5IHRvIHN1cHBvcnQgeW91LlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJvbGQ+V2hhdCB3ZSBjYW4gb2ZmZXI6PC9Cb2xkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5zcG9uc29yc2hpcCBmb3IgbG9jYWwgbWVldHVwIGdyb3VwczwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPnJldmlldyB5b3VyIEhvb2xhIEFJIHJlbGF0ZWQgY29udGVudC9wcmVzZW50YXRpb24vdGFsazwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPmhlbHAgd2l0aCB2aXN1YWxzIGFuZCBvdGhlciBtYXRlcmlhbDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPm1vcmUgU1dBRzwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzTmFtZT1cImpvaW5UZWFtXCI+Sm9pbiBPdXIgVGVhbTwvaDQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGb3IgYWN0aXZlIGFtYmFzc2Fkb3JzLCB3ZSBjYW4gZ28gYSBzdGVwIGZ1cnRoZXIuIElmIHlvdSBlbmpveSBlZHVjYXRpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdGhlcnMsIGxvdmUgYnVpbGRpbmcgY29tbXVuaXRpZXMsIG9yZ2FuaXppbmcgbWVldHVwcywgYXR0ZW5kaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmVyZW5jZXMsIGFuZCBzcHJlYWRpbmcgdGhlIHdvcmQgYWJvdXQgSG9vbGEgQUksIHdlIGFyZSByZWFkeSB0byBvZmZlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlvdSBhIGZ1bGwtdGltZSBwYWlkIHBvc2l0aW9uIGluIG91ciB0ZWFtLlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+VG8gYXBwbHksIHBsZWFzZSBzZW5kIHlvdXIgQ1YgdG8gaW5mb0Bob29sYS5haS48L3A+XG4gICAgICAgICAgICAgICAgICAgIDwvQ2VsbD5cbiAgICAgICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgICA8L0NvbnRlbnRDb250YWluZXI+XG4gICAgICAgIDwvc2VjdGlvbj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuKTtcbiJdfQ== */"),n=(0,l.css)({h2:{fontSize:X.default.fontSize.h2,color:X.default.color.white},p:{color:X.default.color.white},ul:{color:X.default.color.white,padding:0,margin:"-20px 0 20px 0",li:{marginLeft:20,fontSize:20,textAlign:"left"}},".joinTeam":{color:X.default.color.white,fontSize:20,fontWeight:600,display:"inline-block",backgroundColor:"#F5A723",padding:"2px 4px",borderRadius:5}},"label:ambassadorContent;","/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),J=(0,l.css)({backgroundColor:"#292929",color:X.default.color.white,padding:"50px 0 150px 0",p:{fontSize:20}},(0,d.default)({marginBottom:[-100,-100,-150]}),"label:claimSwagBlock;","/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),p=(0,c.default)("div",{target:"e6hl26r6",label:"ClaimInstructions"})({display:"flex",justifyContent:"space-between",fontSize:20,ul:{color:X.default.color.white,padding:0,margin:"10px 0 25px 20px",li:{marginLeft:20,fontSize:20}}},(0,d.default)({flexDirection:["column","row"]}),"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),t=(0,c.default)("p",{target:"e6hl26r7",label:"ClaimNote"})({fontSize:"14px !important",color:"#9B9B9B",textAlign:"center",marginTop:25},"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");g.default=I=>{let{children:g}=I;(0,b.default)(I,Y);return G.default.createElement(G.default.Fragment,null,G.default.createElement(B.default,{className:H+" "+a},G.default.createElement(V,null,G.default.createElement(v,null,"FREE SWAG",G.default.createElement("br",null),"{","for all our contributors and supporters","}",G.default.createElement("br",null),G.default.createElement("br",null)),G.default.createElement(h,null,"To show our appreciation to all our contributors and supporters, we are giving away free swag. The section below defines what swag is available, and how you can claim yours."),G.default.createElement(h,null,G.default.createElement(F,null,"Why are we doing this?"),G.default.createElement("br",null),"An open-source project, such as ours, can’t exist without a community around it. The community contributes and improves the project. This is the secret ingredient to a great open-source product. At Hoola AI we decided to offer a little token of appreciation to all our community members."),G.default.createElement(h,null,"This might look like free marketing, but our goal is sincere. Building a community around Hoola AI and advancing the adoption of serverless technology."),G.default.createElement(h,null,"If you share the same goal, jump in and help us spread the word."),G.default.createElement(h,{style:{textAlign:"right"}},"Sven, Co-founder & CEO"))),G.default.createElement(w,null),G.default.createElement(B.default,{className:H},G.default.createElement(y,null,"What’s Available for Grabs"),G.default.createElement(Z.Grid,{right:!0},G.default.createElement(Z.Cell,{title:"Spread the Knowledge"},G.default.createElement("p",null,"You have created a blog post, a tutorial or a video guide for Hoola AI related content? We would love to know about it, so we can spread the word through our channels. On top of that, we’ll send you a Hoola AI branded t-shirt."),G.default.createElement("p",{className:"notice"},G.default.createElement("strong",null,"Note:")," Before commiting your time to writing a tutorial, we recommend you give us a ping our our ",G.default.createElement("a",{href:"/slack"},"community slack")," so we make sure it's a valuable contribution.")),G.default.createElement(Z.Cell,null,G.default.createElement("img",{className:R,src:i.default,alt:"Hoola AI SWAG - Shirt"}))),G.default.createElement(Z.Grid,{left:!0},G.default.createElement(Z.Cell,null,G.default.createElement("img",{className:R,src:W.default,alt:"Hoola AI SWAG - Stickers"})),G.default.createElement(Z.Cell,{title:"Show us Your Work"},G.default.createElement("p",null,"Have you recently launched a project, a website, or an app, that runs on Hoola AI? Or if you have created a Hoola AI plugin? If so, please send it over, and we’ll have a look and send you some stickers in return. Selected projects and teams have the chance to be showcased on our website."))),G.default.createElement(Z.Grid,{right:!0},G.default.createElement(Z.Cell,{title:"Our Thanks to All Contributors"},G.default.createElement("p",null,"Got your first Hoola AI PR merged, that’s awesome! Thank you so much for contributing your time to our project. Expect this small token of appreciation. We will also add you to our contributors' page, as well as promote your profile on our website."),G.default.createElement("p",{className:"notice"},G.default.createElement("strong",null,"Note:")," Altough we are happy when people decide to contribute to our project, we had people requesting swag by changing words on our documentation and similar. Please note that we reserve this swag only to valuable contributors who really want to help our project grow.")),G.default.createElement(Z.Cell,null,G.default.createElement("img",{className:R,src:u.default,alt:"Hoola AI SWAG - Shirt and Stickers"})))),G.default.createElement("section",{className:J},G.default.createElement(B.default,{className:H},G.default.createElement(y,null,"How to Claim Your SWAG"),G.default.createElement("p",null,"Send an email to community@hoola.ai with the following information:"),G.default.createElement(p,null,G.default.createElement("div",null,G.default.createElement(F,null,"1. Personal information:"),G.default.createElement("ul",null,G.default.createElement("li",null,"First name"),G.default.createElement("li",null,"Last name"),G.default.createElement("li",null,"Shirt size (if applies)"))),G.default.createElement("div",null,G.default.createElement(F,null,"2. Claim details:"),G.default.createElement("ul",null,G.default.createElement("li",null,"Your GitHub username"),G.default.createElement("li",null,"Any URLs that are relevant (link to a PR, article...)"),G.default.createElement("li",null,"Any other information you think is important"))),G.default.createElement("div",null,G.default.createElement(F,null,"3. Shipping details:"),G.default.createElement("ul",null,G.default.createElement("li",null,"Your full address"),G.default.createElement("li",null,"Postcode"),G.default.createElement("li",null,"Country")))),G.default.createElement(t,null,"* The provided information"," ",G.default.createElement(F,null,G.default.createElement("u",null,"won’t"))," ","be used for marketing, retargeting or any types of promotions, ",G.default.createElement("br",null),"and it"," ",G.default.createElement(F,null,G.default.createElement("u",null,"won’t"))," ","be shared with any 3rd parties. We just need the details to know where to send your package."),G.default.createElement(t,null,"** We reserve the right to decide if your contribution is valuable to our project and make the final decision on the swag requests."))),G.default.createElement("section",{className:N},G.default.createElement(B.default,{className:H},G.default.createElement(Z.Grid,{left:!0},G.default.createElement(Z.Cell,null,G.default.createElement("img",{src:m.default,alt:"Hoola AI Ambassador"})),G.default.createElement(Z.Cell,{className:n},G.default.createElement("h2",null,"Hoola AI Ambassador"),G.default.createElement("p",null,"If you organized a Hoola AI meetup group, or want to organize one, we are happy to support you."),G.default.createElement("p",null,G.default.createElement(F,null,"What we can offer:")),G.default.createElement("ul",null,G.default.createElement("li",null,"sponsorship for local meetup groups"),G.default.createElement("li",null,"review your Hoola AI related content/presentation/talk"),G.default.createElement("li",null,"help with visuals and other material"),G.default.createElement("li",null,"more SWAG")),G.default.createElement("h4",{className:"joinTeam"},"Join Our Team"),G.default.createElement("p",null,"For active ambassadors, we can go a step further. If you enjoy educating others, love building communities, organizing meetups, attending conferences, and spreading the word about Hoola AI, we are ready to offer you a full-time paid position in our team."),G.default.createElement("p",null,"To apply, please send your CV to info@hoola.ai."))))))}}}]);
//# sourceMappingURL=b0283031-b1e9777661d5f77544f7.js.map